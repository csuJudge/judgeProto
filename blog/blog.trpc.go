// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: blog.proto

package blog

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// BlogServerService defines service.
type BlogServerService interface {
	// AddBlog AddBlog 添加博客
	AddBlog(ctx context.Context, req *AddBlogReq) (*CommonRsp, error)
	// UpdateBlog UpdateBlog 更新博客
	UpdateBlog(ctx context.Context, req *UpdateBlogReq) (*CommonRsp, error)
	// UpdateBlogStatus UpdateBlogStatus 更新博客状态
	UpdateBlogStatus(ctx context.Context, req *UpdateBlogStatusReq) (*CommonRsp, error)
	// QueryMyBlog QueryMyBlog 查询我的博客
	QueryMyBlog(ctx context.Context, req *QueryBlogPageSizeReq) (*QueryBlogPageSizeRsp, error)
	// QueryBlogPageSize QueryBlogPageSize 分页查询博客
	QueryBlogPageSize(ctx context.Context, req *QueryBlogPageSizeReq) (*QueryBlogPageSizeRsp, error)
	// QueryBlog QueryBlog 查询博客
	QueryBlog(ctx context.Context, req *QueryBlogReq) (*QueryBlogRsp, error)
	// QueryAllBlog QueryAllBlog 分页所有查询博客
	QueryAllBlog(ctx context.Context, req *QueryBlogPageSizeReq) (*QueryBlogPageSizeRsp, error)
}

func BlogServerService_AddBlog_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddBlogReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(BlogServerService).AddBlog(ctx, reqbody.(*AddBlogReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func BlogServerService_UpdateBlog_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateBlogReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(BlogServerService).UpdateBlog(ctx, reqbody.(*UpdateBlogReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func BlogServerService_UpdateBlogStatus_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateBlogStatusReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(BlogServerService).UpdateBlogStatus(ctx, reqbody.(*UpdateBlogStatusReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func BlogServerService_QueryMyBlog_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryBlogPageSizeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(BlogServerService).QueryMyBlog(ctx, reqbody.(*QueryBlogPageSizeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func BlogServerService_QueryBlogPageSize_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryBlogPageSizeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(BlogServerService).QueryBlogPageSize(ctx, reqbody.(*QueryBlogPageSizeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func BlogServerService_QueryBlog_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryBlogReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(BlogServerService).QueryBlog(ctx, reqbody.(*QueryBlogReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func BlogServerService_QueryAllBlog_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryBlogPageSizeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(BlogServerService).QueryAllBlog(ctx, reqbody.(*QueryBlogPageSizeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// BlogServerServer_ServiceDesc descriptor for server.RegisterService.
var BlogServerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "oj.blog.BlogServer",
	HandlerType: ((*BlogServerService)(nil)),
	Methods: []server.Method{
		{
			Name: "/oj.blog.BlogServer/AddBlog",
			Func: BlogServerService_AddBlog_Handler,
		},
		{
			Name: "/oj.blog.BlogServer/UpdateBlog",
			Func: BlogServerService_UpdateBlog_Handler,
		},
		{
			Name: "/oj.blog.BlogServer/UpdateBlogStatus",
			Func: BlogServerService_UpdateBlogStatus_Handler,
		},
		{
			Name: "/oj.blog.BlogServer/QueryMyBlog",
			Func: BlogServerService_QueryMyBlog_Handler,
		},
		{
			Name: "/oj.blog.BlogServer/QueryBlogPageSize",
			Func: BlogServerService_QueryBlogPageSize_Handler,
		},
		{
			Name: "/oj.blog.BlogServer/QueryBlog",
			Func: BlogServerService_QueryBlog_Handler,
		},
		{
			Name: "/oj.blog.BlogServer/QueryAllBlog",
			Func: BlogServerService_QueryAllBlog_Handler,
		},
	},
}

// RegisterBlogServerService registers service.
func RegisterBlogServerService(s server.Service, svr BlogServerService) {
	if err := s.Register(&BlogServerServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("BlogServer register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedBlogServer struct{}

// AddBlog AddBlog 添加博客
func (s *UnimplementedBlogServer) AddBlog(ctx context.Context, req *AddBlogReq) (*CommonRsp, error) {
	return nil, errors.New("rpc AddBlog of service BlogServer is not implemented")
}

// UpdateBlog UpdateBlog 更新博客
func (s *UnimplementedBlogServer) UpdateBlog(ctx context.Context, req *UpdateBlogReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateBlog of service BlogServer is not implemented")
}

// UpdateBlogStatus UpdateBlogStatus 更新博客状态
func (s *UnimplementedBlogServer) UpdateBlogStatus(ctx context.Context, req *UpdateBlogStatusReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateBlogStatus of service BlogServer is not implemented")
}

// QueryMyBlog QueryMyBlog 查询我的博客
func (s *UnimplementedBlogServer) QueryMyBlog(ctx context.Context, req *QueryBlogPageSizeReq) (*QueryBlogPageSizeRsp, error) {
	return nil, errors.New("rpc QueryMyBlog of service BlogServer is not implemented")
}

// QueryBlogPageSize QueryBlogPageSize 分页查询博客
func (s *UnimplementedBlogServer) QueryBlogPageSize(ctx context.Context, req *QueryBlogPageSizeReq) (*QueryBlogPageSizeRsp, error) {
	return nil, errors.New("rpc QueryBlogPageSize of service BlogServer is not implemented")
}

// QueryBlog QueryBlog 查询博客
func (s *UnimplementedBlogServer) QueryBlog(ctx context.Context, req *QueryBlogReq) (*QueryBlogRsp, error) {
	return nil, errors.New("rpc QueryBlog of service BlogServer is not implemented")
}

// QueryAllBlog QueryAllBlog 分页所有查询博客
func (s *UnimplementedBlogServer) QueryAllBlog(ctx context.Context, req *QueryBlogPageSizeReq) (*QueryBlogPageSizeRsp, error) {
	return nil, errors.New("rpc QueryAllBlog of service BlogServer is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// BlogServerClientProxy defines service client proxy
type BlogServerClientProxy interface {
	// AddBlog AddBlog 添加博客
	AddBlog(ctx context.Context, req *AddBlogReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateBlog UpdateBlog 更新博客
	UpdateBlog(ctx context.Context, req *UpdateBlogReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateBlogStatus UpdateBlogStatus 更新博客状态
	UpdateBlogStatus(ctx context.Context, req *UpdateBlogStatusReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QueryMyBlog QueryMyBlog 查询我的博客
	QueryMyBlog(ctx context.Context, req *QueryBlogPageSizeReq, opts ...client.Option) (rsp *QueryBlogPageSizeRsp, err error)
	// QueryBlogPageSize QueryBlogPageSize 分页查询博客
	QueryBlogPageSize(ctx context.Context, req *QueryBlogPageSizeReq, opts ...client.Option) (rsp *QueryBlogPageSizeRsp, err error)
	// QueryBlog QueryBlog 查询博客
	QueryBlog(ctx context.Context, req *QueryBlogReq, opts ...client.Option) (rsp *QueryBlogRsp, err error)
	// QueryAllBlog QueryAllBlog 分页所有查询博客
	QueryAllBlog(ctx context.Context, req *QueryBlogPageSizeReq, opts ...client.Option) (rsp *QueryBlogPageSizeRsp, err error)
}

type BlogServerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewBlogServerClientProxy = func(opts ...client.Option) BlogServerClientProxy {
	return &BlogServerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *BlogServerClientProxyImpl) AddBlog(ctx context.Context, req *AddBlogReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.blog.BlogServer/AddBlog")
	msg.WithCalleeServiceName(BlogServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("BlogServer")
	msg.WithCalleeMethod("AddBlog")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *BlogServerClientProxyImpl) UpdateBlog(ctx context.Context, req *UpdateBlogReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.blog.BlogServer/UpdateBlog")
	msg.WithCalleeServiceName(BlogServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("BlogServer")
	msg.WithCalleeMethod("UpdateBlog")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *BlogServerClientProxyImpl) UpdateBlogStatus(ctx context.Context, req *UpdateBlogStatusReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.blog.BlogServer/UpdateBlogStatus")
	msg.WithCalleeServiceName(BlogServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("BlogServer")
	msg.WithCalleeMethod("UpdateBlogStatus")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *BlogServerClientProxyImpl) QueryMyBlog(ctx context.Context, req *QueryBlogPageSizeReq, opts ...client.Option) (*QueryBlogPageSizeRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.blog.BlogServer/QueryMyBlog")
	msg.WithCalleeServiceName(BlogServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("BlogServer")
	msg.WithCalleeMethod("QueryMyBlog")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryBlogPageSizeRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *BlogServerClientProxyImpl) QueryBlogPageSize(ctx context.Context, req *QueryBlogPageSizeReq, opts ...client.Option) (*QueryBlogPageSizeRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.blog.BlogServer/QueryBlogPageSize")
	msg.WithCalleeServiceName(BlogServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("BlogServer")
	msg.WithCalleeMethod("QueryBlogPageSize")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryBlogPageSizeRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *BlogServerClientProxyImpl) QueryBlog(ctx context.Context, req *QueryBlogReq, opts ...client.Option) (*QueryBlogRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.blog.BlogServer/QueryBlog")
	msg.WithCalleeServiceName(BlogServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("BlogServer")
	msg.WithCalleeMethod("QueryBlog")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryBlogRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *BlogServerClientProxyImpl) QueryAllBlog(ctx context.Context, req *QueryBlogPageSizeReq, opts ...client.Option) (*QueryBlogPageSizeRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.blog.BlogServer/QueryAllBlog")
	msg.WithCalleeServiceName(BlogServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("BlogServer")
	msg.WithCalleeMethod("QueryAllBlog")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryBlogPageSizeRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
