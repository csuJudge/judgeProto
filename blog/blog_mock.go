// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/csuJudge/judgeProto/blog/blog.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/csuJudge/judgeProto/blog/blog_mock.go -package=blog -self_package=github.com/csuJudge/judgeProto/blog --source=stub/github.com/csuJudge/judgeProto/blog/blog.trpc.go
//

// Package blog is a generated GoMock package.
package blog

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockBlogServerService is a mock of BlogServerService interface.
type MockBlogServerService struct {
	ctrl     *gomock.Controller
	recorder *MockBlogServerServiceMockRecorder
}

// MockBlogServerServiceMockRecorder is the mock recorder for MockBlogServerService.
type MockBlogServerServiceMockRecorder struct {
	mock *MockBlogServerService
}

// NewMockBlogServerService creates a new mock instance.
func NewMockBlogServerService(ctrl *gomock.Controller) *MockBlogServerService {
	mock := &MockBlogServerService{ctrl: ctrl}
	mock.recorder = &MockBlogServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogServerService) EXPECT() *MockBlogServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockBlogServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddBlog mocks base method.
func (m *MockBlogServerService) AddBlog(ctx context.Context, req *AddBlogReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlog", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlog indicates an expected call of AddBlog.
func (mr *MockBlogServerServiceMockRecorder) AddBlog(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlog", reflect.TypeOf((*MockBlogServerService)(nil).AddBlog), ctx, req)
}

// QueryAllBlog mocks base method.
func (m *MockBlogServerService) QueryAllBlog(ctx context.Context, req *QueryBlogByPageSizeReq) (*QueryBlogByPageSizeRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllBlog", ctx, req)
	ret0, _ := ret[0].(*QueryBlogByPageSizeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllBlog indicates an expected call of QueryAllBlog.
func (mr *MockBlogServerServiceMockRecorder) QueryAllBlog(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllBlog", reflect.TypeOf((*MockBlogServerService)(nil).QueryAllBlog), ctx, req)
}

// QueryBlog mocks base method.
func (m *MockBlogServerService) QueryBlog(ctx context.Context, req *QueryBlogReq) (*QueryBlogRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBlog", ctx, req)
	ret0, _ := ret[0].(*QueryBlogRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBlog indicates an expected call of QueryBlog.
func (mr *MockBlogServerServiceMockRecorder) QueryBlog(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlog", reflect.TypeOf((*MockBlogServerService)(nil).QueryBlog), ctx, req)
}

// QueryBlogByPageSize mocks base method.
func (m *MockBlogServerService) QueryBlogByPageSize(ctx context.Context, req *QueryBlogByPageSizeReq) (*QueryBlogByPageSizeRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBlogByPageSize", ctx, req)
	ret0, _ := ret[0].(*QueryBlogByPageSizeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBlogByPageSize indicates an expected call of QueryBlogByPageSize.
func (mr *MockBlogServerServiceMockRecorder) QueryBlogByPageSize(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlogByPageSize", reflect.TypeOf((*MockBlogServerService)(nil).QueryBlogByPageSize), ctx, req)
}

// QueryMyBlog mocks base method.
func (m *MockBlogServerService) QueryMyBlog(ctx context.Context, req *QueryMyBlogReq) (*QueryMyBlogRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMyBlog", ctx, req)
	ret0, _ := ret[0].(*QueryMyBlogRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMyBlog indicates an expected call of QueryMyBlog.
func (mr *MockBlogServerServiceMockRecorder) QueryMyBlog(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMyBlog", reflect.TypeOf((*MockBlogServerService)(nil).QueryMyBlog), ctx, req)
}

// UpdateBlog mocks base method.
func (m *MockBlogServerService) UpdateBlog(ctx context.Context, req *UpdateBlogReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlog", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBlog indicates an expected call of UpdateBlog.
func (mr *MockBlogServerServiceMockRecorder) UpdateBlog(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlog", reflect.TypeOf((*MockBlogServerService)(nil).UpdateBlog), ctx, req)
}

// UpdateBlogStatus mocks base method.
func (m *MockBlogServerService) UpdateBlogStatus(ctx context.Context, req *UpdateBlogStatusReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlogStatus", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBlogStatus indicates an expected call of UpdateBlogStatus.
func (mr *MockBlogServerServiceMockRecorder) UpdateBlogStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlogStatus", reflect.TypeOf((*MockBlogServerService)(nil).UpdateBlogStatus), ctx, req)
}

// MockBlogServerClientProxy is a mock of BlogServerClientProxy interface.
type MockBlogServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockBlogServerClientProxyMockRecorder
}

// MockBlogServerClientProxyMockRecorder is the mock recorder for MockBlogServerClientProxy.
type MockBlogServerClientProxyMockRecorder struct {
	mock *MockBlogServerClientProxy
}

// NewMockBlogServerClientProxy creates a new mock instance.
func NewMockBlogServerClientProxy(ctrl *gomock.Controller) *MockBlogServerClientProxy {
	mock := &MockBlogServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockBlogServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogServerClientProxy) EXPECT() *MockBlogServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockBlogServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddBlog mocks base method.
func (m *MockBlogServerClientProxy) AddBlog(ctx context.Context, req *AddBlogReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBlog", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlog indicates an expected call of AddBlog.
func (mr *MockBlogServerClientProxyMockRecorder) AddBlog(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlog", reflect.TypeOf((*MockBlogServerClientProxy)(nil).AddBlog), varargs...)
}

// QueryAllBlog mocks base method.
func (m *MockBlogServerClientProxy) QueryAllBlog(ctx context.Context, req *QueryBlogByPageSizeReq, opts ...client.Option) (*QueryBlogByPageSizeRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAllBlog", varargs...)
	ret0, _ := ret[0].(*QueryBlogByPageSizeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllBlog indicates an expected call of QueryAllBlog.
func (mr *MockBlogServerClientProxyMockRecorder) QueryAllBlog(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllBlog", reflect.TypeOf((*MockBlogServerClientProxy)(nil).QueryAllBlog), varargs...)
}

// QueryBlog mocks base method.
func (m *MockBlogServerClientProxy) QueryBlog(ctx context.Context, req *QueryBlogReq, opts ...client.Option) (*QueryBlogRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBlog", varargs...)
	ret0, _ := ret[0].(*QueryBlogRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBlog indicates an expected call of QueryBlog.
func (mr *MockBlogServerClientProxyMockRecorder) QueryBlog(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlog", reflect.TypeOf((*MockBlogServerClientProxy)(nil).QueryBlog), varargs...)
}

// QueryBlogByPageSize mocks base method.
func (m *MockBlogServerClientProxy) QueryBlogByPageSize(ctx context.Context, req *QueryBlogByPageSizeReq, opts ...client.Option) (*QueryBlogByPageSizeRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBlogByPageSize", varargs...)
	ret0, _ := ret[0].(*QueryBlogByPageSizeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBlogByPageSize indicates an expected call of QueryBlogByPageSize.
func (mr *MockBlogServerClientProxyMockRecorder) QueryBlogByPageSize(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlogByPageSize", reflect.TypeOf((*MockBlogServerClientProxy)(nil).QueryBlogByPageSize), varargs...)
}

// QueryMyBlog mocks base method.
func (m *MockBlogServerClientProxy) QueryMyBlog(ctx context.Context, req *QueryMyBlogReq, opts ...client.Option) (*QueryMyBlogRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMyBlog", varargs...)
	ret0, _ := ret[0].(*QueryMyBlogRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMyBlog indicates an expected call of QueryMyBlog.
func (mr *MockBlogServerClientProxyMockRecorder) QueryMyBlog(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMyBlog", reflect.TypeOf((*MockBlogServerClientProxy)(nil).QueryMyBlog), varargs...)
}

// UpdateBlog mocks base method.
func (m *MockBlogServerClientProxy) UpdateBlog(ctx context.Context, req *UpdateBlogReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBlog", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBlog indicates an expected call of UpdateBlog.
func (mr *MockBlogServerClientProxyMockRecorder) UpdateBlog(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlog", reflect.TypeOf((*MockBlogServerClientProxy)(nil).UpdateBlog), varargs...)
}

// UpdateBlogStatus mocks base method.
func (m *MockBlogServerClientProxy) UpdateBlogStatus(ctx context.Context, req *UpdateBlogStatusReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBlogStatus", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBlogStatus indicates an expected call of UpdateBlogStatus.
func (mr *MockBlogServerClientProxyMockRecorder) UpdateBlogStatus(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlogStatus", reflect.TypeOf((*MockBlogServerClientProxy)(nil).UpdateBlogStatus), varargs...)
}
