// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.19.1
// source: contest.proto

package contest

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryContestPrivilegeInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryContestPrivilegeInfoReq) Reset() {
	*x = QueryContestPrivilegeInfoReq{}
	mi := &file_contest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryContestPrivilegeInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContestPrivilegeInfoReq) ProtoMessage() {}

func (x *QueryContestPrivilegeInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_contest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContestPrivilegeInfoReq.ProtoReflect.Descriptor instead.
func (*QueryContestPrivilegeInfoReq) Descriptor() ([]byte, []int) {
	return file_contest_proto_rawDescGZIP(), []int{0}
}

func (x *QueryContestPrivilegeInfoReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryContestPrivilegeInfoRsp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Message        string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`               // 返回信息
	Code           int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`                    // 返回码
	ContestProblem string                 `protobuf:"bytes,3,opt,name=contestProblem,proto3" json:"contestProblem,omitempty"` // 查询作业的问题
	ContestUser    string                 `protobuf:"bytes,4,opt,name=contestUser,proto3" json:"contestUser,omitempty"`       // 查询作业的用户
	Private        int32                  `protobuf:"varint,5,opt,name=private,proto3" json:"private,omitempty"`              // 作业的可见度
	ContestClass   string                 `protobuf:"bytes,6,opt,name=contestClass,proto3" json:"contestClass,omitempty"`     // 查询作业的班级
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QueryContestPrivilegeInfoRsp) Reset() {
	*x = QueryContestPrivilegeInfoRsp{}
	mi := &file_contest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryContestPrivilegeInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContestPrivilegeInfoRsp) ProtoMessage() {}

func (x *QueryContestPrivilegeInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_contest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContestPrivilegeInfoRsp.ProtoReflect.Descriptor instead.
func (*QueryContestPrivilegeInfoRsp) Descriptor() ([]byte, []int) {
	return file_contest_proto_rawDescGZIP(), []int{1}
}

func (x *QueryContestPrivilegeInfoRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryContestPrivilegeInfoRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryContestPrivilegeInfoRsp) GetContestProblem() string {
	if x != nil {
		return x.ContestProblem
	}
	return ""
}

func (x *QueryContestPrivilegeInfoRsp) GetContestUser() string {
	if x != nil {
		return x.ContestUser
	}
	return ""
}

func (x *QueryContestPrivilegeInfoRsp) GetPrivate() int32 {
	if x != nil {
		return x.Private
	}
	return 0
}

func (x *QueryContestPrivilegeInfoRsp) GetContestClass() string {
	if x != nil {
		return x.ContestClass
	}
	return ""
}

type AddContestReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`            // 用户编号
	StartTime     string                 `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`       // 开始时间
	EndTime       string                 `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`           // 结束时间
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`               // 标题
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`   // 描述
	Private       int32                  `protobuf:"varint,6,opt,name=private,proto3" json:"private,omitempty"`          // 是否私有，0公开，1班级访问，2密码访问
	Password      string                 `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`         // 密码
	LanguageMask  string                 `protobuf:"bytes,8,opt,name=languageMask,proto3" json:"languageMask,omitempty"` // 限制语言
	Problems      string                 `protobuf:"bytes,9,opt,name=problems,proto3" json:"problems,omitempty"`         // 题目列表
	People        string                 `protobuf:"bytes,10,opt,name=people,proto3" json:"people,omitempty"`            // 人员
	ClassID       string                 `protobuf:"bytes,11,opt,name=classID,proto3" json:"classID,omitempty"`          // 班级
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddContestReq) Reset() {
	*x = AddContestReq{}
	mi := &file_contest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddContestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContestReq) ProtoMessage() {}

func (x *AddContestReq) ProtoReflect() protoreflect.Message {
	mi := &file_contest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContestReq.ProtoReflect.Descriptor instead.
func (*AddContestReq) Descriptor() ([]byte, []int) {
	return file_contest_proto_rawDescGZIP(), []int{2}
}

func (x *AddContestReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *AddContestReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *AddContestReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *AddContestReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddContestReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddContestReq) GetPrivate() int32 {
	if x != nil {
		return x.Private
	}
	return 0
}

func (x *AddContestReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddContestReq) GetLanguageMask() string {
	if x != nil {
		return x.LanguageMask
	}
	return ""
}

func (x *AddContestReq) GetProblems() string {
	if x != nil {
		return x.Problems
	}
	return ""
}

func (x *AddContestReq) GetPeople() string {
	if x != nil {
		return x.People
	}
	return ""
}

func (x *AddContestReq) GetClassID() string {
	if x != nil {
		return x.ClassID
	}
	return ""
}

type UpdateContestReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestID     int32                  `protobuf:"varint,1,opt,name=contestID,proto3" json:"contestID,omitempty"`      // 作业编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`            // 用户编号
	StartTime     string                 `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`       // 开始时间
	EndTime       string                 `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`           // 结束时间
	Title         string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`               // 标题
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`   // 描述
	Private       int32                  `protobuf:"varint,7,opt,name=private,proto3" json:"private,omitempty"`          // 是否私有，0公开，1班级访问，2密码访问
	Password      string                 `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`         // 密码
	LanguageMask  string                 `protobuf:"bytes,9,opt,name=languageMask,proto3" json:"languageMask,omitempty"` // 限制语言
	Problems      string                 `protobuf:"bytes,10,opt,name=problems,proto3" json:"problems,omitempty"`        // 题目列表
	People        string                 `protobuf:"bytes,11,opt,name=people,proto3" json:"people,omitempty"`            // 人员
	ClassID       string                 `protobuf:"bytes,12,opt,name=classID,proto3" json:"classID,omitempty"`          // 班级
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateContestReq) Reset() {
	*x = UpdateContestReq{}
	mi := &file_contest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateContestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContestReq) ProtoMessage() {}

func (x *UpdateContestReq) ProtoReflect() protoreflect.Message {
	mi := &file_contest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContestReq.ProtoReflect.Descriptor instead.
func (*UpdateContestReq) Descriptor() ([]byte, []int) {
	return file_contest_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateContestReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

func (x *UpdateContestReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateContestReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdateContestReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *UpdateContestReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateContestReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateContestReq) GetPrivate() int32 {
	if x != nil {
		return x.Private
	}
	return 0
}

func (x *UpdateContestReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateContestReq) GetLanguageMask() string {
	if x != nil {
		return x.LanguageMask
	}
	return ""
}

func (x *UpdateContestReq) GetProblems() string {
	if x != nil {
		return x.Problems
	}
	return ""
}

func (x *UpdateContestReq) GetPeople() string {
	if x != nil {
		return x.People
	}
	return ""
}

func (x *UpdateContestReq) GetClassID() string {
	if x != nil {
		return x.ClassID
	}
	return ""
}

type UpdateContestStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户主键
	ContestID     int32                  `protobuf:"varint,2,opt,name=contestID,proto3" json:"contestID,omitempty"` // 作业主键
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`       // 状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateContestStatusReq) Reset() {
	*x = UpdateContestStatusReq{}
	mi := &file_contest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateContestStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContestStatusReq) ProtoMessage() {}

func (x *UpdateContestStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_contest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContestStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateContestStatusReq) Descriptor() ([]byte, []int) {
	return file_contest_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateContestStatusReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateContestStatusReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

func (x *UpdateContestStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type QueryContestListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`           // 页
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`         // 页大小
	UserID        int32                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户主键
	QueryType     int32                  `protobuf:"varint,4,opt,name=queryType,proto3" json:"queryType,omitempty"` // 查询的类型
	ClassID       string                 `protobuf:"bytes,5,opt,name=classID,proto3" json:"classID,omitempty"`      // 班级编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryContestListReq) Reset() {
	*x = QueryContestListReq{}
	mi := &file_contest_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryContestListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContestListReq) ProtoMessage() {}

func (x *QueryContestListReq) ProtoReflect() protoreflect.Message {
	mi := &file_contest_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContestListReq.ProtoReflect.Descriptor instead.
func (*QueryContestListReq) Descriptor() ([]byte, []int) {
	return file_contest_proto_rawDescGZIP(), []int{5}
}

func (x *QueryContestListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryContestListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryContestListReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QueryContestListReq) GetQueryType() int32 {
	if x != nil {
		return x.QueryType
	}
	return 0
}

func (x *QueryContestListReq) GetClassID() string {
	if x != nil {
		return x.ClassID
	}
	return ""
}

type QueryContestListRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`   // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`        // 返回码
	Contests      []*Contest             `protobuf:"bytes,3,rep,name=contests,proto3" json:"contests,omitempty"` // 作业集合
	Total         int32                  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`      // 总数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryContestListRsp) Reset() {
	*x = QueryContestListRsp{}
	mi := &file_contest_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryContestListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContestListRsp) ProtoMessage() {}

func (x *QueryContestListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_contest_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContestListRsp.ProtoReflect.Descriptor instead.
func (*QueryContestListRsp) Descriptor() ([]byte, []int) {
	return file_contest_proto_rawDescGZIP(), []int{6}
}

func (x *QueryContestListRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryContestListRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryContestListRsp) GetContests() []*Contest {
	if x != nil {
		return x.Contests
	}
	return nil
}

func (x *QueryContestListRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryContestReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestID     int32                  `protobuf:"varint,1,opt,name=contestID,proto3" json:"contestID,omitempty"` // 作业编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户主键
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`    // 密码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryContestReq) Reset() {
	*x = QueryContestReq{}
	mi := &file_contest_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryContestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContestReq) ProtoMessage() {}

func (x *QueryContestReq) ProtoReflect() protoreflect.Message {
	mi := &file_contest_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContestReq.ProtoReflect.Descriptor instead.
func (*QueryContestReq) Descriptor() ([]byte, []int) {
	return file_contest_proto_rawDescGZIP(), []int{7}
}

func (x *QueryContestReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

func (x *QueryContestReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QueryContestReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type QueryContestRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Contest       *Contest               `protobuf:"bytes,3,opt,name=contest,proto3" json:"contest,omitempty"` // 作业
	See           bool                   `protobuf:"varint,4,opt,name=see,proto3" json:"see,omitempty"`        // 是否可见
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryContestRsp) Reset() {
	*x = QueryContestRsp{}
	mi := &file_contest_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryContestRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContestRsp) ProtoMessage() {}

func (x *QueryContestRsp) ProtoReflect() protoreflect.Message {
	mi := &file_contest_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContestRsp.ProtoReflect.Descriptor instead.
func (*QueryContestRsp) Descriptor() ([]byte, []int) {
	return file_contest_proto_rawDescGZIP(), []int{8}
}

func (x *QueryContestRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryContestRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryContestRsp) GetContest() *Contest {
	if x != nil {
		return x.Contest
	}
	return nil
}

func (x *QueryContestRsp) GetSee() bool {
	if x != nil {
		return x.See
	}
	return false
}

type Contest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestID     int32                  `protobuf:"varint,1,opt,name=contestID,proto3" json:"contestID,omitempty"`      // 作业编号
	StartTime     string                 `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`       // 开始时间
	EndTime       string                 `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`           // 结束时间
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`               // 标题
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`   // 描述
	LanguageMask  string                 `protobuf:"bytes,6,opt,name=languageMask,proto3" json:"languageMask,omitempty"` // 限制语言
	Creator       string                 `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`           // 创建者
	Problems      []*ContestProblem      `protobuf:"bytes,8,rep,name=problems,proto3" json:"problems,omitempty"`         // 题目列表
	CreatedBy     int32                  `protobuf:"varint,9,opt,name=createdBy,proto3" json:"createdBy,omitempty"`      // 创建者编号
	Private       int32                  `protobuf:"varint,10,opt,name=private,proto3" json:"private,omitempty"`         // 是否私有
	Password      string                 `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`        // 密码
	Enable        int32                  `protobuf:"varint,12,opt,name=enable,proto3" json:"enable,omitempty"`           // 是否结束
	Classes       []*Class               `protobuf:"bytes,13,rep,name=classes,proto3" json:"classes,omitempty"`          // 作业的班级
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Contest) Reset() {
	*x = Contest{}
	mi := &file_contest_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contest) ProtoMessage() {}

func (x *Contest) ProtoReflect() protoreflect.Message {
	mi := &file_contest_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contest.ProtoReflect.Descriptor instead.
func (*Contest) Descriptor() ([]byte, []int) {
	return file_contest_proto_rawDescGZIP(), []int{9}
}

func (x *Contest) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

func (x *Contest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Contest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Contest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Contest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Contest) GetLanguageMask() string {
	if x != nil {
		return x.LanguageMask
	}
	return ""
}

func (x *Contest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Contest) GetProblems() []*ContestProblem {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *Contest) GetCreatedBy() int32 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *Contest) GetPrivate() int32 {
	if x != nil {
		return x.Private
	}
	return 0
}

func (x *Contest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Contest) GetEnable() int32 {
	if x != nil {
		return x.Enable
	}
	return 0
}

func (x *Contest) GetClasses() []*Class {
	if x != nil {
		return x.Classes
	}
	return nil
}

type Class struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClassID       int32                  `protobuf:"varint,1,opt,name=classID,proto3" json:"classID,omitempty"`    // 班级编号
	ClassName     string                 `protobuf:"bytes,2,opt,name=ClassName,proto3" json:"ClassName,omitempty"` // 班级名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Class) Reset() {
	*x = Class{}
	mi := &file_contest_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Class) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Class) ProtoMessage() {}

func (x *Class) ProtoReflect() protoreflect.Message {
	mi := &file_contest_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Class.ProtoReflect.Descriptor instead.
func (*Class) Descriptor() ([]byte, []int) {
	return file_contest_proto_rawDescGZIP(), []int{10}
}

func (x *Class) GetClassID() int32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *Class) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

type CommonRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonRsp) Reset() {
	*x = CommonRsp{}
	mi := &file_contest_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRsp) ProtoMessage() {}

func (x *CommonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_contest_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRsp.ProtoReflect.Descriptor instead.
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return file_contest_proto_rawDescGZIP(), []int{11}
}

func (x *CommonRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type ContestProblem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`    // 题目编号
	ProblemName   string                 `protobuf:"bytes,2,opt,name=problemName,proto3" json:"problemName,omitempty"` // 题目名称
	IsDone        int32                  `protobuf:"varint,3,opt,name=isDone,proto3" json:"isDone,omitempty"`          // 是否做完
	Solved        int32                  `protobuf:"varint,4,opt,name=solved,proto3" json:"solved,omitempty"`          // 解决
	Submission    int32                  `protobuf:"varint,5,opt,name=submission,proto3" json:"submission,omitempty"`  // 提交
	Difficulty    int32                  `protobuf:"varint,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`  // 难度
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContestProblem) Reset() {
	*x = ContestProblem{}
	mi := &file_contest_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContestProblem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestProblem) ProtoMessage() {}

func (x *ContestProblem) ProtoReflect() protoreflect.Message {
	mi := &file_contest_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestProblem.ProtoReflect.Descriptor instead.
func (*ContestProblem) Descriptor() ([]byte, []int) {
	return file_contest_proto_rawDescGZIP(), []int{12}
}

func (x *ContestProblem) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *ContestProblem) GetProblemName() string {
	if x != nil {
		return x.ProblemName
	}
	return ""
}

func (x *ContestProblem) GetIsDone() int32 {
	if x != nil {
		return x.IsDone
	}
	return 0
}

func (x *ContestProblem) GetSolved() int32 {
	if x != nil {
		return x.Solved
	}
	return 0
}

func (x *ContestProblem) GetSubmission() int32 {
	if x != nil {
		return x.Submission
	}
	return 0
}

func (x *ContestProblem) GetDifficulty() int32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

var File_contest_proto protoreflect.FileDescriptor

var file_contest_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x6f, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x1c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0xd4, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65,
	0x6f, 0x70, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x22, 0xe0, 0x02, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x22,
	0x66, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x63, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6f, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x73, 0x65, 0x65, 0x22, 0xa6,
	0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6a, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x6a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x32, 0xde, 0x04, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x6f, 0x6a, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e,
	0x6f, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x6f, 0x6a, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x2e,
	0x6f, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x28, 0x2e, 0x6f, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x6a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x73, 0x75, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contest_proto_rawDescOnce sync.Once
	file_contest_proto_rawDescData = file_contest_proto_rawDesc
)

func file_contest_proto_rawDescGZIP() []byte {
	file_contest_proto_rawDescOnce.Do(func() {
		file_contest_proto_rawDescData = protoimpl.X.CompressGZIP(file_contest_proto_rawDescData)
	})
	return file_contest_proto_rawDescData
}

var file_contest_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_contest_proto_goTypes = []any{
	(*QueryContestPrivilegeInfoReq)(nil), // 0: oj.contest.QueryContestPrivilegeInfoReq
	(*QueryContestPrivilegeInfoRsp)(nil), // 1: oj.contest.QueryContestPrivilegeInfoRsp
	(*AddContestReq)(nil),                // 2: oj.contest.AddContestReq
	(*UpdateContestReq)(nil),             // 3: oj.contest.UpdateContestReq
	(*UpdateContestStatusReq)(nil),       // 4: oj.contest.UpdateContestStatusReq
	(*QueryContestListReq)(nil),          // 5: oj.contest.QueryContestListReq
	(*QueryContestListRsp)(nil),          // 6: oj.contest.QueryContestListRsp
	(*QueryContestReq)(nil),              // 7: oj.contest.QueryContestReq
	(*QueryContestRsp)(nil),              // 8: oj.contest.QueryContestRsp
	(*Contest)(nil),                      // 9: oj.contest.Contest
	(*Class)(nil),                        // 10: oj.contest.Class
	(*CommonRsp)(nil),                    // 11: oj.contest.CommonRsp
	(*ContestProblem)(nil),               // 12: oj.contest.ContestProblem
}
var file_contest_proto_depIdxs = []int32{
	9,  // 0: oj.contest.QueryContestListRsp.contests:type_name -> oj.contest.Contest
	9,  // 1: oj.contest.QueryContestRsp.contest:type_name -> oj.contest.Contest
	12, // 2: oj.contest.Contest.problems:type_name -> oj.contest.ContestProblem
	10, // 3: oj.contest.Contest.classes:type_name -> oj.contest.Class
	7,  // 4: oj.contest.ContestServer.QueryContest:input_type -> oj.contest.QueryContestReq
	5,  // 5: oj.contest.ContestServer.QueryContestList:input_type -> oj.contest.QueryContestListReq
	5,  // 6: oj.contest.ContestServer.QueryMyContestList:input_type -> oj.contest.QueryContestListReq
	4,  // 7: oj.contest.ContestServer.UpdateContestStatus:input_type -> oj.contest.UpdateContestStatusReq
	2,  // 8: oj.contest.ContestServer.AddContest:input_type -> oj.contest.AddContestReq
	3,  // 9: oj.contest.ContestServer.UpdateContest:input_type -> oj.contest.UpdateContestReq
	0,  // 10: oj.contest.ContestServer.QueryContestPrivilegeInfo:input_type -> oj.contest.QueryContestPrivilegeInfoReq
	8,  // 11: oj.contest.ContestServer.QueryContest:output_type -> oj.contest.QueryContestRsp
	6,  // 12: oj.contest.ContestServer.QueryContestList:output_type -> oj.contest.QueryContestListRsp
	6,  // 13: oj.contest.ContestServer.QueryMyContestList:output_type -> oj.contest.QueryContestListRsp
	11, // 14: oj.contest.ContestServer.UpdateContestStatus:output_type -> oj.contest.CommonRsp
	11, // 15: oj.contest.ContestServer.AddContest:output_type -> oj.contest.CommonRsp
	11, // 16: oj.contest.ContestServer.UpdateContest:output_type -> oj.contest.CommonRsp
	1,  // 17: oj.contest.ContestServer.QueryContestPrivilegeInfo:output_type -> oj.contest.QueryContestPrivilegeInfoRsp
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_contest_proto_init() }
func file_contest_proto_init() {
	if File_contest_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_contest_proto_goTypes,
		DependencyIndexes: file_contest_proto_depIdxs,
		MessageInfos:      file_contest_proto_msgTypes,
	}.Build()
	File_contest_proto = out.File
	file_contest_proto_rawDesc = nil
	file_contest_proto_goTypes = nil
	file_contest_proto_depIdxs = nil
}
