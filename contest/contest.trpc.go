// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: contest.proto

package contest

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// ContestServerService defines service.
type ContestServerService interface {
	// QueryContest QueryContest 查询作业
	QueryContest(ctx context.Context, req *QueryContestReq) (*QueryContestRsp, error)
	// QueryContestList QueryContestList 查询作业列表
	QueryContestList(ctx context.Context, req *QueryContestListReq) (*QueryContestListRsp, error)
	// QueryMyContestList QueryMyContestList 查询我的作业列表
	QueryMyContestList(ctx context.Context, req *QueryContestListReq) (*QueryContestListRsp, error)
	// UpdateContestStatus UpdateContestStatus 更新作业状态
	UpdateContestStatus(ctx context.Context, req *UpdateContestStatusReq) (*CommonRsp, error)
	// AddContest AddContest 添加作业
	AddContest(ctx context.Context, req *AddContestReq) (*CommonRsp, error)
	// UpdateContest UpdateContest 更新作业
	UpdateContest(ctx context.Context, req *UpdateContestReq) (*CommonRsp, error)
	// QueryContestPrivilegeInfo QueryContestPrivilegeInfo 查询作业的权限信息
	QueryContestPrivilegeInfo(ctx context.Context, req *QueryContestPrivilegeInfoReq) (*QueryContestPrivilegeInfoRsp, error)
}

func ContestServerService_QueryContest_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryContestReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ContestServerService).QueryContest(ctx, reqbody.(*QueryContestReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ContestServerService_QueryContestList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryContestListReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ContestServerService).QueryContestList(ctx, reqbody.(*QueryContestListReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ContestServerService_QueryMyContestList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryContestListReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ContestServerService).QueryMyContestList(ctx, reqbody.(*QueryContestListReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ContestServerService_UpdateContestStatus_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateContestStatusReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ContestServerService).UpdateContestStatus(ctx, reqbody.(*UpdateContestStatusReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ContestServerService_AddContest_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddContestReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ContestServerService).AddContest(ctx, reqbody.(*AddContestReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ContestServerService_UpdateContest_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateContestReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ContestServerService).UpdateContest(ctx, reqbody.(*UpdateContestReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ContestServerService_QueryContestPrivilegeInfo_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryContestPrivilegeInfoReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ContestServerService).QueryContestPrivilegeInfo(ctx, reqbody.(*QueryContestPrivilegeInfoReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// ContestServerServer_ServiceDesc descriptor for server.RegisterService.
var ContestServerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "oj.contest.ContestServer",
	HandlerType: ((*ContestServerService)(nil)),
	Methods: []server.Method{
		{
			Name: "/oj.contest.ContestServer/QueryContest",
			Func: ContestServerService_QueryContest_Handler,
		},
		{
			Name: "/oj.contest.ContestServer/QueryContestList",
			Func: ContestServerService_QueryContestList_Handler,
		},
		{
			Name: "/oj.contest.ContestServer/QueryMyContestList",
			Func: ContestServerService_QueryMyContestList_Handler,
		},
		{
			Name: "/oj.contest.ContestServer/UpdateContestStatus",
			Func: ContestServerService_UpdateContestStatus_Handler,
		},
		{
			Name: "/oj.contest.ContestServer/AddContest",
			Func: ContestServerService_AddContest_Handler,
		},
		{
			Name: "/oj.contest.ContestServer/UpdateContest",
			Func: ContestServerService_UpdateContest_Handler,
		},
		{
			Name: "/oj.contest.ContestServer/QueryContestPrivilegeInfo",
			Func: ContestServerService_QueryContestPrivilegeInfo_Handler,
		},
	},
}

// RegisterContestServerService registers service.
func RegisterContestServerService(s server.Service, svr ContestServerService) {
	if err := s.Register(&ContestServerServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("ContestServer register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedContestServer struct{}

// QueryContest QueryContest 查询作业
func (s *UnimplementedContestServer) QueryContest(ctx context.Context, req *QueryContestReq) (*QueryContestRsp, error) {
	return nil, errors.New("rpc QueryContest of service ContestServer is not implemented")
}

// QueryContestList QueryContestList 查询作业列表
func (s *UnimplementedContestServer) QueryContestList(ctx context.Context, req *QueryContestListReq) (*QueryContestListRsp, error) {
	return nil, errors.New("rpc QueryContestList of service ContestServer is not implemented")
}

// QueryMyContestList QueryMyContestList 查询我的作业列表
func (s *UnimplementedContestServer) QueryMyContestList(ctx context.Context, req *QueryContestListReq) (*QueryContestListRsp, error) {
	return nil, errors.New("rpc QueryMyContestList of service ContestServer is not implemented")
}

// UpdateContestStatus UpdateContestStatus 更新作业状态
func (s *UnimplementedContestServer) UpdateContestStatus(ctx context.Context, req *UpdateContestStatusReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateContestStatus of service ContestServer is not implemented")
}

// AddContest AddContest 添加作业
func (s *UnimplementedContestServer) AddContest(ctx context.Context, req *AddContestReq) (*CommonRsp, error) {
	return nil, errors.New("rpc AddContest of service ContestServer is not implemented")
}

// UpdateContest UpdateContest 更新作业
func (s *UnimplementedContestServer) UpdateContest(ctx context.Context, req *UpdateContestReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateContest of service ContestServer is not implemented")
}

// QueryContestPrivilegeInfo QueryContestPrivilegeInfo 查询作业的权限信息
func (s *UnimplementedContestServer) QueryContestPrivilegeInfo(ctx context.Context, req *QueryContestPrivilegeInfoReq) (*QueryContestPrivilegeInfoRsp, error) {
	return nil, errors.New("rpc QueryContestPrivilegeInfo of service ContestServer is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// ContestServerClientProxy defines service client proxy
type ContestServerClientProxy interface {
	// QueryContest QueryContest 查询作业
	QueryContest(ctx context.Context, req *QueryContestReq, opts ...client.Option) (rsp *QueryContestRsp, err error)
	// QueryContestList QueryContestList 查询作业列表
	QueryContestList(ctx context.Context, req *QueryContestListReq, opts ...client.Option) (rsp *QueryContestListRsp, err error)
	// QueryMyContestList QueryMyContestList 查询我的作业列表
	QueryMyContestList(ctx context.Context, req *QueryContestListReq, opts ...client.Option) (rsp *QueryContestListRsp, err error)
	// UpdateContestStatus UpdateContestStatus 更新作业状态
	UpdateContestStatus(ctx context.Context, req *UpdateContestStatusReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// AddContest AddContest 添加作业
	AddContest(ctx context.Context, req *AddContestReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateContest UpdateContest 更新作业
	UpdateContest(ctx context.Context, req *UpdateContestReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QueryContestPrivilegeInfo QueryContestPrivilegeInfo 查询作业的权限信息
	QueryContestPrivilegeInfo(ctx context.Context, req *QueryContestPrivilegeInfoReq, opts ...client.Option) (rsp *QueryContestPrivilegeInfoRsp, err error)
}

type ContestServerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewContestServerClientProxy = func(opts ...client.Option) ContestServerClientProxy {
	return &ContestServerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *ContestServerClientProxyImpl) QueryContest(ctx context.Context, req *QueryContestReq, opts ...client.Option) (*QueryContestRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.contest.ContestServer/QueryContest")
	msg.WithCalleeServiceName(ContestServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ContestServer")
	msg.WithCalleeMethod("QueryContest")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryContestRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ContestServerClientProxyImpl) QueryContestList(ctx context.Context, req *QueryContestListReq, opts ...client.Option) (*QueryContestListRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.contest.ContestServer/QueryContestList")
	msg.WithCalleeServiceName(ContestServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ContestServer")
	msg.WithCalleeMethod("QueryContestList")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryContestListRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ContestServerClientProxyImpl) QueryMyContestList(ctx context.Context, req *QueryContestListReq, opts ...client.Option) (*QueryContestListRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.contest.ContestServer/QueryMyContestList")
	msg.WithCalleeServiceName(ContestServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ContestServer")
	msg.WithCalleeMethod("QueryMyContestList")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryContestListRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ContestServerClientProxyImpl) UpdateContestStatus(ctx context.Context, req *UpdateContestStatusReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.contest.ContestServer/UpdateContestStatus")
	msg.WithCalleeServiceName(ContestServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ContestServer")
	msg.WithCalleeMethod("UpdateContestStatus")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ContestServerClientProxyImpl) AddContest(ctx context.Context, req *AddContestReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.contest.ContestServer/AddContest")
	msg.WithCalleeServiceName(ContestServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ContestServer")
	msg.WithCalleeMethod("AddContest")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ContestServerClientProxyImpl) UpdateContest(ctx context.Context, req *UpdateContestReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.contest.ContestServer/UpdateContest")
	msg.WithCalleeServiceName(ContestServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ContestServer")
	msg.WithCalleeMethod("UpdateContest")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ContestServerClientProxyImpl) QueryContestPrivilegeInfo(ctx context.Context, req *QueryContestPrivilegeInfoReq, opts ...client.Option) (*QueryContestPrivilegeInfoRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.contest.ContestServer/QueryContestPrivilegeInfo")
	msg.WithCalleeServiceName(ContestServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ContestServer")
	msg.WithCalleeMethod("QueryContestPrivilegeInfo")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryContestPrivilegeInfoRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
