// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/csuJudge/judgeProto/contest/contest.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/csuJudge/judgeProto/contest/contest_mock.go -package=contest -self_package=github.com/csuJudge/judgeProto/contest --source=stub/github.com/csuJudge/judgeProto/contest/contest.trpc.go
//

// Package contest is a generated GoMock package.
package contest

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockContestServerService is a mock of ContestServerService interface.
type MockContestServerService struct {
	ctrl     *gomock.Controller
	recorder *MockContestServerServiceMockRecorder
}

// MockContestServerServiceMockRecorder is the mock recorder for MockContestServerService.
type MockContestServerServiceMockRecorder struct {
	mock *MockContestServerService
}

// NewMockContestServerService creates a new mock instance.
func NewMockContestServerService(ctrl *gomock.Controller) *MockContestServerService {
	mock := &MockContestServerService{ctrl: ctrl}
	mock.recorder = &MockContestServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContestServerService) EXPECT() *MockContestServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockContestServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddContest mocks base method.
func (m *MockContestServerService) AddContest(ctx context.Context, req *AddContestReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContest", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContest indicates an expected call of AddContest.
func (mr *MockContestServerServiceMockRecorder) AddContest(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContest", reflect.TypeOf((*MockContestServerService)(nil).AddContest), ctx, req)
}

// QueryContest mocks base method.
func (m *MockContestServerService) QueryContest(ctx context.Context, req *QueryContestReq) (*QueryContestRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContest", ctx, req)
	ret0, _ := ret[0].(*QueryContestRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContest indicates an expected call of QueryContest.
func (mr *MockContestServerServiceMockRecorder) QueryContest(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContest", reflect.TypeOf((*MockContestServerService)(nil).QueryContest), ctx, req)
}

// QueryContestList mocks base method.
func (m *MockContestServerService) QueryContestList(ctx context.Context, req *QueryContestListReq) (*QueryContestListRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContestList", ctx, req)
	ret0, _ := ret[0].(*QueryContestListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContestList indicates an expected call of QueryContestList.
func (mr *MockContestServerServiceMockRecorder) QueryContestList(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContestList", reflect.TypeOf((*MockContestServerService)(nil).QueryContestList), ctx, req)
}

// QueryContestPrivilegeInfo mocks base method.
func (m *MockContestServerService) QueryContestPrivilegeInfo(ctx context.Context, req *QueryContestPrivilegeInfoReq) (*QueryContestPrivilegeInfoRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContestPrivilegeInfo", ctx, req)
	ret0, _ := ret[0].(*QueryContestPrivilegeInfoRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContestPrivilegeInfo indicates an expected call of QueryContestPrivilegeInfo.
func (mr *MockContestServerServiceMockRecorder) QueryContestPrivilegeInfo(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContestPrivilegeInfo", reflect.TypeOf((*MockContestServerService)(nil).QueryContestPrivilegeInfo), ctx, req)
}

// QueryMyContestList mocks base method.
func (m *MockContestServerService) QueryMyContestList(ctx context.Context, req *QueryContestListReq) (*QueryContestListRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMyContestList", ctx, req)
	ret0, _ := ret[0].(*QueryContestListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMyContestList indicates an expected call of QueryMyContestList.
func (mr *MockContestServerServiceMockRecorder) QueryMyContestList(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMyContestList", reflect.TypeOf((*MockContestServerService)(nil).QueryMyContestList), ctx, req)
}

// UpdateContest mocks base method.
func (m *MockContestServerService) UpdateContest(ctx context.Context, req *UpdateContestReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContest", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContest indicates an expected call of UpdateContest.
func (mr *MockContestServerServiceMockRecorder) UpdateContest(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContest", reflect.TypeOf((*MockContestServerService)(nil).UpdateContest), ctx, req)
}

// UpdateContestStatus mocks base method.
func (m *MockContestServerService) UpdateContestStatus(ctx context.Context, req *UpdateContestStatusReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContestStatus", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContestStatus indicates an expected call of UpdateContestStatus.
func (mr *MockContestServerServiceMockRecorder) UpdateContestStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContestStatus", reflect.TypeOf((*MockContestServerService)(nil).UpdateContestStatus), ctx, req)
}

// MockContestServerClientProxy is a mock of ContestServerClientProxy interface.
type MockContestServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockContestServerClientProxyMockRecorder
}

// MockContestServerClientProxyMockRecorder is the mock recorder for MockContestServerClientProxy.
type MockContestServerClientProxyMockRecorder struct {
	mock *MockContestServerClientProxy
}

// NewMockContestServerClientProxy creates a new mock instance.
func NewMockContestServerClientProxy(ctrl *gomock.Controller) *MockContestServerClientProxy {
	mock := &MockContestServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockContestServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContestServerClientProxy) EXPECT() *MockContestServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockContestServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddContest mocks base method.
func (m *MockContestServerClientProxy) AddContest(ctx context.Context, req *AddContestReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddContest", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContest indicates an expected call of AddContest.
func (mr *MockContestServerClientProxyMockRecorder) AddContest(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContest", reflect.TypeOf((*MockContestServerClientProxy)(nil).AddContest), varargs...)
}

// QueryContest mocks base method.
func (m *MockContestServerClientProxy) QueryContest(ctx context.Context, req *QueryContestReq, opts ...client.Option) (*QueryContestRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContest", varargs...)
	ret0, _ := ret[0].(*QueryContestRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContest indicates an expected call of QueryContest.
func (mr *MockContestServerClientProxyMockRecorder) QueryContest(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContest", reflect.TypeOf((*MockContestServerClientProxy)(nil).QueryContest), varargs...)
}

// QueryContestList mocks base method.
func (m *MockContestServerClientProxy) QueryContestList(ctx context.Context, req *QueryContestListReq, opts ...client.Option) (*QueryContestListRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContestList", varargs...)
	ret0, _ := ret[0].(*QueryContestListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContestList indicates an expected call of QueryContestList.
func (mr *MockContestServerClientProxyMockRecorder) QueryContestList(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContestList", reflect.TypeOf((*MockContestServerClientProxy)(nil).QueryContestList), varargs...)
}

// QueryContestPrivilegeInfo mocks base method.
func (m *MockContestServerClientProxy) QueryContestPrivilegeInfo(ctx context.Context, req *QueryContestPrivilegeInfoReq, opts ...client.Option) (*QueryContestPrivilegeInfoRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContestPrivilegeInfo", varargs...)
	ret0, _ := ret[0].(*QueryContestPrivilegeInfoRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContestPrivilegeInfo indicates an expected call of QueryContestPrivilegeInfo.
func (mr *MockContestServerClientProxyMockRecorder) QueryContestPrivilegeInfo(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContestPrivilegeInfo", reflect.TypeOf((*MockContestServerClientProxy)(nil).QueryContestPrivilegeInfo), varargs...)
}

// QueryMyContestList mocks base method.
func (m *MockContestServerClientProxy) QueryMyContestList(ctx context.Context, req *QueryContestListReq, opts ...client.Option) (*QueryContestListRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMyContestList", varargs...)
	ret0, _ := ret[0].(*QueryContestListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMyContestList indicates an expected call of QueryMyContestList.
func (mr *MockContestServerClientProxyMockRecorder) QueryMyContestList(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMyContestList", reflect.TypeOf((*MockContestServerClientProxy)(nil).QueryMyContestList), varargs...)
}

// UpdateContest mocks base method.
func (m *MockContestServerClientProxy) UpdateContest(ctx context.Context, req *UpdateContestReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContest", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContest indicates an expected call of UpdateContest.
func (mr *MockContestServerClientProxyMockRecorder) UpdateContest(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContest", reflect.TypeOf((*MockContestServerClientProxy)(nil).UpdateContest), varargs...)
}

// UpdateContestStatus mocks base method.
func (m *MockContestServerClientProxy) UpdateContestStatus(ctx context.Context, req *UpdateContestStatusReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContestStatus", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContestStatus indicates an expected call of UpdateContestStatus.
func (mr *MockContestServerClientProxyMockRecorder) UpdateContestStatus(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContestStatus", reflect.TypeOf((*MockContestServerClientProxy)(nil).UpdateContestStatus), varargs...)
}
