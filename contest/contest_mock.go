// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/csuJudge/judgeProto/contest/contest.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/csuJudge/judgeProto/contest/contest_mock.go -package=contest -self_package=github.com/csuJudge/judgeProto/contest --source=stub/github.com/csuJudge/judgeProto/contest/contest.trpc.go
//

// Package contest is a generated GoMock package.
package contest

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockNewsServerService is a mock of NewsServerService interface.
type MockNewsServerService struct {
	ctrl     *gomock.Controller
	recorder *MockNewsServerServiceMockRecorder
}

// MockNewsServerServiceMockRecorder is the mock recorder for MockNewsServerService.
type MockNewsServerServiceMockRecorder struct {
	mock *MockNewsServerService
}

// NewMockNewsServerService creates a new mock instance.
func NewMockNewsServerService(ctrl *gomock.Controller) *MockNewsServerService {
	mock := &MockNewsServerService{ctrl: ctrl}
	mock.recorder = &MockNewsServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsServerService) EXPECT() *MockNewsServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNewsServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// QueryContest mocks base method.
func (m *MockNewsServerService) QueryContest(ctx context.Context, req *QueryContestReq) (*QueryContestRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContest", ctx, req)
	ret0, _ := ret[0].(*QueryContestRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContest indicates an expected call of QueryContest.
func (mr *MockNewsServerServiceMockRecorder) QueryContest(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContest", reflect.TypeOf((*MockNewsServerService)(nil).QueryContest), ctx, req)
}

// QueryContestList mocks base method.
func (m *MockNewsServerService) QueryContestList(ctx context.Context, req *QueryContestListReq) (*QueryContestListRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContestList", ctx, req)
	ret0, _ := ret[0].(*QueryContestListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContestList indicates an expected call of QueryContestList.
func (mr *MockNewsServerServiceMockRecorder) QueryContestList(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContestList", reflect.TypeOf((*MockNewsServerService)(nil).QueryContestList), ctx, req)
}

// UpdateContestStatus mocks base method.
func (m *MockNewsServerService) UpdateContestStatus(ctx context.Context, req *UpdateContestStatusReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContestStatus", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContestStatus indicates an expected call of UpdateContestStatus.
func (mr *MockNewsServerServiceMockRecorder) UpdateContestStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContestStatus", reflect.TypeOf((*MockNewsServerService)(nil).UpdateContestStatus), ctx, req)
}

// MockNewsServerClientProxy is a mock of NewsServerClientProxy interface.
type MockNewsServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockNewsServerClientProxyMockRecorder
}

// MockNewsServerClientProxyMockRecorder is the mock recorder for MockNewsServerClientProxy.
type MockNewsServerClientProxyMockRecorder struct {
	mock *MockNewsServerClientProxy
}

// NewMockNewsServerClientProxy creates a new mock instance.
func NewMockNewsServerClientProxy(ctrl *gomock.Controller) *MockNewsServerClientProxy {
	mock := &MockNewsServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockNewsServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsServerClientProxy) EXPECT() *MockNewsServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNewsServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// QueryContest mocks base method.
func (m *MockNewsServerClientProxy) QueryContest(ctx context.Context, req *QueryContestReq, opts ...client.Option) (*QueryContestRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContest", varargs...)
	ret0, _ := ret[0].(*QueryContestRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContest indicates an expected call of QueryContest.
func (mr *MockNewsServerClientProxyMockRecorder) QueryContest(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContest", reflect.TypeOf((*MockNewsServerClientProxy)(nil).QueryContest), varargs...)
}

// QueryContestList mocks base method.
func (m *MockNewsServerClientProxy) QueryContestList(ctx context.Context, req *QueryContestListReq, opts ...client.Option) (*QueryContestListRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContestList", varargs...)
	ret0, _ := ret[0].(*QueryContestListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContestList indicates an expected call of QueryContestList.
func (mr *MockNewsServerClientProxyMockRecorder) QueryContestList(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContestList", reflect.TypeOf((*MockNewsServerClientProxy)(nil).QueryContestList), varargs...)
}

// UpdateContestStatus mocks base method.
func (m *MockNewsServerClientProxy) UpdateContestStatus(ctx context.Context, req *UpdateContestStatusReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContestStatus", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContestStatus indicates an expected call of UpdateContestStatus.
func (mr *MockNewsServerClientProxyMockRecorder) UpdateContestStatus(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContestStatus", reflect.TypeOf((*MockNewsServerClientProxy)(nil).UpdateContestStatus), varargs...)
}
