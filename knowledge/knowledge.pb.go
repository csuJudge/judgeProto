// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.19.1
// source: knowledge.proto

package knowledge

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateCourseKnowledgeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CourseID      int32                  `protobuf:"varint,1,opt,name=courseID,proto3" json:"courseID,omitempty"`        // 课程编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`            // 用户编号
	KnowledgeIDs  string                 `protobuf:"bytes,3,opt,name=knowledgeIDs,proto3" json:"knowledgeIDs,omitempty"` // 知识点编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCourseKnowledgeReq) Reset() {
	*x = UpdateCourseKnowledgeReq{}
	mi := &file_knowledge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCourseKnowledgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCourseKnowledgeReq) ProtoMessage() {}

func (x *UpdateCourseKnowledgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCourseKnowledgeReq.ProtoReflect.Descriptor instead.
func (*UpdateCourseKnowledgeReq) Descriptor() ([]byte, []int) {
	return file_knowledge_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateCourseKnowledgeReq) GetCourseID() int32 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

func (x *UpdateCourseKnowledgeReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateCourseKnowledgeReq) GetKnowledgeIDs() string {
	if x != nil {
		return x.KnowledgeIDs
	}
	return ""
}

type QueryCourseKnowledgeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CourseID      int32                  `protobuf:"varint,1,opt,name=courseID,proto3" json:"courseID,omitempty"` // 课程编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`     // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryCourseKnowledgeReq) Reset() {
	*x = QueryCourseKnowledgeReq{}
	mi := &file_knowledge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCourseKnowledgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCourseKnowledgeReq) ProtoMessage() {}

func (x *QueryCourseKnowledgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCourseKnowledgeReq.ProtoReflect.Descriptor instead.
func (*QueryCourseKnowledgeReq) Descriptor() ([]byte, []int) {
	return file_knowledge_proto_rawDescGZIP(), []int{1}
}

func (x *QueryCourseKnowledgeReq) GetCourseID() int32 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

func (x *QueryCourseKnowledgeReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type UserIDReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserIDReq) Reset() {
	*x = UserIDReq{}
	mi := &file_knowledge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIDReq) ProtoMessage() {}

func (x *UserIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIDReq.ProtoReflect.Descriptor instead.
func (*UserIDReq) Descriptor() ([]byte, []int) {
	return file_knowledge_proto_rawDescGZIP(), []int{2}
}

func (x *UserIDReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type UpdateKnowledgeWeightReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`           // 用户主键
	KnowledgeID   int32                  `protobuf:"varint,2,opt,name=knowledgeID,proto3" json:"knowledgeID,omitempty"` // 知识点主键
	MoveType      int32                  `protobuf:"varint,3,opt,name=moveType,proto3" json:"moveType,omitempty"`       // 类型
	Weight        int32                  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`           // 权重
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateKnowledgeWeightReq) Reset() {
	*x = UpdateKnowledgeWeightReq{}
	mi := &file_knowledge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeWeightReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeWeightReq) ProtoMessage() {}

func (x *UpdateKnowledgeWeightReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeWeightReq.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeWeightReq) Descriptor() ([]byte, []int) {
	return file_knowledge_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateKnowledgeWeightReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateKnowledgeWeightReq) GetKnowledgeID() int32 {
	if x != nil {
		return x.KnowledgeID
	}
	return 0
}

func (x *UpdateKnowledgeWeightReq) GetMoveType() int32 {
	if x != nil {
		return x.MoveType
	}
	return 0
}

func (x *UpdateKnowledgeWeightReq) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type UpdateKnowledgeStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`           // 用户主键
	KnowledgeID   int32                  `protobuf:"varint,2,opt,name=knowledgeID,proto3" json:"knowledgeID,omitempty"` // 知识点主键
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`           // 状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateKnowledgeStatusReq) Reset() {
	*x = UpdateKnowledgeStatusReq{}
	mi := &file_knowledge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeStatusReq) ProtoMessage() {}

func (x *UpdateKnowledgeStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeStatusReq) Descriptor() ([]byte, []int) {
	return file_knowledge_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateKnowledgeStatusReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateKnowledgeStatusReq) GetKnowledgeID() int32 {
	if x != nil {
		return x.KnowledgeID
	}
	return 0
}

func (x *UpdateKnowledgeStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UpdateKnowledgeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeID   int32                  `protobuf:"varint,1,opt,name=knowledgeID,proto3" json:"knowledgeID,omitempty"` // 知识点主键
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                // 知识点名称
	UserID        int32                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`           // 用户主键
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateKnowledgeReq) Reset() {
	*x = UpdateKnowledgeReq{}
	mi := &file_knowledge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeReq) ProtoMessage() {}

func (x *UpdateKnowledgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeReq.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeReq) Descriptor() ([]byte, []int) {
	return file_knowledge_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateKnowledgeReq) GetKnowledgeID() int32 {
	if x != nil {
		return x.KnowledgeID
	}
	return 0
}

func (x *UpdateKnowledgeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateKnowledgeReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryKnowledgePageSizeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`     // 页
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`   // 页大小
	UserID        int32                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"` // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryKnowledgePageSizeReq) Reset() {
	*x = QueryKnowledgePageSizeReq{}
	mi := &file_knowledge_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryKnowledgePageSizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKnowledgePageSizeReq) ProtoMessage() {}

func (x *QueryKnowledgePageSizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKnowledgePageSizeReq.ProtoReflect.Descriptor instead.
func (*QueryKnowledgePageSizeReq) Descriptor() ([]byte, []int) {
	return file_knowledge_proto_rawDescGZIP(), []int{6}
}

func (x *QueryKnowledgePageSizeReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryKnowledgePageSizeReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryKnowledgePageSizeReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryKnowledgeRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`     // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`          // 返回码
	Knowledge     []*Knowledge           `protobuf:"bytes,3,rep,name=knowledge,proto3" json:"knowledge,omitempty"` // 知识点
	Total         int32                  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`        // 总数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryKnowledgeRsp) Reset() {
	*x = QueryKnowledgeRsp{}
	mi := &file_knowledge_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryKnowledgeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKnowledgeRsp) ProtoMessage() {}

func (x *QueryKnowledgeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKnowledgeRsp.ProtoReflect.Descriptor instead.
func (*QueryKnowledgeRsp) Descriptor() ([]byte, []int) {
	return file_knowledge_proto_rawDescGZIP(), []int{7}
}

func (x *QueryKnowledgeRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryKnowledgeRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryKnowledgeRsp) GetKnowledge() []*Knowledge {
	if x != nil {
		return x.Knowledge
	}
	return nil
}

func (x *QueryKnowledgeRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AddKnowledgeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`      // 知识点名称
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"` // 用户主键
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddKnowledgeReq) Reset() {
	*x = AddKnowledgeReq{}
	mi := &file_knowledge_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddKnowledgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKnowledgeReq) ProtoMessage() {}

func (x *AddKnowledgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKnowledgeReq.ProtoReflect.Descriptor instead.
func (*AddKnowledgeReq) Descriptor() ([]byte, []int) {
	return file_knowledge_proto_rawDescGZIP(), []int{8}
}

func (x *AddKnowledgeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddKnowledgeReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type CommonRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonRsp) Reset() {
	*x = CommonRsp{}
	mi := &file_knowledge_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRsp) ProtoMessage() {}

func (x *CommonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRsp.ProtoReflect.Descriptor instead.
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return file_knowledge_proto_rawDescGZIP(), []int{9}
}

func (x *CommonRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type QueryProblemKnowledgeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"` // 问题编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemKnowledgeReq) Reset() {
	*x = QueryProblemKnowledgeReq{}
	mi := &file_knowledge_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemKnowledgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemKnowledgeReq) ProtoMessage() {}

func (x *QueryProblemKnowledgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemKnowledgeReq.ProtoReflect.Descriptor instead.
func (*QueryProblemKnowledgeReq) Descriptor() ([]byte, []int) {
	return file_knowledge_proto_rawDescGZIP(), []int{10}
}

func (x *QueryProblemKnowledgeReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *QueryProblemKnowledgeReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryProblemKnowledgeRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`       // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`            // 返回码
	Knowledges    []*Knowledge           `protobuf:"bytes,3,rep,name=knowledges,proto3" json:"knowledges,omitempty"` // 知识点的字符串集合
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemKnowledgeRsp) Reset() {
	*x = QueryProblemKnowledgeRsp{}
	mi := &file_knowledge_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemKnowledgeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemKnowledgeRsp) ProtoMessage() {}

func (x *QueryProblemKnowledgeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemKnowledgeRsp.ProtoReflect.Descriptor instead.
func (*QueryProblemKnowledgeRsp) Descriptor() ([]byte, []int) {
	return file_knowledge_proto_rawDescGZIP(), []int{11}
}

func (x *QueryProblemKnowledgeRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryProblemKnowledgeRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryProblemKnowledgeRsp) GetKnowledges() []*Knowledge {
	if x != nil {
		return x.Knowledges
	}
	return nil
}

type Knowledge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                // 知识点主键
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`             // 知识点名称
	Creator       string                 `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`       // 创建者
	CreateTime    string                 `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"` // 创建时间
	Enable        int32                  `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`        // 状态
	Weight        int32                  `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`        // 权重
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Knowledge) Reset() {
	*x = Knowledge{}
	mi := &file_knowledge_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Knowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Knowledge) ProtoMessage() {}

func (x *Knowledge) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Knowledge.ProtoReflect.Descriptor instead.
func (*Knowledge) Descriptor() ([]byte, []int) {
	return file_knowledge_proto_rawDescGZIP(), []int{12}
}

func (x *Knowledge) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Knowledge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Knowledge) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Knowledge) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Knowledge) GetEnable() int32 {
	if x != nil {
		return x.Enable
	}
	return 0
}

func (x *Knowledge) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

var File_knowledge_proto protoreflect.FileDescriptor

var file_knowledge_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x22,
	0x72, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x44, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x49, 0x44, 0x73, 0x22, 0x4d, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x23, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x6c, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x62, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x5d, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x6a, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x52, 0x09, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3d, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x50,
	0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x81, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x0a, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x09, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x32, 0xc0, 0x06, 0x0a, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x12, 0x1d, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x15,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x6f, 0x6a, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6f,
	0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x2e, 0x6f,
	0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x25, 0x2e,
	0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x12, 0x26, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6f, 0x6a, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x73, 0x75, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_knowledge_proto_rawDescOnce sync.Once
	file_knowledge_proto_rawDescData = file_knowledge_proto_rawDesc
)

func file_knowledge_proto_rawDescGZIP() []byte {
	file_knowledge_proto_rawDescOnce.Do(func() {
		file_knowledge_proto_rawDescData = protoimpl.X.CompressGZIP(file_knowledge_proto_rawDescData)
	})
	return file_knowledge_proto_rawDescData
}

var file_knowledge_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_knowledge_proto_goTypes = []any{
	(*UpdateCourseKnowledgeReq)(nil),  // 0: oj.knowledge.UpdateCourseKnowledgeReq
	(*QueryCourseKnowledgeReq)(nil),   // 1: oj.knowledge.QueryCourseKnowledgeReq
	(*UserIDReq)(nil),                 // 2: oj.knowledge.UserIDReq
	(*UpdateKnowledgeWeightReq)(nil),  // 3: oj.knowledge.UpdateKnowledgeWeightReq
	(*UpdateKnowledgeStatusReq)(nil),  // 4: oj.knowledge.UpdateKnowledgeStatusReq
	(*UpdateKnowledgeReq)(nil),        // 5: oj.knowledge.UpdateKnowledgeReq
	(*QueryKnowledgePageSizeReq)(nil), // 6: oj.knowledge.QueryKnowledgePageSizeReq
	(*QueryKnowledgeRsp)(nil),         // 7: oj.knowledge.QueryKnowledgeRsp
	(*AddKnowledgeReq)(nil),           // 8: oj.knowledge.AddKnowledgeReq
	(*CommonRsp)(nil),                 // 9: oj.knowledge.CommonRsp
	(*QueryProblemKnowledgeReq)(nil),  // 10: oj.knowledge.QueryProblemKnowledgeReq
	(*QueryProblemKnowledgeRsp)(nil),  // 11: oj.knowledge.QueryProblemKnowledgeRsp
	(*Knowledge)(nil),                 // 12: oj.knowledge.Knowledge
}
var file_knowledge_proto_depIdxs = []int32{
	12, // 0: oj.knowledge.QueryKnowledgeRsp.knowledge:type_name -> oj.knowledge.Knowledge
	12, // 1: oj.knowledge.QueryProblemKnowledgeRsp.knowledges:type_name -> oj.knowledge.Knowledge
	2,  // 2: oj.knowledge.KnowledgeServer.QueryKnowledge:input_type -> oj.knowledge.UserIDReq
	8,  // 3: oj.knowledge.KnowledgeServer.AddKnowledge:input_type -> oj.knowledge.AddKnowledgeReq
	10, // 4: oj.knowledge.KnowledgeServer.QueryProblemKnowledge:input_type -> oj.knowledge.QueryProblemKnowledgeReq
	5,  // 5: oj.knowledge.KnowledgeServer.UpdateKnowledge:input_type -> oj.knowledge.UpdateKnowledgeReq
	4,  // 6: oj.knowledge.KnowledgeServer.UpdateKnowledgeStatus:input_type -> oj.knowledge.UpdateKnowledgeStatusReq
	3,  // 7: oj.knowledge.KnowledgeServer.UpdateKnowledgeWeight:input_type -> oj.knowledge.UpdateKnowledgeWeightReq
	6,  // 8: oj.knowledge.KnowledgeServer.QueryKnowledgePageSize:input_type -> oj.knowledge.QueryKnowledgePageSizeReq
	1,  // 9: oj.knowledge.KnowledgeServer.QueryCourseKnowledge:input_type -> oj.knowledge.QueryCourseKnowledgeReq
	0,  // 10: oj.knowledge.KnowledgeServer.UpdateCourseKnowledge:input_type -> oj.knowledge.UpdateCourseKnowledgeReq
	7,  // 11: oj.knowledge.KnowledgeServer.QueryKnowledge:output_type -> oj.knowledge.QueryKnowledgeRsp
	9,  // 12: oj.knowledge.KnowledgeServer.AddKnowledge:output_type -> oj.knowledge.CommonRsp
	11, // 13: oj.knowledge.KnowledgeServer.QueryProblemKnowledge:output_type -> oj.knowledge.QueryProblemKnowledgeRsp
	9,  // 14: oj.knowledge.KnowledgeServer.UpdateKnowledge:output_type -> oj.knowledge.CommonRsp
	9,  // 15: oj.knowledge.KnowledgeServer.UpdateKnowledgeStatus:output_type -> oj.knowledge.CommonRsp
	9,  // 16: oj.knowledge.KnowledgeServer.UpdateKnowledgeWeight:output_type -> oj.knowledge.CommonRsp
	7,  // 17: oj.knowledge.KnowledgeServer.QueryKnowledgePageSize:output_type -> oj.knowledge.QueryKnowledgeRsp
	7,  // 18: oj.knowledge.KnowledgeServer.QueryCourseKnowledge:output_type -> oj.knowledge.QueryKnowledgeRsp
	9,  // 19: oj.knowledge.KnowledgeServer.UpdateCourseKnowledge:output_type -> oj.knowledge.CommonRsp
	11, // [11:20] is the sub-list for method output_type
	2,  // [2:11] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_knowledge_proto_init() }
func file_knowledge_proto_init() {
	if File_knowledge_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_knowledge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_knowledge_proto_goTypes,
		DependencyIndexes: file_knowledge_proto_depIdxs,
		MessageInfos:      file_knowledge_proto_msgTypes,
	}.Build()
	File_knowledge_proto = out.File
	file_knowledge_proto_rawDesc = nil
	file_knowledge_proto_goTypes = nil
	file_knowledge_proto_depIdxs = nil
}
