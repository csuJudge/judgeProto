// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: knowledge.proto

package knowledge

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// KnowledgeServerService defines service.
type KnowledgeServerService interface {
	// QueryKnowledge QueryKnowledge 查询知识点
	QueryKnowledge(ctx context.Context, req *UserIDReq) (*QueryKnowledgeRsp, error)
	// AddKnowledge AddKnowledge 添加知识点
	AddKnowledge(ctx context.Context, req *AddKnowledgeReq) (*CommonRsp, error)
	// QueryProblemKnowledge QueryProblemKnowledge 查询题目的知识点
	QueryProblemKnowledge(ctx context.Context, req *QueryProblemKnowledgeReq) (*QueryProblemKnowledgeRsp, error)
	// UpdateKnowledge UpdateKnowledge 更新知识点
	UpdateKnowledge(ctx context.Context, req *UpdateKnowledgeReq) (*CommonRsp, error)
	// UpdateKnowledgeStatus UpdateKnowledgeStatus 更新知识点状态
	UpdateKnowledgeStatus(ctx context.Context, req *UpdateKnowledgeStatusReq) (*CommonRsp, error)
	// UpdateKnowledgeWeight UpdateKnowledgeWeight 更新知识点优先级
	UpdateKnowledgeWeight(ctx context.Context, req *UpdateKnowledgeWeightReq) (*CommonRsp, error)
	// QueryKnowledgePageSize QueryKnowledgePageSize 查询知识点
	QueryKnowledgePageSize(ctx context.Context, req *QueryKnowledgePageSizeReq) (*QueryKnowledgeRsp, error)
	// QueryCourseKnowledge QueryContestKnowledge 查询课程的知识点
	QueryCourseKnowledge(ctx context.Context, req *QueryCourseKnowledgeReq) (*QueryKnowledgeRsp, error)
	// UpdateCourseKnowledge UpdateCourseKnowledgeReq 更新课程的知识点
	UpdateCourseKnowledge(ctx context.Context, req *UpdateCourseKnowledgeReq) (*CommonRsp, error)
}

func KnowledgeServerService_QueryKnowledge_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UserIDReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(KnowledgeServerService).QueryKnowledge(ctx, reqbody.(*UserIDReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func KnowledgeServerService_AddKnowledge_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddKnowledgeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(KnowledgeServerService).AddKnowledge(ctx, reqbody.(*AddKnowledgeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func KnowledgeServerService_QueryProblemKnowledge_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryProblemKnowledgeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(KnowledgeServerService).QueryProblemKnowledge(ctx, reqbody.(*QueryProblemKnowledgeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func KnowledgeServerService_UpdateKnowledge_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateKnowledgeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(KnowledgeServerService).UpdateKnowledge(ctx, reqbody.(*UpdateKnowledgeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func KnowledgeServerService_UpdateKnowledgeStatus_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateKnowledgeStatusReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(KnowledgeServerService).UpdateKnowledgeStatus(ctx, reqbody.(*UpdateKnowledgeStatusReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func KnowledgeServerService_UpdateKnowledgeWeight_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateKnowledgeWeightReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(KnowledgeServerService).UpdateKnowledgeWeight(ctx, reqbody.(*UpdateKnowledgeWeightReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func KnowledgeServerService_QueryKnowledgePageSize_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryKnowledgePageSizeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(KnowledgeServerService).QueryKnowledgePageSize(ctx, reqbody.(*QueryKnowledgePageSizeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func KnowledgeServerService_QueryCourseKnowledge_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryCourseKnowledgeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(KnowledgeServerService).QueryCourseKnowledge(ctx, reqbody.(*QueryCourseKnowledgeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func KnowledgeServerService_UpdateCourseKnowledge_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateCourseKnowledgeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(KnowledgeServerService).UpdateCourseKnowledge(ctx, reqbody.(*UpdateCourseKnowledgeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// KnowledgeServerServer_ServiceDesc descriptor for server.RegisterService.
var KnowledgeServerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "oj.knowledge.KnowledgeServer",
	HandlerType: ((*KnowledgeServerService)(nil)),
	Methods: []server.Method{
		{
			Name: "/oj.knowledge.KnowledgeServer/QueryKnowledge",
			Func: KnowledgeServerService_QueryKnowledge_Handler,
		},
		{
			Name: "/oj.knowledge.KnowledgeServer/AddKnowledge",
			Func: KnowledgeServerService_AddKnowledge_Handler,
		},
		{
			Name: "/oj.knowledge.KnowledgeServer/QueryProblemKnowledge",
			Func: KnowledgeServerService_QueryProblemKnowledge_Handler,
		},
		{
			Name: "/oj.knowledge.KnowledgeServer/UpdateKnowledge",
			Func: KnowledgeServerService_UpdateKnowledge_Handler,
		},
		{
			Name: "/oj.knowledge.KnowledgeServer/UpdateKnowledgeStatus",
			Func: KnowledgeServerService_UpdateKnowledgeStatus_Handler,
		},
		{
			Name: "/oj.knowledge.KnowledgeServer/UpdateKnowledgeWeight",
			Func: KnowledgeServerService_UpdateKnowledgeWeight_Handler,
		},
		{
			Name: "/oj.knowledge.KnowledgeServer/QueryKnowledgePageSize",
			Func: KnowledgeServerService_QueryKnowledgePageSize_Handler,
		},
		{
			Name: "/oj.knowledge.KnowledgeServer/QueryCourseKnowledge",
			Func: KnowledgeServerService_QueryCourseKnowledge_Handler,
		},
		{
			Name: "/oj.knowledge.KnowledgeServer/UpdateCourseKnowledge",
			Func: KnowledgeServerService_UpdateCourseKnowledge_Handler,
		},
	},
}

// RegisterKnowledgeServerService registers service.
func RegisterKnowledgeServerService(s server.Service, svr KnowledgeServerService) {
	if err := s.Register(&KnowledgeServerServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("KnowledgeServer register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedKnowledgeServer struct{}

// QueryKnowledge QueryKnowledge 查询知识点
func (s *UnimplementedKnowledgeServer) QueryKnowledge(ctx context.Context, req *UserIDReq) (*QueryKnowledgeRsp, error) {
	return nil, errors.New("rpc QueryKnowledge of service KnowledgeServer is not implemented")
}

// AddKnowledge AddKnowledge 添加知识点
func (s *UnimplementedKnowledgeServer) AddKnowledge(ctx context.Context, req *AddKnowledgeReq) (*CommonRsp, error) {
	return nil, errors.New("rpc AddKnowledge of service KnowledgeServer is not implemented")
}

// QueryProblemKnowledge QueryProblemKnowledge 查询题目的知识点
func (s *UnimplementedKnowledgeServer) QueryProblemKnowledge(ctx context.Context, req *QueryProblemKnowledgeReq) (*QueryProblemKnowledgeRsp, error) {
	return nil, errors.New("rpc QueryProblemKnowledge of service KnowledgeServer is not implemented")
}

// UpdateKnowledge UpdateKnowledge 更新知识点
func (s *UnimplementedKnowledgeServer) UpdateKnowledge(ctx context.Context, req *UpdateKnowledgeReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateKnowledge of service KnowledgeServer is not implemented")
}

// UpdateKnowledgeStatus UpdateKnowledgeStatus 更新知识点状态
func (s *UnimplementedKnowledgeServer) UpdateKnowledgeStatus(ctx context.Context, req *UpdateKnowledgeStatusReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateKnowledgeStatus of service KnowledgeServer is not implemented")
}

// UpdateKnowledgeWeight UpdateKnowledgeWeight 更新知识点优先级
func (s *UnimplementedKnowledgeServer) UpdateKnowledgeWeight(ctx context.Context, req *UpdateKnowledgeWeightReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateKnowledgeWeight of service KnowledgeServer is not implemented")
}

// QueryKnowledgePageSize QueryKnowledgePageSize 查询知识点
func (s *UnimplementedKnowledgeServer) QueryKnowledgePageSize(ctx context.Context, req *QueryKnowledgePageSizeReq) (*QueryKnowledgeRsp, error) {
	return nil, errors.New("rpc QueryKnowledgePageSize of service KnowledgeServer is not implemented")
}

// QueryCourseKnowledge QueryContestKnowledge 查询课程的知识点
func (s *UnimplementedKnowledgeServer) QueryCourseKnowledge(ctx context.Context, req *QueryCourseKnowledgeReq) (*QueryKnowledgeRsp, error) {
	return nil, errors.New("rpc QueryCourseKnowledge of service KnowledgeServer is not implemented")
}

// UpdateCourseKnowledge UpdateCourseKnowledgeReq 更新课程的知识点
func (s *UnimplementedKnowledgeServer) UpdateCourseKnowledge(ctx context.Context, req *UpdateCourseKnowledgeReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateCourseKnowledge of service KnowledgeServer is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// KnowledgeServerClientProxy defines service client proxy
type KnowledgeServerClientProxy interface {
	// QueryKnowledge QueryKnowledge 查询知识点
	QueryKnowledge(ctx context.Context, req *UserIDReq, opts ...client.Option) (rsp *QueryKnowledgeRsp, err error)
	// AddKnowledge AddKnowledge 添加知识点
	AddKnowledge(ctx context.Context, req *AddKnowledgeReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QueryProblemKnowledge QueryProblemKnowledge 查询题目的知识点
	QueryProblemKnowledge(ctx context.Context, req *QueryProblemKnowledgeReq, opts ...client.Option) (rsp *QueryProblemKnowledgeRsp, err error)
	// UpdateKnowledge UpdateKnowledge 更新知识点
	UpdateKnowledge(ctx context.Context, req *UpdateKnowledgeReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateKnowledgeStatus UpdateKnowledgeStatus 更新知识点状态
	UpdateKnowledgeStatus(ctx context.Context, req *UpdateKnowledgeStatusReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateKnowledgeWeight UpdateKnowledgeWeight 更新知识点优先级
	UpdateKnowledgeWeight(ctx context.Context, req *UpdateKnowledgeWeightReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QueryKnowledgePageSize QueryKnowledgePageSize 查询知识点
	QueryKnowledgePageSize(ctx context.Context, req *QueryKnowledgePageSizeReq, opts ...client.Option) (rsp *QueryKnowledgeRsp, err error)
	// QueryCourseKnowledge QueryContestKnowledge 查询课程的知识点
	QueryCourseKnowledge(ctx context.Context, req *QueryCourseKnowledgeReq, opts ...client.Option) (rsp *QueryKnowledgeRsp, err error)
	// UpdateCourseKnowledge UpdateCourseKnowledgeReq 更新课程的知识点
	UpdateCourseKnowledge(ctx context.Context, req *UpdateCourseKnowledgeReq, opts ...client.Option) (rsp *CommonRsp, err error)
}

type KnowledgeServerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewKnowledgeServerClientProxy = func(opts ...client.Option) KnowledgeServerClientProxy {
	return &KnowledgeServerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *KnowledgeServerClientProxyImpl) QueryKnowledge(ctx context.Context, req *UserIDReq, opts ...client.Option) (*QueryKnowledgeRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.knowledge.KnowledgeServer/QueryKnowledge")
	msg.WithCalleeServiceName(KnowledgeServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("KnowledgeServer")
	msg.WithCalleeMethod("QueryKnowledge")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryKnowledgeRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *KnowledgeServerClientProxyImpl) AddKnowledge(ctx context.Context, req *AddKnowledgeReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.knowledge.KnowledgeServer/AddKnowledge")
	msg.WithCalleeServiceName(KnowledgeServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("KnowledgeServer")
	msg.WithCalleeMethod("AddKnowledge")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *KnowledgeServerClientProxyImpl) QueryProblemKnowledge(ctx context.Context, req *QueryProblemKnowledgeReq, opts ...client.Option) (*QueryProblemKnowledgeRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.knowledge.KnowledgeServer/QueryProblemKnowledge")
	msg.WithCalleeServiceName(KnowledgeServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("KnowledgeServer")
	msg.WithCalleeMethod("QueryProblemKnowledge")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryProblemKnowledgeRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *KnowledgeServerClientProxyImpl) UpdateKnowledge(ctx context.Context, req *UpdateKnowledgeReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.knowledge.KnowledgeServer/UpdateKnowledge")
	msg.WithCalleeServiceName(KnowledgeServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("KnowledgeServer")
	msg.WithCalleeMethod("UpdateKnowledge")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *KnowledgeServerClientProxyImpl) UpdateKnowledgeStatus(ctx context.Context, req *UpdateKnowledgeStatusReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.knowledge.KnowledgeServer/UpdateKnowledgeStatus")
	msg.WithCalleeServiceName(KnowledgeServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("KnowledgeServer")
	msg.WithCalleeMethod("UpdateKnowledgeStatus")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *KnowledgeServerClientProxyImpl) UpdateKnowledgeWeight(ctx context.Context, req *UpdateKnowledgeWeightReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.knowledge.KnowledgeServer/UpdateKnowledgeWeight")
	msg.WithCalleeServiceName(KnowledgeServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("KnowledgeServer")
	msg.WithCalleeMethod("UpdateKnowledgeWeight")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *KnowledgeServerClientProxyImpl) QueryKnowledgePageSize(ctx context.Context, req *QueryKnowledgePageSizeReq, opts ...client.Option) (*QueryKnowledgeRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.knowledge.KnowledgeServer/QueryKnowledgePageSize")
	msg.WithCalleeServiceName(KnowledgeServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("KnowledgeServer")
	msg.WithCalleeMethod("QueryKnowledgePageSize")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryKnowledgeRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *KnowledgeServerClientProxyImpl) QueryCourseKnowledge(ctx context.Context, req *QueryCourseKnowledgeReq, opts ...client.Option) (*QueryKnowledgeRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.knowledge.KnowledgeServer/QueryCourseKnowledge")
	msg.WithCalleeServiceName(KnowledgeServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("KnowledgeServer")
	msg.WithCalleeMethod("QueryCourseKnowledge")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryKnowledgeRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *KnowledgeServerClientProxyImpl) UpdateCourseKnowledge(ctx context.Context, req *UpdateCourseKnowledgeReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.knowledge.KnowledgeServer/UpdateCourseKnowledge")
	msg.WithCalleeServiceName(KnowledgeServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("KnowledgeServer")
	msg.WithCalleeMethod("UpdateCourseKnowledge")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
