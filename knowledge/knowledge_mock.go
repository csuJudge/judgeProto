// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/csuJudge/judgeProto/knowledge.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/csuJudge/judgeProto/knowledge_mock.go -package=judgeProto -self_package=github.com/csuJudge/judgeProto --source=stub/github.com/csuJudge/judgeProto/knowledge.trpc.go
//

// Package judgeProto is a generated GoMock package.
package judgeProto

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockKnowledgeServerService is a mock of KnowledgeServerService interface.
type MockKnowledgeServerService struct {
	ctrl     *gomock.Controller
	recorder *MockKnowledgeServerServiceMockRecorder
}

// MockKnowledgeServerServiceMockRecorder is the mock recorder for MockKnowledgeServerService.
type MockKnowledgeServerServiceMockRecorder struct {
	mock *MockKnowledgeServerService
}

// NewMockKnowledgeServerService creates a new mock instance.
func NewMockKnowledgeServerService(ctrl *gomock.Controller) *MockKnowledgeServerService {
	mock := &MockKnowledgeServerService{ctrl: ctrl}
	mock.recorder = &MockKnowledgeServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnowledgeServerService) EXPECT() *MockKnowledgeServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockKnowledgeServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddKnowledge mocks base method.
func (m *MockKnowledgeServerService) AddKnowledge(ctx context.Context, req *AddKnowledgeReq) (*AddKnowledgeRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddKnowledge", ctx, req)
	ret0, _ := ret[0].(*AddKnowledgeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddKnowledge indicates an expected call of AddKnowledge.
func (mr *MockKnowledgeServerServiceMockRecorder) AddKnowledge(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKnowledge", reflect.TypeOf((*MockKnowledgeServerService)(nil).AddKnowledge), ctx, req)
}

// QueryKnowledge mocks base method.
func (m *MockKnowledgeServerService) QueryKnowledge(ctx context.Context, req *QueryKnowledgeReq) (*QueryKnowledgeRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryKnowledge", ctx, req)
	ret0, _ := ret[0].(*QueryKnowledgeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryKnowledge indicates an expected call of QueryKnowledge.
func (mr *MockKnowledgeServerServiceMockRecorder) QueryKnowledge(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryKnowledge", reflect.TypeOf((*MockKnowledgeServerService)(nil).QueryKnowledge), ctx, req)
}

// MockKnowledgeServerClientProxy is a mock of KnowledgeServerClientProxy interface.
type MockKnowledgeServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockKnowledgeServerClientProxyMockRecorder
}

// MockKnowledgeServerClientProxyMockRecorder is the mock recorder for MockKnowledgeServerClientProxy.
type MockKnowledgeServerClientProxyMockRecorder struct {
	mock *MockKnowledgeServerClientProxy
}

// NewMockKnowledgeServerClientProxy creates a new mock instance.
func NewMockKnowledgeServerClientProxy(ctrl *gomock.Controller) *MockKnowledgeServerClientProxy {
	mock := &MockKnowledgeServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockKnowledgeServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnowledgeServerClientProxy) EXPECT() *MockKnowledgeServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockKnowledgeServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddKnowledge mocks base method.
func (m *MockKnowledgeServerClientProxy) AddKnowledge(ctx context.Context, req *AddKnowledgeReq, opts ...client.Option) (*AddKnowledgeRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddKnowledge", varargs...)
	ret0, _ := ret[0].(*AddKnowledgeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddKnowledge indicates an expected call of AddKnowledge.
func (mr *MockKnowledgeServerClientProxyMockRecorder) AddKnowledge(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKnowledge", reflect.TypeOf((*MockKnowledgeServerClientProxy)(nil).AddKnowledge), varargs...)
}

// QueryKnowledge mocks base method.
func (m *MockKnowledgeServerClientProxy) QueryKnowledge(ctx context.Context, req *QueryKnowledgeReq, opts ...client.Option) (*QueryKnowledgeRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryKnowledge", varargs...)
	ret0, _ := ret[0].(*QueryKnowledgeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryKnowledge indicates an expected call of QueryKnowledge.
func (mr *MockKnowledgeServerClientProxyMockRecorder) QueryKnowledge(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryKnowledge", reflect.TypeOf((*MockKnowledgeServerClientProxy)(nil).QueryKnowledge), varargs...)
}
