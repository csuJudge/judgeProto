// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.19.1
// source: news.proto

package news

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryNewsByPageSizeRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	News          []*News                `protobuf:"bytes,3,rep,name=news,proto3" json:"news,omitempty"`       // 公告的集合
	Count         int32                  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`    // 总数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNewsByPageSizeRsp) Reset() {
	*x = QueryNewsByPageSizeRsp{}
	mi := &file_news_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNewsByPageSizeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewsByPageSizeRsp) ProtoMessage() {}

func (x *QueryNewsByPageSizeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewsByPageSizeRsp.ProtoReflect.Descriptor instead.
func (*QueryNewsByPageSizeRsp) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{0}
}

func (x *QueryNewsByPageSizeRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryNewsByPageSizeRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryNewsByPageSizeRsp) GetNews() []*News {
	if x != nil {
		return x.News
	}
	return nil
}

func (x *QueryNewsByPageSizeRsp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type QueryNewsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NewsID        int32                  `protobuf:"varint,1,opt,name=newsID,proto3" json:"newsID,omitempty"` // 公告的主键
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNewsReq) Reset() {
	*x = QueryNewsReq{}
	mi := &file_news_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewsReq) ProtoMessage() {}

func (x *QueryNewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewsReq.ProtoReflect.Descriptor instead.
func (*QueryNewsReq) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{1}
}

func (x *QueryNewsReq) GetNewsID() int32 {
	if x != nil {
		return x.NewsID
	}
	return 0
}

type QueryNewsRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	News          *News                  `protobuf:"bytes,3,opt,name=news,proto3" json:"news,omitempty"`       // 公告
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNewsRsp) Reset() {
	*x = QueryNewsRsp{}
	mi := &file_news_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNewsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewsRsp) ProtoMessage() {}

func (x *QueryNewsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewsRsp.ProtoReflect.Descriptor instead.
func (*QueryNewsRsp) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{2}
}

func (x *QueryNewsRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryNewsRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryNewsRsp) GetNews() *News {
	if x != nil {
		return x.News
	}
	return nil
}

type News struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                  // 公告主键
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`               // 公告名称
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`         // 公告内容
	CreatedTime   string                 `protobuf:"bytes,4,opt,name=createdTime,proto3" json:"createdTime,omitempty"` // 公告创建时间
	Author        string                 `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`           // 公告作业
	Enable        int32                  `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty"`          // 公告状态
	Priority      int32                  `protobuf:"varint,7,opt,name=priority,proto3" json:"priority,omitempty"`      // 公告优先级
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *News) Reset() {
	*x = News{}
	mi := &file_news_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *News) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*News) ProtoMessage() {}

func (x *News) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use News.ProtoReflect.Descriptor instead.
func (*News) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{3}
}

func (x *News) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *News) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *News) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *News) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *News) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *News) GetEnable() int32 {
	if x != nil {
		return x.Enable
	}
	return 0
}

func (x *News) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type QueryNewsByPageSizeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`   // 页
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"` // 页大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNewsByPageSizeReq) Reset() {
	*x = QueryNewsByPageSizeReq{}
	mi := &file_news_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNewsByPageSizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewsByPageSizeReq) ProtoMessage() {}

func (x *QueryNewsByPageSizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewsByPageSizeReq.ProtoReflect.Descriptor instead.
func (*QueryNewsByPageSizeReq) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{4}
}

func (x *QueryNewsByPageSizeReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryNewsByPageSizeReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type UpdateNewsPriorityReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`     // 用户主键
	NewsID        int32                  `protobuf:"varint,2,opt,name=newsID,proto3" json:"newsID,omitempty"`     // 公告主键
	Priority      int32                  `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"` // 公告优先级
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateNewsPriorityReq) Reset() {
	*x = UpdateNewsPriorityReq{}
	mi := &file_news_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNewsPriorityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewsPriorityReq) ProtoMessage() {}

func (x *UpdateNewsPriorityReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewsPriorityReq.ProtoReflect.Descriptor instead.
func (*UpdateNewsPriorityReq) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateNewsPriorityReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateNewsPriorityReq) GetNewsID() int32 {
	if x != nil {
		return x.NewsID
	}
	return 0
}

func (x *UpdateNewsPriorityReq) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type UpdateNewsStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` // 用户主键
	NewsID        int32                  `protobuf:"varint,2,opt,name=newsID,proto3" json:"newsID,omitempty"` // 公告主键
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"` // 状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateNewsStatusReq) Reset() {
	*x = UpdateNewsStatusReq{}
	mi := &file_news_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNewsStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewsStatusReq) ProtoMessage() {}

func (x *UpdateNewsStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewsStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateNewsStatusReq) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateNewsStatusReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateNewsStatusReq) GetNewsID() int32 {
	if x != nil {
		return x.NewsID
	}
	return 0
}

func (x *UpdateNewsStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type AddNewsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // 新闻名
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"` // 内容
	UserID        int32                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`  // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddNewsReq) Reset() {
	*x = AddNewsReq{}
	mi := &file_news_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddNewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewsReq) ProtoMessage() {}

func (x *AddNewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewsReq.ProtoReflect.Descriptor instead.
func (*AddNewsReq) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{7}
}

func (x *AddNewsReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddNewsReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddNewsReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type UpdateNewsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`  // 用户主键
	NewsID        int32                  `protobuf:"varint,2,opt,name=newsID,proto3" json:"newsID,omitempty"`  // 公告主键
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`       // 名称
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"` // 内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateNewsReq) Reset() {
	*x = UpdateNewsReq{}
	mi := &file_news_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewsReq) ProtoMessage() {}

func (x *UpdateNewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewsReq.ProtoReflect.Descriptor instead.
func (*UpdateNewsReq) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateNewsReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateNewsReq) GetNewsID() int32 {
	if x != nil {
		return x.NewsID
	}
	return 0
}

func (x *UpdateNewsReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNewsReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CommonRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonRsp) Reset() {
	*x = CommonRsp{}
	mi := &file_news_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRsp) ProtoMessage() {}

func (x *CommonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRsp.ProtoReflect.Descriptor instead.
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{9}
}

func (x *CommonRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_news_proto protoreflect.FileDescriptor

var file_news_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6f, 0x6a,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x22, 0x7f, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65,
	0x77, 0x73, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x04, 0x6e, 0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x6a,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x04, 0x6e, 0x65, 0x77, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x26, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e,
	0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x73, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x73, 0x49, 0x44, 0x22, 0x5f,
	0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04,
	0x6e, 0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x6a, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x22,
	0xb2, 0x01, 0x0a, 0x04, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x22, 0x42, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77,
	0x73, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x63, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77,
	0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x73, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x5d, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x65, 0x77, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x65,
	0x77, 0x73, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x6d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77,
	0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x73, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x39, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0xfe, 0x03, 0x0a, 0x0a, 0x4e,
	0x65, 0x77, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x4e, 0x65, 0x77, 0x73, 0x12, 0x13, 0x2e, 0x6f, 0x6a, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x6f, 0x6a, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x3a, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x16, 0x2e,
	0x6f, 0x6a, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x6f, 0x6a, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x2e, 0x6f, 0x6a, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e,
	0x6f, 0x6a, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x2e, 0x6f, 0x6a, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x6f, 0x6a, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x73, 0x42, 0x79, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x73, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x73, 0x42, 0x79, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x6f, 0x6a, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65,
	0x77, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x6c, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x73, 0x42, 0x79, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x73, 0x42, 0x79, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x25, 0x5a, 0x23, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x73, 0x75, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x65,
	0x77, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_news_proto_rawDescOnce sync.Once
	file_news_proto_rawDescData = file_news_proto_rawDesc
)

func file_news_proto_rawDescGZIP() []byte {
	file_news_proto_rawDescOnce.Do(func() {
		file_news_proto_rawDescData = protoimpl.X.CompressGZIP(file_news_proto_rawDescData)
	})
	return file_news_proto_rawDescData
}

var file_news_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_news_proto_goTypes = []any{
	(*QueryNewsByPageSizeRsp)(nil), // 0: oj.news.QueryNewsByPageSizeRsp
	(*QueryNewsReq)(nil),           // 1: oj.news.QueryNewsReq
	(*QueryNewsRsp)(nil),           // 2: oj.news.QueryNewsRsp
	(*News)(nil),                   // 3: oj.news.News
	(*QueryNewsByPageSizeReq)(nil), // 4: oj.news.QueryNewsByPageSizeReq
	(*UpdateNewsPriorityReq)(nil),  // 5: oj.news.UpdateNewsPriorityReq
	(*UpdateNewsStatusReq)(nil),    // 6: oj.news.UpdateNewsStatusReq
	(*AddNewsReq)(nil),             // 7: oj.news.AddNewsReq
	(*UpdateNewsReq)(nil),          // 8: oj.news.UpdateNewsReq
	(*CommonRsp)(nil),              // 9: oj.news.CommonRsp
}
var file_news_proto_depIdxs = []int32{
	3, // 0: oj.news.QueryNewsByPageSizeRsp.news:type_name -> oj.news.News
	3, // 1: oj.news.QueryNewsRsp.news:type_name -> oj.news.News
	7, // 2: oj.news.NewsServer.AddNews:input_type -> oj.news.AddNewsReq
	8, // 3: oj.news.NewsServer.UpdateNews:input_type -> oj.news.UpdateNewsReq
	6, // 4: oj.news.NewsServer.UpdateNewsStatus:input_type -> oj.news.UpdateNewsStatusReq
	5, // 5: oj.news.NewsServer.UpdateNewsPriority:input_type -> oj.news.UpdateNewsPriorityReq
	4, // 6: oj.news.NewsServer.QueryNewsByPageSize:input_type -> oj.news.QueryNewsByPageSizeReq
	1, // 7: oj.news.NewsServer.QueryNews:input_type -> oj.news.QueryNewsReq
	4, // 8: oj.news.NewsServer.QueryAllNews:input_type -> oj.news.QueryNewsByPageSizeReq
	9, // 9: oj.news.NewsServer.AddNews:output_type -> oj.news.CommonRsp
	9, // 10: oj.news.NewsServer.UpdateNews:output_type -> oj.news.CommonRsp
	9, // 11: oj.news.NewsServer.UpdateNewsStatus:output_type -> oj.news.CommonRsp
	9, // 12: oj.news.NewsServer.UpdateNewsPriority:output_type -> oj.news.CommonRsp
	0, // 13: oj.news.NewsServer.QueryNewsByPageSize:output_type -> oj.news.QueryNewsByPageSizeRsp
	2, // 14: oj.news.NewsServer.QueryNews:output_type -> oj.news.QueryNewsRsp
	0, // 15: oj.news.NewsServer.QueryAllNews:output_type -> oj.news.QueryNewsByPageSizeRsp
	9, // [9:16] is the sub-list for method output_type
	2, // [2:9] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_news_proto_init() }
func file_news_proto_init() {
	if File_news_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_news_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_news_proto_goTypes,
		DependencyIndexes: file_news_proto_depIdxs,
		MessageInfos:      file_news_proto_msgTypes,
	}.Build()
	File_news_proto = out.File
	file_news_proto_rawDesc = nil
	file_news_proto_goTypes = nil
	file_news_proto_depIdxs = nil
}
