// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: news.proto

package news

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// NewsServerService defines service.
type NewsServerService interface {
	// AddNews AddNews 添加公告
	AddNews(ctx context.Context, req *AddNewsReq) (*CommonRsp, error)
	// UpdateNews UpdateNews 更新公告
	UpdateNews(ctx context.Context, req *UpdateNewsReq) (*CommonRsp, error)
	// UpdateNewsStatus UpdateNewsStatus 更新公告状态
	UpdateNewsStatus(ctx context.Context, req *UpdateNewsStatusReq) (*CommonRsp, error)
	// UpdateNewsPriority UpdateNewsPriority 更新公告优先级
	UpdateNewsPriority(ctx context.Context, req *UpdateNewsPriorityReq) (*CommonRsp, error)
	// QueryNewsByPageSize QueryNewsByPageSize 分页查询公告
	QueryNewsByPageSize(ctx context.Context, req *QueryNewsByPageSizeReq) (*QueryNewsByPageSizeRsp, error)
	// QueryNews QueryNews 查询公告
	QueryNews(ctx context.Context, req *QueryNewsReq) (*QueryNewsRsp, error)
}

func NewsServerService_AddNews_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddNewsReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(NewsServerService).AddNews(ctx, reqbody.(*AddNewsReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func NewsServerService_UpdateNews_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateNewsReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(NewsServerService).UpdateNews(ctx, reqbody.(*UpdateNewsReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func NewsServerService_UpdateNewsStatus_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateNewsStatusReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(NewsServerService).UpdateNewsStatus(ctx, reqbody.(*UpdateNewsStatusReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func NewsServerService_UpdateNewsPriority_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateNewsPriorityReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(NewsServerService).UpdateNewsPriority(ctx, reqbody.(*UpdateNewsPriorityReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func NewsServerService_QueryNewsByPageSize_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryNewsByPageSizeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(NewsServerService).QueryNewsByPageSize(ctx, reqbody.(*QueryNewsByPageSizeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func NewsServerService_QueryNews_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryNewsReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(NewsServerService).QueryNews(ctx, reqbody.(*QueryNewsReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// NewsServerServer_ServiceDesc descriptor for server.RegisterService.
var NewsServerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "oj.news.NewsServer",
	HandlerType: ((*NewsServerService)(nil)),
	Methods: []server.Method{
		{
			Name: "/oj.news.NewsServer/AddNews",
			Func: NewsServerService_AddNews_Handler,
		},
		{
			Name: "/oj.news.NewsServer/UpdateNews",
			Func: NewsServerService_UpdateNews_Handler,
		},
		{
			Name: "/oj.news.NewsServer/UpdateNewsStatus",
			Func: NewsServerService_UpdateNewsStatus_Handler,
		},
		{
			Name: "/oj.news.NewsServer/UpdateNewsPriority",
			Func: NewsServerService_UpdateNewsPriority_Handler,
		},
		{
			Name: "/oj.news.NewsServer/QueryNewsByPageSize",
			Func: NewsServerService_QueryNewsByPageSize_Handler,
		},
		{
			Name: "/oj.news.NewsServer/QueryNews",
			Func: NewsServerService_QueryNews_Handler,
		},
	},
}

// RegisterNewsServerService registers service.
func RegisterNewsServerService(s server.Service, svr NewsServerService) {
	if err := s.Register(&NewsServerServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("NewsServer register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedNewsServer struct{}

// AddNews AddNews 添加公告
func (s *UnimplementedNewsServer) AddNews(ctx context.Context, req *AddNewsReq) (*CommonRsp, error) {
	return nil, errors.New("rpc AddNews of service NewsServer is not implemented")
}

// UpdateNews UpdateNews 更新公告
func (s *UnimplementedNewsServer) UpdateNews(ctx context.Context, req *UpdateNewsReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateNews of service NewsServer is not implemented")
}

// UpdateNewsStatus UpdateNewsStatus 更新公告状态
func (s *UnimplementedNewsServer) UpdateNewsStatus(ctx context.Context, req *UpdateNewsStatusReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateNewsStatus of service NewsServer is not implemented")
}

// UpdateNewsPriority UpdateNewsPriority 更新公告优先级
func (s *UnimplementedNewsServer) UpdateNewsPriority(ctx context.Context, req *UpdateNewsPriorityReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateNewsPriority of service NewsServer is not implemented")
}

// QueryNewsByPageSize QueryNewsByPageSize 分页查询公告
func (s *UnimplementedNewsServer) QueryNewsByPageSize(ctx context.Context, req *QueryNewsByPageSizeReq) (*QueryNewsByPageSizeRsp, error) {
	return nil, errors.New("rpc QueryNewsByPageSize of service NewsServer is not implemented")
}

// QueryNews QueryNews 查询公告
func (s *UnimplementedNewsServer) QueryNews(ctx context.Context, req *QueryNewsReq) (*QueryNewsRsp, error) {
	return nil, errors.New("rpc QueryNews of service NewsServer is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// NewsServerClientProxy defines service client proxy
type NewsServerClientProxy interface {
	// AddNews AddNews 添加公告
	AddNews(ctx context.Context, req *AddNewsReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateNews UpdateNews 更新公告
	UpdateNews(ctx context.Context, req *UpdateNewsReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateNewsStatus UpdateNewsStatus 更新公告状态
	UpdateNewsStatus(ctx context.Context, req *UpdateNewsStatusReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateNewsPriority UpdateNewsPriority 更新公告优先级
	UpdateNewsPriority(ctx context.Context, req *UpdateNewsPriorityReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QueryNewsByPageSize QueryNewsByPageSize 分页查询公告
	QueryNewsByPageSize(ctx context.Context, req *QueryNewsByPageSizeReq, opts ...client.Option) (rsp *QueryNewsByPageSizeRsp, err error)
	// QueryNews QueryNews 查询公告
	QueryNews(ctx context.Context, req *QueryNewsReq, opts ...client.Option) (rsp *QueryNewsRsp, err error)
}

type NewsServerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewNewsServerClientProxy = func(opts ...client.Option) NewsServerClientProxy {
	return &NewsServerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *NewsServerClientProxyImpl) AddNews(ctx context.Context, req *AddNewsReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.news.NewsServer/AddNews")
	msg.WithCalleeServiceName(NewsServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("NewsServer")
	msg.WithCalleeMethod("AddNews")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *NewsServerClientProxyImpl) UpdateNews(ctx context.Context, req *UpdateNewsReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.news.NewsServer/UpdateNews")
	msg.WithCalleeServiceName(NewsServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("NewsServer")
	msg.WithCalleeMethod("UpdateNews")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *NewsServerClientProxyImpl) UpdateNewsStatus(ctx context.Context, req *UpdateNewsStatusReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.news.NewsServer/UpdateNewsStatus")
	msg.WithCalleeServiceName(NewsServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("NewsServer")
	msg.WithCalleeMethod("UpdateNewsStatus")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *NewsServerClientProxyImpl) UpdateNewsPriority(ctx context.Context, req *UpdateNewsPriorityReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.news.NewsServer/UpdateNewsPriority")
	msg.WithCalleeServiceName(NewsServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("NewsServer")
	msg.WithCalleeMethod("UpdateNewsPriority")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *NewsServerClientProxyImpl) QueryNewsByPageSize(ctx context.Context, req *QueryNewsByPageSizeReq, opts ...client.Option) (*QueryNewsByPageSizeRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.news.NewsServer/QueryNewsByPageSize")
	msg.WithCalleeServiceName(NewsServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("NewsServer")
	msg.WithCalleeMethod("QueryNewsByPageSize")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryNewsByPageSizeRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *NewsServerClientProxyImpl) QueryNews(ctx context.Context, req *QueryNewsReq, opts ...client.Option) (*QueryNewsRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.news.NewsServer/QueryNews")
	msg.WithCalleeServiceName(NewsServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("NewsServer")
	msg.WithCalleeMethod("QueryNews")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryNewsRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
