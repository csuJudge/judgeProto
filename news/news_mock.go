// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/csuJudge/judgeProto/news/news.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/csuJudge/judgeProto/news/news_mock.go -package=news -self_package=github.com/csuJudge/judgeProto/news --source=stub/github.com/csuJudge/judgeProto/news/news.trpc.go
//

// Package news is a generated GoMock package.
package news

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockNewsServerService is a mock of NewsServerService interface.
type MockNewsServerService struct {
	ctrl     *gomock.Controller
	recorder *MockNewsServerServiceMockRecorder
}

// MockNewsServerServiceMockRecorder is the mock recorder for MockNewsServerService.
type MockNewsServerServiceMockRecorder struct {
	mock *MockNewsServerService
}

// NewMockNewsServerService creates a new mock instance.
func NewMockNewsServerService(ctrl *gomock.Controller) *MockNewsServerService {
	mock := &MockNewsServerService{ctrl: ctrl}
	mock.recorder = &MockNewsServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsServerService) EXPECT() *MockNewsServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNewsServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddNews mocks base method.
func (m *MockNewsServerService) AddNews(ctx context.Context, req *AddNewsReq) (*OperateNewsRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNews", ctx, req)
	ret0, _ := ret[0].(*OperateNewsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNews indicates an expected call of AddNews.
func (mr *MockNewsServerServiceMockRecorder) AddNews(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNews", reflect.TypeOf((*MockNewsServerService)(nil).AddNews), ctx, req)
}

// QueryNews mocks base method.
func (m *MockNewsServerService) QueryNews(ctx context.Context, req *QueryNewsReq) (*QueryNewsRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryNews", ctx, req)
	ret0, _ := ret[0].(*QueryNewsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryNews indicates an expected call of QueryNews.
func (mr *MockNewsServerServiceMockRecorder) QueryNews(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNews", reflect.TypeOf((*MockNewsServerService)(nil).QueryNews), ctx, req)
}

// QueryNewsByPageSize mocks base method.
func (m *MockNewsServerService) QueryNewsByPageSize(ctx context.Context, req *QueryNewsByPageSizeReq) (*QueryNewsByPageSizeRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryNewsByPageSize", ctx, req)
	ret0, _ := ret[0].(*QueryNewsByPageSizeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryNewsByPageSize indicates an expected call of QueryNewsByPageSize.
func (mr *MockNewsServerServiceMockRecorder) QueryNewsByPageSize(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNewsByPageSize", reflect.TypeOf((*MockNewsServerService)(nil).QueryNewsByPageSize), ctx, req)
}

// UpdateNews mocks base method.
func (m *MockNewsServerService) UpdateNews(ctx context.Context, req *UpdateNewsReq) (*OperateNewsRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNews", ctx, req)
	ret0, _ := ret[0].(*OperateNewsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNews indicates an expected call of UpdateNews.
func (mr *MockNewsServerServiceMockRecorder) UpdateNews(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNews", reflect.TypeOf((*MockNewsServerService)(nil).UpdateNews), ctx, req)
}

// UpdateNewsPriority mocks base method.
func (m *MockNewsServerService) UpdateNewsPriority(ctx context.Context, req *UpdateNewsPriorityReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNewsPriority", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNewsPriority indicates an expected call of UpdateNewsPriority.
func (mr *MockNewsServerServiceMockRecorder) UpdateNewsPriority(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNewsPriority", reflect.TypeOf((*MockNewsServerService)(nil).UpdateNewsPriority), ctx, req)
}

// UpdateNewsStatus mocks base method.
func (m *MockNewsServerService) UpdateNewsStatus(ctx context.Context, req *UpdateNewsStatusReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNewsStatus", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNewsStatus indicates an expected call of UpdateNewsStatus.
func (mr *MockNewsServerServiceMockRecorder) UpdateNewsStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNewsStatus", reflect.TypeOf((*MockNewsServerService)(nil).UpdateNewsStatus), ctx, req)
}

// MockNewsServerClientProxy is a mock of NewsServerClientProxy interface.
type MockNewsServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockNewsServerClientProxyMockRecorder
}

// MockNewsServerClientProxyMockRecorder is the mock recorder for MockNewsServerClientProxy.
type MockNewsServerClientProxyMockRecorder struct {
	mock *MockNewsServerClientProxy
}

// NewMockNewsServerClientProxy creates a new mock instance.
func NewMockNewsServerClientProxy(ctrl *gomock.Controller) *MockNewsServerClientProxy {
	mock := &MockNewsServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockNewsServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsServerClientProxy) EXPECT() *MockNewsServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNewsServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddNews mocks base method.
func (m *MockNewsServerClientProxy) AddNews(ctx context.Context, req *AddNewsReq, opts ...client.Option) (*OperateNewsRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddNews", varargs...)
	ret0, _ := ret[0].(*OperateNewsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNews indicates an expected call of AddNews.
func (mr *MockNewsServerClientProxyMockRecorder) AddNews(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNews", reflect.TypeOf((*MockNewsServerClientProxy)(nil).AddNews), varargs...)
}

// QueryNews mocks base method.
func (m *MockNewsServerClientProxy) QueryNews(ctx context.Context, req *QueryNewsReq, opts ...client.Option) (*QueryNewsRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryNews", varargs...)
	ret0, _ := ret[0].(*QueryNewsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryNews indicates an expected call of QueryNews.
func (mr *MockNewsServerClientProxyMockRecorder) QueryNews(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNews", reflect.TypeOf((*MockNewsServerClientProxy)(nil).QueryNews), varargs...)
}

// QueryNewsByPageSize mocks base method.
func (m *MockNewsServerClientProxy) QueryNewsByPageSize(ctx context.Context, req *QueryNewsByPageSizeReq, opts ...client.Option) (*QueryNewsByPageSizeRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryNewsByPageSize", varargs...)
	ret0, _ := ret[0].(*QueryNewsByPageSizeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryNewsByPageSize indicates an expected call of QueryNewsByPageSize.
func (mr *MockNewsServerClientProxyMockRecorder) QueryNewsByPageSize(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNewsByPageSize", reflect.TypeOf((*MockNewsServerClientProxy)(nil).QueryNewsByPageSize), varargs...)
}

// UpdateNews mocks base method.
func (m *MockNewsServerClientProxy) UpdateNews(ctx context.Context, req *UpdateNewsReq, opts ...client.Option) (*OperateNewsRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNews", varargs...)
	ret0, _ := ret[0].(*OperateNewsRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNews indicates an expected call of UpdateNews.
func (mr *MockNewsServerClientProxyMockRecorder) UpdateNews(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNews", reflect.TypeOf((*MockNewsServerClientProxy)(nil).UpdateNews), varargs...)
}

// UpdateNewsPriority mocks base method.
func (m *MockNewsServerClientProxy) UpdateNewsPriority(ctx context.Context, req *UpdateNewsPriorityReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNewsPriority", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNewsPriority indicates an expected call of UpdateNewsPriority.
func (mr *MockNewsServerClientProxyMockRecorder) UpdateNewsPriority(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNewsPriority", reflect.TypeOf((*MockNewsServerClientProxy)(nil).UpdateNewsPriority), varargs...)
}

// UpdateNewsStatus mocks base method.
func (m *MockNewsServerClientProxy) UpdateNewsStatus(ctx context.Context, req *UpdateNewsStatusReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNewsStatus", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNewsStatus indicates an expected call of UpdateNewsStatus.
func (mr *MockNewsServerClientProxyMockRecorder) UpdateNewsStatus(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNewsStatus", reflect.TypeOf((*MockNewsServerClientProxy)(nil).UpdateNewsStatus), varargs...)
}
