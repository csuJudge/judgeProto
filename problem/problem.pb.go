// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.19.1
// source: problem.proto

package problem

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateProblemReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ProblemID         int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`                // 题目编号
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                           // 题目名称
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`             // 描述
	Hint              string                 `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`                           // 提示
	InputDescription  string                 `protobuf:"bytes,5,opt,name=inputDescription,proto3" json:"inputDescription,omitempty"`   // 输入描述
	OutputDescription string                 `protobuf:"bytes,6,opt,name=outputDescription,proto3" json:"outputDescription,omitempty"` // 输出描述
	Input             string                 `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty"`                         // 样例输入
	Output            string                 `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`                       // 样例输出
	TimeLimit         int32                  `protobuf:"varint,9,opt,name=timeLimit,proto3" json:"timeLimit,omitempty"`                // 时间限制
	MemoryLimit       int32                  `protobuf:"varint,10,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`           // 内存限制
	Knowledges        string                 `protobuf:"bytes,11,opt,name=knowledges,proto3" json:"knowledges,omitempty"`              // 知识点
	Difficulty        int32                  `protobuf:"varint,12,opt,name=difficulty,proto3" json:"difficulty,omitempty"`             // 难度
	UserID            int32                  `protobuf:"varint,13,opt,name=userID,proto3" json:"userID,omitempty"`                     // 用户编号
	Type              int32                  `protobuf:"varint,14,opt,name=type,proto3" json:"type,omitempty"`                         // 题目类型
	Template          string                 `protobuf:"bytes,15,opt,name=template,proto3" json:"template,omitempty"`                  // 模板
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateProblemReq) Reset() {
	*x = UpdateProblemReq{}
	mi := &file_problem_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemReq) ProtoMessage() {}

func (x *UpdateProblemReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemReq.ProtoReflect.Descriptor instead.
func (*UpdateProblemReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateProblemReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *UpdateProblemReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProblemReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateProblemReq) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *UpdateProblemReq) GetInputDescription() string {
	if x != nil {
		return x.InputDescription
	}
	return ""
}

func (x *UpdateProblemReq) GetOutputDescription() string {
	if x != nil {
		return x.OutputDescription
	}
	return ""
}

func (x *UpdateProblemReq) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *UpdateProblemReq) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *UpdateProblemReq) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *UpdateProblemReq) GetMemoryLimit() int32 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *UpdateProblemReq) GetKnowledges() string {
	if x != nil {
		return x.Knowledges
	}
	return ""
}

func (x *UpdateProblemReq) GetDifficulty() int32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *UpdateProblemReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateProblemReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UpdateProblemReq) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

type UpdateProblemVisitNumberReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	ProblemID     int32                  `protobuf:"varint,2,opt,name=problemID,proto3" json:"problemID,omitempty"` // 问题编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProblemVisitNumberReq) Reset() {
	*x = UpdateProblemVisitNumberReq{}
	mi := &file_problem_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemVisitNumberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemVisitNumberReq) ProtoMessage() {}

func (x *UpdateProblemVisitNumberReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemVisitNumberReq.ProtoReflect.Descriptor instead.
func (*UpdateProblemVisitNumberReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateProblemVisitNumberReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateProblemVisitNumberReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

type QueryProblemNameReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemNameReq) Reset() {
	*x = QueryProblemNameReq{}
	mi := &file_problem_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemNameReq) ProtoMessage() {}

func (x *QueryProblemNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemNameReq.ProtoReflect.Descriptor instead.
func (*QueryProblemNameReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{2}
}

func (x *QueryProblemNameReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryProblemListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`          // 页
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`        // 页大小
	UserID        int32                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`      // 用户编号
	Condition     string                 `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"` // 条件（名称或者编号）
	Knowledge     string                 `protobuf:"bytes,5,opt,name=knowledge,proto3" json:"knowledge,omitempty"` // 知识点
	Course        string                 `protobuf:"bytes,6,opt,name=course,proto3" json:"course,omitempty"`       // 课程
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemListReq) Reset() {
	*x = QueryProblemListReq{}
	mi := &file_problem_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemListReq) ProtoMessage() {}

func (x *QueryProblemListReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemListReq.ProtoReflect.Descriptor instead.
func (*QueryProblemListReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{3}
}

func (x *QueryProblemListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryProblemListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryProblemListReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QueryProblemListReq) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *QueryProblemListReq) GetKnowledge() string {
	if x != nil {
		return x.Knowledge
	}
	return ""
}

func (x *QueryProblemListReq) GetCourse() string {
	if x != nil {
		return x.Course
	}
	return ""
}

type QueryProblemListRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Problem       []*ProblemList         `protobuf:"bytes,3,rep,name=problem,proto3" json:"problem,omitempty"` // 问题列表
	Total         int32                  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`    // 总数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemListRsp) Reset() {
	*x = QueryProblemListRsp{}
	mi := &file_problem_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemListRsp) ProtoMessage() {}

func (x *QueryProblemListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemListRsp.ProtoReflect.Descriptor instead.
func (*QueryProblemListRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{4}
}

func (x *QueryProblemListRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryProblemListRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryProblemListRsp) GetProblem() []*ProblemList {
	if x != nil {
		return x.Problem
	}
	return nil
}

func (x *QueryProblemListRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryContestProblemReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestID     int32                  `protobuf:"varint,1,opt,name=contestID,proto3" json:"contestID,omitempty"` // 作业编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryContestProblemReq) Reset() {
	*x = QueryContestProblemReq{}
	mi := &file_problem_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryContestProblemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContestProblemReq) ProtoMessage() {}

func (x *QueryContestProblemReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContestProblemReq.ProtoReflect.Descriptor instead.
func (*QueryContestProblemReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{5}
}

func (x *QueryContestProblemReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

func (x *QueryContestProblemReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryContestProblemReqRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`   // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`        // 返回码
	Problems      []*ContestProblem      `protobuf:"bytes,3,rep,name=problems,proto3" json:"problems,omitempty"` //  作业的题目列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryContestProblemReqRsp) Reset() {
	*x = QueryContestProblemReqRsp{}
	mi := &file_problem_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryContestProblemReqRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContestProblemReqRsp) ProtoMessage() {}

func (x *QueryContestProblemReqRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContestProblemReqRsp.ProtoReflect.Descriptor instead.
func (*QueryContestProblemReqRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{6}
}

func (x *QueryContestProblemReqRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryContestProblemReqRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryContestProblemReqRsp) GetProblems() []*ContestProblem {
	if x != nil {
		return x.Problems
	}
	return nil
}

type ContestProblem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`   // 题目编号
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`              // 题目名称
	IsDone        int32                  `protobuf:"varint,3,opt,name=isDone,proto3" json:"isDone,omitempty"`         // 是否做完
	Solved        int32                  `protobuf:"varint,4,opt,name=solved,proto3" json:"solved,omitempty"`         // 解决
	Submission    int32                  `protobuf:"varint,5,opt,name=submission,proto3" json:"submission,omitempty"` // 提交
	Difficulty    int32                  `protobuf:"varint,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"` // 难度
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContestProblem) Reset() {
	*x = ContestProblem{}
	mi := &file_problem_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContestProblem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestProblem) ProtoMessage() {}

func (x *ContestProblem) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestProblem.ProtoReflect.Descriptor instead.
func (*ContestProblem) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{7}
}

func (x *ContestProblem) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *ContestProblem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContestProblem) GetIsDone() int32 {
	if x != nil {
		return x.IsDone
	}
	return 0
}

func (x *ContestProblem) GetSolved() int32 {
	if x != nil {
		return x.Solved
	}
	return 0
}

func (x *ContestProblem) GetSubmission() int32 {
	if x != nil {
		return x.Submission
	}
	return 0
}

func (x *ContestProblem) GetDifficulty() int32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

type UpdateProblemStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户主键
	ProblemID     int32                  `protobuf:"varint,2,opt,name=problemID,proto3" json:"problemID,omitempty"` // 题目主键
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`       // 状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProblemStatusReq) Reset() {
	*x = UpdateProblemStatusReq{}
	mi := &file_problem_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemStatusReq) ProtoMessage() {}

func (x *UpdateProblemStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateProblemStatusReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateProblemStatusReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateProblemStatusReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *UpdateProblemStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type DeleteProblemDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`  // 问题编号
	SampleName    string                 `protobuf:"bytes,2,opt,name=sampleName,proto3" json:"sampleName,omitempty"` // 样例名
	UserID        int32                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`        // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProblemDataReq) Reset() {
	*x = DeleteProblemDataReq{}
	mi := &file_problem_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProblemDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemDataReq) ProtoMessage() {}

func (x *DeleteProblemDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemDataReq.ProtoReflect.Descriptor instead.
func (*DeleteProblemDataReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteProblemDataReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *DeleteProblemDataReq) GetSampleName() string {
	if x != nil {
		return x.SampleName
	}
	return ""
}

func (x *DeleteProblemDataReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type UpdateProblemDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`  // 问题编号
	SampleName    string                 `protobuf:"bytes,2,opt,name=sampleName,proto3" json:"sampleName,omitempty"` // 样例名
	Input         string                 `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`           // 输入
	Output        string                 `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`         // 输出
	UserID        int32                  `protobuf:"varint,5,opt,name=userID,proto3" json:"userID,omitempty"`        // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProblemDataReq) Reset() {
	*x = UpdateProblemDataReq{}
	mi := &file_problem_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemDataReq) ProtoMessage() {}

func (x *UpdateProblemDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemDataReq.ProtoReflect.Descriptor instead.
func (*UpdateProblemDataReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateProblemDataReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *UpdateProblemDataReq) GetSampleName() string {
	if x != nil {
		return x.SampleName
	}
	return ""
}

func (x *UpdateProblemDataReq) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *UpdateProblemDataReq) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *UpdateProblemDataReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type CommonRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonRsp) Reset() {
	*x = CommonRsp{}
	mi := &file_problem_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRsp) ProtoMessage() {}

func (x *CommonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRsp.ProtoReflect.Descriptor instead.
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{11}
}

func (x *CommonRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type AddProblemDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"` // 问题编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProblemDataReq) Reset() {
	*x = AddProblemDataReq{}
	mi := &file_problem_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProblemDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProblemDataReq) ProtoMessage() {}

func (x *AddProblemDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProblemDataReq.ProtoReflect.Descriptor instead.
func (*AddProblemDataReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{12}
}

func (x *AddProblemDataReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *AddProblemDataReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryProblemDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`  // 问题编号
	SampleName    string                 `protobuf:"bytes,2,opt,name=sampleName,proto3" json:"sampleName,omitempty"` // 样例名称
	UserID        int32                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`        // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemDataReq) Reset() {
	*x = QueryProblemDataReq{}
	mi := &file_problem_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemDataReq) ProtoMessage() {}

func (x *QueryProblemDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemDataReq.ProtoReflect.Descriptor instead.
func (*QueryProblemDataReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{13}
}

func (x *QueryProblemDataReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *QueryProblemDataReq) GetSampleName() string {
	if x != nil {
		return x.SampleName
	}
	return ""
}

func (x *QueryProblemDataReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryProblemDataRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Input         string                 `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`     // 输入
	Output        string                 `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`   // 输出
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemDataRsp) Reset() {
	*x = QueryProblemDataRsp{}
	mi := &file_problem_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemDataRsp) ProtoMessage() {}

func (x *QueryProblemDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemDataRsp.ProtoReflect.Descriptor instead.
func (*QueryProblemDataRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{14}
}

func (x *QueryProblemDataRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryProblemDataRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryProblemDataRsp) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *QueryProblemDataRsp) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type QueryProblemDataListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"` // 问题编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemDataListReq) Reset() {
	*x = QueryProblemDataListReq{}
	mi := &file_problem_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemDataListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemDataListReq) ProtoMessage() {}

func (x *QueryProblemDataListReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemDataListReq.ProtoReflect.Descriptor instead.
func (*QueryProblemDataListReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{15}
}

func (x *QueryProblemDataListReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *QueryProblemDataListReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryProblemDataListRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Sample        []*Sample              `protobuf:"bytes,3,rep,name=sample,proto3" json:"sample,omitempty"`   // 样例列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemDataListRsp) Reset() {
	*x = QueryProblemDataListRsp{}
	mi := &file_problem_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemDataListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemDataListRsp) ProtoMessage() {}

func (x *QueryProblemDataListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemDataListRsp.ProtoReflect.Descriptor instead.
func (*QueryProblemDataListRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{16}
}

func (x *QueryProblemDataListRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryProblemDataListRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryProblemDataListRsp) GetSample() []*Sample {
	if x != nil {
		return x.Sample
	}
	return nil
}

type Sample struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SampleName    string                 `protobuf:"bytes,1,opt,name=sampleName,proto3" json:"sampleName,omitempty"`     // 样例名称
	SampleInput   string                 `protobuf:"bytes,2,opt,name=sampleInput,proto3" json:"sampleInput,omitempty"`   // 样例输入
	SampleOutput  string                 `protobuf:"bytes,3,opt,name=sampleOutput,proto3" json:"sampleOutput,omitempty"` // 样例输出
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sample) Reset() {
	*x = Sample{}
	mi := &file_problem_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{17}
}

func (x *Sample) GetSampleName() string {
	if x != nil {
		return x.SampleName
	}
	return ""
}

func (x *Sample) GetSampleInput() string {
	if x != nil {
		return x.SampleInput
	}
	return ""
}

func (x *Sample) GetSampleOutput() string {
	if x != nil {
		return x.SampleOutput
	}
	return ""
}

type QueryProblemReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"` // 问题编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	ContestID     int32                  `protobuf:"varint,3,opt,name=contestID,proto3" json:"contestID,omitempty"` // 作业编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemReq) Reset() {
	*x = QueryProblemReq{}
	mi := &file_problem_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemReq) ProtoMessage() {}

func (x *QueryProblemReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemReq.ProtoReflect.Descriptor instead.
func (*QueryProblemReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{18}
}

func (x *QueryProblemReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *QueryProblemReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QueryProblemReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

type QueryProblemRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Problem       *Problem               `protobuf:"bytes,3,opt,name=problem,proto3" json:"problem,omitempty"` // 问题
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemRsp) Reset() {
	*x = QueryProblemRsp{}
	mi := &file_problem_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemRsp) ProtoMessage() {}

func (x *QueryProblemRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemRsp.ProtoReflect.Descriptor instead.
func (*QueryProblemRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{19}
}

func (x *QueryProblemRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryProblemRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryProblemRsp) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

type ProblemList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`   // 题目编号
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`              // 题目名称
	Solved        int32                  `protobuf:"varint,3,opt,name=solved,proto3" json:"solved,omitempty"`         // 解决数
	Submission    int32                  `protobuf:"varint,4,opt,name=submission,proto3" json:"submission,omitempty"` // 提交数
	Difficulty    int32                  `protobuf:"varint,5,opt,name=difficulty,proto3" json:"difficulty,omitempty"` // 难度
	PassRate      float32                `protobuf:"fixed32,6,opt,name=passRate,proto3" json:"passRate,omitempty"`    // 通过率
	IsDone        int32                  `protobuf:"varint,7,opt,name=isDone,proto3" json:"isDone,omitempty"`         // 是否做完
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemList) Reset() {
	*x = ProblemList{}
	mi := &file_problem_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemList) ProtoMessage() {}

func (x *ProblemList) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemList.ProtoReflect.Descriptor instead.
func (*ProblemList) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{20}
}

func (x *ProblemList) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *ProblemList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProblemList) GetSolved() int32 {
	if x != nil {
		return x.Solved
	}
	return 0
}

func (x *ProblemList) GetSubmission() int32 {
	if x != nil {
		return x.Submission
	}
	return 0
}

func (x *ProblemList) GetDifficulty() int32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *ProblemList) GetPassRate() float32 {
	if x != nil {
		return x.PassRate
	}
	return 0
}

func (x *ProblemList) GetIsDone() int32 {
	if x != nil {
		return x.IsDone
	}
	return 0
}

type QueryAllProblemRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Problem       []*Problem             `protobuf:"bytes,3,rep,name=problem,proto3" json:"problem,omitempty"` // 问题列表
	Total         int32                  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`    // 总数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryAllProblemRsp) Reset() {
	*x = QueryAllProblemRsp{}
	mi := &file_problem_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAllProblemRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllProblemRsp) ProtoMessage() {}

func (x *QueryAllProblemRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllProblemRsp.ProtoReflect.Descriptor instead.
func (*QueryAllProblemRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{21}
}

func (x *QueryAllProblemRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryAllProblemRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryAllProblemRsp) GetProblem() []*Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

func (x *QueryAllProblemRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Problem struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ProblemID         int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`                // 题目编号
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                           // 题目名称
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`             // 描述
	Hint              string                 `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`                           // 提示
	Solved            int32                  `protobuf:"varint,5,opt,name=solved,proto3" json:"solved,omitempty"`                      // 解决数
	Submission        int32                  `protobuf:"varint,6,opt,name=submission,proto3" json:"submission,omitempty"`              // 提交数
	InputDescription  string                 `protobuf:"bytes,7,opt,name=inputDescription,proto3" json:"inputDescription,omitempty"`   // 输入描述
	OutputDescription string                 `protobuf:"bytes,8,opt,name=outputDescription,proto3" json:"outputDescription,omitempty"` // 输出描述
	Input             string                 `protobuf:"bytes,9,opt,name=input,proto3" json:"input,omitempty"`                         // 样例输入
	Output            string                 `protobuf:"bytes,10,opt,name=output,proto3" json:"output,omitempty"`                      // 样例输出
	TimeLimit         int32                  `protobuf:"varint,11,opt,name=timeLimit,proto3" json:"timeLimit,omitempty"`               // 时间限制
	MemoryLimit       int32                  `protobuf:"varint,12,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`           // 内存限制
	Knowledges        string                 `protobuf:"bytes,13,opt,name=knowledges,proto3" json:"knowledges,omitempty"`              // 知识点
	Enable            int32                  `protobuf:"varint,14,opt,name=enable,proto3" json:"enable,omitempty"`                     // 状态
	Difficulty        int32                  `protobuf:"varint,15,opt,name=difficulty,proto3" json:"difficulty,omitempty"`             // 难度
	Creator           string                 `protobuf:"bytes,16,opt,name=creator,proto3" json:"creator,omitempty"`                    // 提交者
	UpdateTime        string                 `protobuf:"bytes,17,opt,name=updateTime,proto3" json:"updateTime,omitempty"`              // 修改时间
	CreatedTime       string                 `protobuf:"bytes,18,opt,name=createdTime,proto3" json:"createdTime,omitempty"`            // 创建时间
	UpdatedBy         string                 `protobuf:"bytes,19,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`                // 更新者
	Type              int32                  `protobuf:"varint,20,opt,name=type,proto3" json:"type,omitempty"`                         // 题目类型
	Template          string                 `protobuf:"bytes,21,opt,name=template,proto3" json:"template,omitempty"`                  // 模板
	CreatorID         int32                  `protobuf:"varint,22,opt,name=creatorID,proto3" json:"creatorID,omitempty"`               // 用户编号
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Problem) Reset() {
	*x = Problem{}
	mi := &file_problem_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{22}
}

func (x *Problem) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *Problem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Problem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Problem) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *Problem) GetSolved() int32 {
	if x != nil {
		return x.Solved
	}
	return 0
}

func (x *Problem) GetSubmission() int32 {
	if x != nil {
		return x.Submission
	}
	return 0
}

func (x *Problem) GetInputDescription() string {
	if x != nil {
		return x.InputDescription
	}
	return ""
}

func (x *Problem) GetOutputDescription() string {
	if x != nil {
		return x.OutputDescription
	}
	return ""
}

func (x *Problem) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *Problem) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *Problem) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *Problem) GetMemoryLimit() int32 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *Problem) GetKnowledges() string {
	if x != nil {
		return x.Knowledges
	}
	return ""
}

func (x *Problem) GetEnable() int32 {
	if x != nil {
		return x.Enable
	}
	return 0
}

func (x *Problem) GetDifficulty() int32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *Problem) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Problem) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Problem) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *Problem) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Problem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Problem) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *Problem) GetCreatorID() int32 {
	if x != nil {
		return x.CreatorID
	}
	return 0
}

type AddProblemReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UserID            int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`                      // 用户编号
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                           // 题目名称
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`             // 描述
	Hint              string                 `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`                           // 提示
	InputDescription  string                 `protobuf:"bytes,5,opt,name=inputDescription,proto3" json:"inputDescription,omitempty"`   // 输入描述
	OutputDescription string                 `protobuf:"bytes,6,opt,name=outputDescription,proto3" json:"outputDescription,omitempty"` // 输出描述
	Input             string                 `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty"`                         // 样例输入
	Output            string                 `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`                       // 样例输出
	TimeLimit         int32                  `protobuf:"varint,9,opt,name=timeLimit,proto3" json:"timeLimit,omitempty"`                // 时间限制
	MemoryLimit       int32                  `protobuf:"varint,10,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`           // 内存限制
	Knowledges        string                 `protobuf:"bytes,11,opt,name=knowledges,proto3" json:"knowledges,omitempty"`              // 知识点
	Difficulty        int32                  `protobuf:"varint,12,opt,name=difficulty,proto3" json:"difficulty,omitempty"`             // 难度
	Type              int32                  `protobuf:"varint,13,opt,name=type,proto3" json:"type,omitempty"`                         // 题目类型
	Template          string                 `protobuf:"bytes,14,opt,name=template,proto3" json:"template,omitempty"`                  // 模板
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AddProblemReq) Reset() {
	*x = AddProblemReq{}
	mi := &file_problem_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProblemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProblemReq) ProtoMessage() {}

func (x *AddProblemReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProblemReq.ProtoReflect.Descriptor instead.
func (*AddProblemReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{23}
}

func (x *AddProblemReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *AddProblemReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddProblemReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddProblemReq) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *AddProblemReq) GetInputDescription() string {
	if x != nil {
		return x.InputDescription
	}
	return ""
}

func (x *AddProblemReq) GetOutputDescription() string {
	if x != nil {
		return x.OutputDescription
	}
	return ""
}

func (x *AddProblemReq) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *AddProblemReq) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *AddProblemReq) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *AddProblemReq) GetMemoryLimit() int32 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *AddProblemReq) GetKnowledges() string {
	if x != nil {
		return x.Knowledges
	}
	return ""
}

func (x *AddProblemReq) GetDifficulty() int32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *AddProblemReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AddProblemReq) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

type QueryObjectiveListRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`       // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`            // 返回码
	Objectives    []*Objective           `protobuf:"bytes,3,rep,name=objectives,proto3" json:"objectives,omitempty"` // 客观题集合
	Total         int32                  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`          // 总数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryObjectiveListRsp) Reset() {
	*x = QueryObjectiveListRsp{}
	mi := &file_problem_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryObjectiveListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryObjectiveListRsp) ProtoMessage() {}

func (x *QueryObjectiveListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryObjectiveListRsp.ProtoReflect.Descriptor instead.
func (*QueryObjectiveListRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{24}
}

func (x *QueryObjectiveListRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryObjectiveListRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryObjectiveListRsp) GetObjectives() []*Objective {
	if x != nil {
		return x.Objectives
	}
	return nil
}

func (x *QueryObjectiveListRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryObjectiveListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` // 用户主键
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`     // 页
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`   // 页大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryObjectiveListReq) Reset() {
	*x = QueryObjectiveListReq{}
	mi := &file_problem_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryObjectiveListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryObjectiveListReq) ProtoMessage() {}

func (x *QueryObjectiveListReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryObjectiveListReq.ProtoReflect.Descriptor instead.
func (*QueryObjectiveListReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{25}
}

func (x *QueryObjectiveListReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QueryObjectiveListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryObjectiveListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type IsCorrectObjectiveRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`  // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`       // 返回码
	IsRight       int32                  `protobuf:"varint,3,opt,name=isRight,proto3" json:"isRight,omitempty"` // 是否正确
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsCorrectObjectiveRsp) Reset() {
	*x = IsCorrectObjectiveRsp{}
	mi := &file_problem_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsCorrectObjectiveRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCorrectObjectiveRsp) ProtoMessage() {}

func (x *IsCorrectObjectiveRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCorrectObjectiveRsp.ProtoReflect.Descriptor instead.
func (*IsCorrectObjectiveRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{26}
}

func (x *IsCorrectObjectiveRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *IsCorrectObjectiveRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *IsCorrectObjectiveRsp) GetIsRight() int32 {
	if x != nil {
		return x.IsRight
	}
	return 0
}

type IsCorrectObjectiveReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`           // 用户主键
	ObjectiveID   int32                  `protobuf:"varint,2,opt,name=objectiveID,proto3" json:"objectiveID,omitempty"` // 客观题主键
	Answer        string                 `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`            // 答案
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsCorrectObjectiveReq) Reset() {
	*x = IsCorrectObjectiveReq{}
	mi := &file_problem_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsCorrectObjectiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCorrectObjectiveReq) ProtoMessage() {}

func (x *IsCorrectObjectiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCorrectObjectiveReq.ProtoReflect.Descriptor instead.
func (*IsCorrectObjectiveReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{27}
}

func (x *IsCorrectObjectiveReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *IsCorrectObjectiveReq) GetObjectiveID() int32 {
	if x != nil {
		return x.ObjectiveID
	}
	return 0
}

func (x *IsCorrectObjectiveReq) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type QueryObjectiveReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`           // 用户主键
	ObjectiveID   int32                  `protobuf:"varint,2,opt,name=objectiveID,proto3" json:"objectiveID,omitempty"` // 客观题主键
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryObjectiveReq) Reset() {
	*x = QueryObjectiveReq{}
	mi := &file_problem_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryObjectiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryObjectiveReq) ProtoMessage() {}

func (x *QueryObjectiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryObjectiveReq.ProtoReflect.Descriptor instead.
func (*QueryObjectiveReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{28}
}

func (x *QueryObjectiveReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QueryObjectiveReq) GetObjectiveID() int32 {
	if x != nil {
		return x.ObjectiveID
	}
	return 0
}

type Option struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OptionID      int32                  `protobuf:"varint,1,opt,name=optionID,proto3" json:"optionID,omitempty"` // 选项主键
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`    // 内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Option) Reset() {
	*x = Option{}
	mi := &file_problem_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{29}
}

func (x *Option) GetOptionID() int32 {
	if x != nil {
		return x.OptionID
	}
	return 0
}

func (x *Option) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Objective struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ObjectiveID   int32                  `protobuf:"varint,1,opt,name=objectiveID,proto3" json:"objectiveID,omitempty"`      // 客观题主键
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`               // 名称
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                     // 出题人
	Creator       string                 `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`               // 题目类型
	Answer        string                 `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`                 // 答案
	UpdateTime    string                 `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`         // 更新时间
	CreateTime    string                 `protobuf:"bytes,7,opt,name=createTime,proto3" json:"createTime,omitempty"`         // 创建时间
	Enable        int32                  `protobuf:"varint,8,opt,name=enable,proto3" json:"enable,omitempty"`                // 是否可用
	Options       []*Option              `protobuf:"bytes,9,rep,name=options,proto3" json:"options,omitempty"`               // 选项
	ObjectiveType int32                  `protobuf:"varint,10,opt,name=objectiveType,proto3" json:"objectiveType,omitempty"` // 客观题类型
	IsRight       int32                  `protobuf:"varint,11,opt,name=isRight,proto3" json:"isRight,omitempty"`             // 是否做对
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Objective) Reset() {
	*x = Objective{}
	mi := &file_problem_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Objective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Objective) ProtoMessage() {}

func (x *Objective) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Objective.ProtoReflect.Descriptor instead.
func (*Objective) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{30}
}

func (x *Objective) GetObjectiveID() int32 {
	if x != nil {
		return x.ObjectiveID
	}
	return 0
}

func (x *Objective) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Objective) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Objective) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Objective) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *Objective) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Objective) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Objective) GetEnable() int32 {
	if x != nil {
		return x.Enable
	}
	return 0
}

func (x *Objective) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Objective) GetObjectiveType() int32 {
	if x != nil {
		return x.ObjectiveType
	}
	return 0
}

func (x *Objective) GetIsRight() int32 {
	if x != nil {
		return x.IsRight
	}
	return 0
}

type QueryObjectiveRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`     // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`          // 返回码
	Objective     *Objective             `protobuf:"bytes,3,opt,name=objective,proto3" json:"objective,omitempty"` // 客观题
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryObjectiveRsp) Reset() {
	*x = QueryObjectiveRsp{}
	mi := &file_problem_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryObjectiveRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryObjectiveRsp) ProtoMessage() {}

func (x *QueryObjectiveRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryObjectiveRsp.ProtoReflect.Descriptor instead.
func (*QueryObjectiveRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{31}
}

func (x *QueryObjectiveRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryObjectiveRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryObjectiveRsp) GetObjective() *Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

type AddObjectiveReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`          // 内容
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                // 名称
	UserID        int32                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`           // 用户编号
	Answer        string                 `protobuf:"bytes,4,opt,name=answer,proto3" json:"answer,omitempty"`            // 答案
	Options       string                 `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`          // 选项
	ProblemType   int32                  `protobuf:"varint,6,opt,name=problemType,proto3" json:"problemType,omitempty"` // 题目类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddObjectiveReq) Reset() {
	*x = AddObjectiveReq{}
	mi := &file_problem_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddObjectiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddObjectiveReq) ProtoMessage() {}

func (x *AddObjectiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddObjectiveReq.ProtoReflect.Descriptor instead.
func (*AddObjectiveReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{32}
}

func (x *AddObjectiveReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddObjectiveReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddObjectiveReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *AddObjectiveReq) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *AddObjectiveReq) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *AddObjectiveReq) GetProblemType() int32 {
	if x != nil {
		return x.ProblemType
	}
	return 0
}

type UpdateObjectiveReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ObjectiveID   int32                  `protobuf:"varint,1,opt,name=objectiveID,proto3" json:"objectiveID,omitempty"` // 客观题主键
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`          // 内容
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                // 名称
	UserID        int32                  `protobuf:"varint,4,opt,name=userID,proto3" json:"userID,omitempty"`           // 用户编号
	Answer        string                 `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`            // 答案
	Options       string                 `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`          // 选项
	ProblemType   int32                  `protobuf:"varint,7,opt,name=problemType,proto3" json:"problemType,omitempty"` // 题目类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateObjectiveReq) Reset() {
	*x = UpdateObjectiveReq{}
	mi := &file_problem_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateObjectiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectiveReq) ProtoMessage() {}

func (x *UpdateObjectiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectiveReq.ProtoReflect.Descriptor instead.
func (*UpdateObjectiveReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateObjectiveReq) GetObjectiveID() int32 {
	if x != nil {
		return x.ObjectiveID
	}
	return 0
}

func (x *UpdateObjectiveReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateObjectiveReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateObjectiveReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateObjectiveReq) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *UpdateObjectiveReq) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *UpdateObjectiveReq) GetProblemType() int32 {
	if x != nil {
		return x.ProblemType
	}
	return 0
}

type UpdateObjectiveStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ObjectiveID   int32                  `protobuf:"varint,1,opt,name=objectiveID,proto3" json:"objectiveID,omitempty"` // 客观题主键
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`           // 用户编号
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`           // 状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateObjectiveStatusReq) Reset() {
	*x = UpdateObjectiveStatusReq{}
	mi := &file_problem_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateObjectiveStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectiveStatusReq) ProtoMessage() {}

func (x *UpdateObjectiveStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectiveStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateObjectiveStatusReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateObjectiveStatusReq) GetObjectiveID() int32 {
	if x != nil {
		return x.ObjectiveID
	}
	return 0
}

func (x *UpdateObjectiveStatusReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateObjectiveStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

var File_problem_proto protoreflect.FileDescriptor

var file_problem_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0xca, 0x03, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x53, 0x0a, 0x1b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x22, 0x2d, 0x0a,
	0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xab, 0x01, 0x0a,
	0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x31, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4e, 0x0a, 0x16, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0xb2, 0x01,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x22, 0x66, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6c, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x49, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x13, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4f, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x17,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x22, 0x6e, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x65, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0x6e, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x6a, 0x2e,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f,
	0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x91, 0x05, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x22, 0xa9, 0x03, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x22, 0x92, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f,
	0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x59, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x5f, 0x0a, 0x15, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x69, 0x0a, 0x15, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x11,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x44, 0x22, 0x3e, 0x0a, 0x06, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd3, 0x02, 0x0a, 0x09,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x76, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6c, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xa6, 0x09, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1b, 0x2e, 0x6f, 0x6a, 0x2e,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x12, 0x19, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x2e, 0x6f, 0x6a, 0x2e, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a,
	0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12,
	0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x56, 0x69, 0x73, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x23, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x62, 0x0a,
	0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x12, 0x22, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x32, 0xe6, 0x04, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e,
	0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1d, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x6a, 0x2e, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12,
	0x49, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x21, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x49, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x2e, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x73, 0x75, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_problem_proto_rawDescOnce sync.Once
	file_problem_proto_rawDescData = file_problem_proto_rawDesc
)

func file_problem_proto_rawDescGZIP() []byte {
	file_problem_proto_rawDescOnce.Do(func() {
		file_problem_proto_rawDescData = protoimpl.X.CompressGZIP(file_problem_proto_rawDescData)
	})
	return file_problem_proto_rawDescData
}

var file_problem_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_problem_proto_goTypes = []any{
	(*UpdateProblemReq)(nil),            // 0: oj.problem.UpdateProblemReq
	(*UpdateProblemVisitNumberReq)(nil), // 1: oj.problem.updateProblemVisitNumberReq
	(*QueryProblemNameReq)(nil),         // 2: oj.problem.QueryProblemNameReq
	(*QueryProblemListReq)(nil),         // 3: oj.problem.QueryProblemListReq
	(*QueryProblemListRsp)(nil),         // 4: oj.problem.QueryProblemListRsp
	(*QueryContestProblemReq)(nil),      // 5: oj.problem.QueryContestProblemReq
	(*QueryContestProblemReqRsp)(nil),   // 6: oj.problem.QueryContestProblemReqRsp
	(*ContestProblem)(nil),              // 7: oj.problem.ContestProblem
	(*UpdateProblemStatusReq)(nil),      // 8: oj.problem.UpdateProblemStatusReq
	(*DeleteProblemDataReq)(nil),        // 9: oj.problem.DeleteProblemDataReq
	(*UpdateProblemDataReq)(nil),        // 10: oj.problem.UpdateProblemDataReq
	(*CommonRsp)(nil),                   // 11: oj.problem.CommonRsp
	(*AddProblemDataReq)(nil),           // 12: oj.problem.AddProblemDataReq
	(*QueryProblemDataReq)(nil),         // 13: oj.problem.QueryProblemDataReq
	(*QueryProblemDataRsp)(nil),         // 14: oj.problem.QueryProblemDataRsp
	(*QueryProblemDataListReq)(nil),     // 15: oj.problem.QueryProblemDataListReq
	(*QueryProblemDataListRsp)(nil),     // 16: oj.problem.QueryProblemDataListRsp
	(*Sample)(nil),                      // 17: oj.problem.Sample
	(*QueryProblemReq)(nil),             // 18: oj.problem.QueryProblemReq
	(*QueryProblemRsp)(nil),             // 19: oj.problem.QueryProblemRsp
	(*ProblemList)(nil),                 // 20: oj.problem.ProblemList
	(*QueryAllProblemRsp)(nil),          // 21: oj.problem.QueryAllProblemRsp
	(*Problem)(nil),                     // 22: oj.problem.Problem
	(*AddProblemReq)(nil),               // 23: oj.problem.AddProblemReq
	(*QueryObjectiveListRsp)(nil),       // 24: oj.problem.QueryObjectiveListRsp
	(*QueryObjectiveListReq)(nil),       // 25: oj.problem.QueryObjectiveListReq
	(*IsCorrectObjectiveRsp)(nil),       // 26: oj.problem.IsCorrectObjectiveRsp
	(*IsCorrectObjectiveReq)(nil),       // 27: oj.problem.IsCorrectObjectiveReq
	(*QueryObjectiveReq)(nil),           // 28: oj.problem.QueryObjectiveReq
	(*Option)(nil),                      // 29: oj.problem.Option
	(*Objective)(nil),                   // 30: oj.problem.Objective
	(*QueryObjectiveRsp)(nil),           // 31: oj.problem.QueryObjectiveRsp
	(*AddObjectiveReq)(nil),             // 32: oj.problem.AddObjectiveReq
	(*UpdateObjectiveReq)(nil),          // 33: oj.problem.UpdateObjectiveReq
	(*UpdateObjectiveStatusReq)(nil),    // 34: oj.problem.UpdateObjectiveStatusReq
}
var file_problem_proto_depIdxs = []int32{
	20, // 0: oj.problem.QueryProblemListRsp.problem:type_name -> oj.problem.ProblemList
	7,  // 1: oj.problem.QueryContestProblemReqRsp.problems:type_name -> oj.problem.ContestProblem
	17, // 2: oj.problem.QueryProblemDataListRsp.sample:type_name -> oj.problem.Sample
	22, // 3: oj.problem.QueryProblemRsp.problem:type_name -> oj.problem.Problem
	22, // 4: oj.problem.QueryAllProblemRsp.problem:type_name -> oj.problem.Problem
	30, // 5: oj.problem.QueryObjectiveListRsp.objectives:type_name -> oj.problem.Objective
	29, // 6: oj.problem.Objective.options:type_name -> oj.problem.Option
	30, // 7: oj.problem.QueryObjectiveRsp.objective:type_name -> oj.problem.Objective
	18, // 8: oj.problem.ProblemServer.QueryProblem:input_type -> oj.problem.QueryProblemReq
	23, // 9: oj.problem.ProblemServer.AddProblem:input_type -> oj.problem.AddProblemReq
	0,  // 10: oj.problem.ProblemServer.UpdateProblem:input_type -> oj.problem.UpdateProblemReq
	8,  // 11: oj.problem.ProblemServer.UpdateProblemStatus:input_type -> oj.problem.UpdateProblemStatusReq
	3,  // 12: oj.problem.ProblemServer.QueryProblemList:input_type -> oj.problem.QueryProblemListReq
	3,  // 13: oj.problem.ProblemServer.QueryAllProblem:input_type -> oj.problem.QueryProblemListReq
	2,  // 14: oj.problem.ProblemServer.QueryProblemName:input_type -> oj.problem.QueryProblemNameReq
	1,  // 15: oj.problem.ProblemServer.UpdateProblemVisitNumber:input_type -> oj.problem.updateProblemVisitNumberReq
	15, // 16: oj.problem.ProblemServer.QueryProblemDataList:input_type -> oj.problem.QueryProblemDataListReq
	13, // 17: oj.problem.ProblemServer.QueryProblemData:input_type -> oj.problem.QueryProblemDataReq
	12, // 18: oj.problem.ProblemServer.AddProblemData:input_type -> oj.problem.AddProblemDataReq
	10, // 19: oj.problem.ProblemServer.UpdateProblemData:input_type -> oj.problem.UpdateProblemDataReq
	9,  // 20: oj.problem.ProblemServer.DeleteProblemData:input_type -> oj.problem.DeleteProblemDataReq
	5,  // 21: oj.problem.ProblemServer.QueryContestProblem:input_type -> oj.problem.QueryContestProblemReq
	32, // 22: oj.problem.ObjectiveServer.AddObjective:input_type -> oj.problem.AddObjectiveReq
	33, // 23: oj.problem.ObjectiveServer.UpdateObjective:input_type -> oj.problem.UpdateObjectiveReq
	34, // 24: oj.problem.ObjectiveServer.UpdateObjectiveStatus:input_type -> oj.problem.UpdateObjectiveStatusReq
	28, // 25: oj.problem.ObjectiveServer.QueryObjective:input_type -> oj.problem.QueryObjectiveReq
	25, // 26: oj.problem.ObjectiveServer.QueryAllObjective:input_type -> oj.problem.QueryObjectiveListReq
	25, // 27: oj.problem.ObjectiveServer.QueryObjectiveList:input_type -> oj.problem.QueryObjectiveListReq
	27, // 28: oj.problem.ObjectiveServer.IsCorrectObjective:input_type -> oj.problem.IsCorrectObjectiveReq
	19, // 29: oj.problem.ProblemServer.QueryProblem:output_type -> oj.problem.QueryProblemRsp
	11, // 30: oj.problem.ProblemServer.AddProblem:output_type -> oj.problem.CommonRsp
	11, // 31: oj.problem.ProblemServer.UpdateProblem:output_type -> oj.problem.CommonRsp
	11, // 32: oj.problem.ProblemServer.UpdateProblemStatus:output_type -> oj.problem.CommonRsp
	4,  // 33: oj.problem.ProblemServer.QueryProblemList:output_type -> oj.problem.QueryProblemListRsp
	21, // 34: oj.problem.ProblemServer.QueryAllProblem:output_type -> oj.problem.QueryAllProblemRsp
	21, // 35: oj.problem.ProblemServer.QueryProblemName:output_type -> oj.problem.QueryAllProblemRsp
	11, // 36: oj.problem.ProblemServer.UpdateProblemVisitNumber:output_type -> oj.problem.CommonRsp
	16, // 37: oj.problem.ProblemServer.QueryProblemDataList:output_type -> oj.problem.QueryProblemDataListRsp
	14, // 38: oj.problem.ProblemServer.QueryProblemData:output_type -> oj.problem.QueryProblemDataRsp
	11, // 39: oj.problem.ProblemServer.AddProblemData:output_type -> oj.problem.CommonRsp
	11, // 40: oj.problem.ProblemServer.UpdateProblemData:output_type -> oj.problem.CommonRsp
	11, // 41: oj.problem.ProblemServer.DeleteProblemData:output_type -> oj.problem.CommonRsp
	6,  // 42: oj.problem.ProblemServer.QueryContestProblem:output_type -> oj.problem.QueryContestProblemReqRsp
	11, // 43: oj.problem.ObjectiveServer.AddObjective:output_type -> oj.problem.CommonRsp
	11, // 44: oj.problem.ObjectiveServer.UpdateObjective:output_type -> oj.problem.CommonRsp
	11, // 45: oj.problem.ObjectiveServer.UpdateObjectiveStatus:output_type -> oj.problem.CommonRsp
	31, // 46: oj.problem.ObjectiveServer.QueryObjective:output_type -> oj.problem.QueryObjectiveRsp
	24, // 47: oj.problem.ObjectiveServer.QueryAllObjective:output_type -> oj.problem.QueryObjectiveListRsp
	24, // 48: oj.problem.ObjectiveServer.QueryObjectiveList:output_type -> oj.problem.QueryObjectiveListRsp
	26, // 49: oj.problem.ObjectiveServer.IsCorrectObjective:output_type -> oj.problem.IsCorrectObjectiveRsp
	29, // [29:50] is the sub-list for method output_type
	8,  // [8:29] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_problem_proto_init() }
func file_problem_proto_init() {
	if File_problem_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_problem_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_problem_proto_goTypes,
		DependencyIndexes: file_problem_proto_depIdxs,
		MessageInfos:      file_problem_proto_msgTypes,
	}.Build()
	File_problem_proto = out.File
	file_problem_proto_rawDesc = nil
	file_problem_proto_goTypes = nil
	file_problem_proto_depIdxs = nil
}
