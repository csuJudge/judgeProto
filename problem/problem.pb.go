// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.19.1
// source: problem.proto

package problem

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateProblemVisitNumberReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	ProblemID     int32                  `protobuf:"varint,2,opt,name=problemID,proto3" json:"problemID,omitempty"` // 问题编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProblemVisitNumberReq) Reset() {
	*x = UpdateProblemVisitNumberReq{}
	mi := &file_problem_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemVisitNumberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemVisitNumberReq) ProtoMessage() {}

func (x *UpdateProblemVisitNumberReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemVisitNumberReq.ProtoReflect.Descriptor instead.
func (*UpdateProblemVisitNumberReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateProblemVisitNumberReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateProblemVisitNumberReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

type QueryProblemNameReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemNameReq) Reset() {
	*x = QueryProblemNameReq{}
	mi := &file_problem_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemNameReq) ProtoMessage() {}

func (x *QueryProblemNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemNameReq.ProtoReflect.Descriptor instead.
func (*QueryProblemNameReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{1}
}

func (x *QueryProblemNameReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryProblemListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`     // 页
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`   // 页大小
	UserID        int32                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"` // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemListReq) Reset() {
	*x = QueryProblemListReq{}
	mi := &file_problem_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemListReq) ProtoMessage() {}

func (x *QueryProblemListReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemListReq.ProtoReflect.Descriptor instead.
func (*QueryProblemListReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{2}
}

func (x *QueryProblemListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryProblemListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryProblemListReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryProblemListRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Problem       []*Problem             `protobuf:"bytes,3,rep,name=problem,proto3" json:"problem,omitempty"` // 问题列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemListRsp) Reset() {
	*x = QueryProblemListRsp{}
	mi := &file_problem_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemListRsp) ProtoMessage() {}

func (x *QueryProblemListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemListRsp.ProtoReflect.Descriptor instead.
func (*QueryProblemListRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{3}
}

func (x *QueryProblemListRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryProblemListRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryProblemListRsp) GetProblem() []*Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

type QueryContestProblemReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestID     int32                  `protobuf:"varint,1,opt,name=contestID,proto3" json:"contestID,omitempty"` // 作业编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryContestProblemReq) Reset() {
	*x = QueryContestProblemReq{}
	mi := &file_problem_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryContestProblemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContestProblemReq) ProtoMessage() {}

func (x *QueryContestProblemReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContestProblemReq.ProtoReflect.Descriptor instead.
func (*QueryContestProblemReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{4}
}

func (x *QueryContestProblemReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

type QueryContestProblemReqRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`   // 返回信息
	Code          int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`        // 返回码
	Problems      []*ContestProblem      `protobuf:"bytes,3,rep,name=problems,proto3" json:"problems,omitempty"` //  作业的题目列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryContestProblemReqRsp) Reset() {
	*x = QueryContestProblemReqRsp{}
	mi := &file_problem_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryContestProblemReqRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContestProblemReqRsp) ProtoMessage() {}

func (x *QueryContestProblemReqRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContestProblemReqRsp.ProtoReflect.Descriptor instead.
func (*QueryContestProblemReqRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{5}
}

func (x *QueryContestProblemReqRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryContestProblemReqRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryContestProblemReqRsp) GetProblems() []*ContestProblem {
	if x != nil {
		return x.Problems
	}
	return nil
}

type ContestProblem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`    // 题目编号
	ProblemName   string                 `protobuf:"bytes,2,opt,name=problemName,proto3" json:"problemName,omitempty"` // 题目名称
	IsDone        int32                  `protobuf:"varint,3,opt,name=isDone,proto3" json:"isDone,omitempty"`          // 是否做完
	Solved        int32                  `protobuf:"varint,4,opt,name=solved,proto3" json:"solved,omitempty"`          // 解决
	Submission    int32                  `protobuf:"varint,5,opt,name=submission,proto3" json:"submission,omitempty"`  // 提交
	Difficulty    int32                  `protobuf:"varint,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`  // 难度
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContestProblem) Reset() {
	*x = ContestProblem{}
	mi := &file_problem_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContestProblem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestProblem) ProtoMessage() {}

func (x *ContestProblem) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestProblem.ProtoReflect.Descriptor instead.
func (*ContestProblem) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{6}
}

func (x *ContestProblem) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *ContestProblem) GetProblemName() string {
	if x != nil {
		return x.ProblemName
	}
	return ""
}

func (x *ContestProblem) GetIsDone() int32 {
	if x != nil {
		return x.IsDone
	}
	return 0
}

func (x *ContestProblem) GetSolved() int32 {
	if x != nil {
		return x.Solved
	}
	return 0
}

func (x *ContestProblem) GetSubmission() int32 {
	if x != nil {
		return x.Submission
	}
	return 0
}

func (x *ContestProblem) GetDifficulty() int32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

type UpdateProblemStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户主键
	ProblemID     int32                  `protobuf:"varint,2,opt,name=problemID,proto3" json:"problemID,omitempty"` // 题目主键
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`       // 状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProblemStatusReq) Reset() {
	*x = UpdateProblemStatusReq{}
	mi := &file_problem_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemStatusReq) ProtoMessage() {}

func (x *UpdateProblemStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateProblemStatusReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateProblemStatusReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdateProblemStatusReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *UpdateProblemStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type DeleteProblemDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`  // 问题编号
	SampleName    string                 `protobuf:"bytes,2,opt,name=sampleName,proto3" json:"sampleName,omitempty"` // 样例名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProblemDataReq) Reset() {
	*x = DeleteProblemDataReq{}
	mi := &file_problem_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProblemDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemDataReq) ProtoMessage() {}

func (x *DeleteProblemDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemDataReq.ProtoReflect.Descriptor instead.
func (*DeleteProblemDataReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteProblemDataReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *DeleteProblemDataReq) GetSampleName() string {
	if x != nil {
		return x.SampleName
	}
	return ""
}

type UpdateProblemDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`  // 问题编号
	SampleName    string                 `protobuf:"bytes,2,opt,name=sampleName,proto3" json:"sampleName,omitempty"` // 样例名
	Input         string                 `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`           // 输入
	Output        string                 `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`         // 输出
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProblemDataReq) Reset() {
	*x = UpdateProblemDataReq{}
	mi := &file_problem_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemDataReq) ProtoMessage() {}

func (x *UpdateProblemDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemDataReq.ProtoReflect.Descriptor instead.
func (*UpdateProblemDataReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateProblemDataReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *UpdateProblemDataReq) GetSampleName() string {
	if x != nil {
		return x.SampleName
	}
	return ""
}

func (x *UpdateProblemDataReq) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *UpdateProblemDataReq) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type CommonRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonRsp) Reset() {
	*x = CommonRsp{}
	mi := &file_problem_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRsp) ProtoMessage() {}

func (x *CommonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRsp.ProtoReflect.Descriptor instead.
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{10}
}

func (x *CommonRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

type AddProblemDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"` // 问题编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProblemDataReq) Reset() {
	*x = AddProblemDataReq{}
	mi := &file_problem_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProblemDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProblemDataReq) ProtoMessage() {}

func (x *AddProblemDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProblemDataReq.ProtoReflect.Descriptor instead.
func (*AddProblemDataReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{11}
}

func (x *AddProblemDataReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *AddProblemDataReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryProblemDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`  // 问题编号
	SampleName    string                 `protobuf:"bytes,2,opt,name=sampleName,proto3" json:"sampleName,omitempty"` // 样例名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemDataReq) Reset() {
	*x = QueryProblemDataReq{}
	mi := &file_problem_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemDataReq) ProtoMessage() {}

func (x *QueryProblemDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemDataReq.ProtoReflect.Descriptor instead.
func (*QueryProblemDataReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{12}
}

func (x *QueryProblemDataReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *QueryProblemDataReq) GetSampleName() string {
	if x != nil {
		return x.SampleName
	}
	return ""
}

type QueryProblemDataRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Input         string                 `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`     // 输入
	Output        string                 `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`   // 输出
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemDataRsp) Reset() {
	*x = QueryProblemDataRsp{}
	mi := &file_problem_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemDataRsp) ProtoMessage() {}

func (x *QueryProblemDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemDataRsp.ProtoReflect.Descriptor instead.
func (*QueryProblemDataRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{13}
}

func (x *QueryProblemDataRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryProblemDataRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryProblemDataRsp) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *QueryProblemDataRsp) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type QueryProblemDataListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"` // 问题编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemDataListReq) Reset() {
	*x = QueryProblemDataListReq{}
	mi := &file_problem_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemDataListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemDataListReq) ProtoMessage() {}

func (x *QueryProblemDataListReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemDataListReq.ProtoReflect.Descriptor instead.
func (*QueryProblemDataListReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{14}
}

func (x *QueryProblemDataListReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

type QueryProblemDataListRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Sample        []*Sample              `protobuf:"bytes,3,rep,name=sample,proto3" json:"sample,omitempty"`   // 样例列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemDataListRsp) Reset() {
	*x = QueryProblemDataListRsp{}
	mi := &file_problem_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemDataListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemDataListRsp) ProtoMessage() {}

func (x *QueryProblemDataListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemDataListRsp.ProtoReflect.Descriptor instead.
func (*QueryProblemDataListRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{15}
}

func (x *QueryProblemDataListRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryProblemDataListRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryProblemDataListRsp) GetSample() []*Sample {
	if x != nil {
		return x.Sample
	}
	return nil
}

type Sample struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SampleName    string                 `protobuf:"bytes,1,opt,name=sampleName,proto3" json:"sampleName,omitempty"`     // 样例名称
	SampleInput   string                 `protobuf:"bytes,2,opt,name=sampleInput,proto3" json:"sampleInput,omitempty"`   // 样例输入
	SampleOutput  string                 `protobuf:"bytes,3,opt,name=sampleOutput,proto3" json:"sampleOutput,omitempty"` // 样例输出
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sample) Reset() {
	*x = Sample{}
	mi := &file_problem_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{16}
}

func (x *Sample) GetSampleName() string {
	if x != nil {
		return x.SampleName
	}
	return ""
}

func (x *Sample) GetSampleInput() string {
	if x != nil {
		return x.SampleInput
	}
	return ""
}

func (x *Sample) GetSampleOutput() string {
	if x != nil {
		return x.SampleOutput
	}
	return ""
}

type QueryProblemReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"` // 问题编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	ContestID     int32                  `protobuf:"varint,3,opt,name=contestID,proto3" json:"contestID,omitempty"` // 作业编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemReq) Reset() {
	*x = QueryProblemReq{}
	mi := &file_problem_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemReq) ProtoMessage() {}

func (x *QueryProblemReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemReq.ProtoReflect.Descriptor instead.
func (*QueryProblemReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{17}
}

func (x *QueryProblemReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *QueryProblemReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QueryProblemReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

type QueryProblemRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Problem       *Problem               `protobuf:"bytes,3,opt,name=problem,proto3" json:"problem,omitempty"` // 问题
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProblemRsp) Reset() {
	*x = QueryProblemRsp{}
	mi := &file_problem_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProblemRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProblemRsp) ProtoMessage() {}

func (x *QueryProblemRsp) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProblemRsp.ProtoReflect.Descriptor instead.
func (*QueryProblemRsp) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{18}
}

func (x *QueryProblemRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryProblemRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryProblemRsp) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

type Problem struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProblemID          int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`
	ProblemName        string                 `protobuf:"bytes,2,opt,name=ProblemName,proto3" json:"ProblemName,omitempty"`
	ProblemDescription string                 `protobuf:"bytes,3,opt,name=ProblemDescription,proto3" json:"ProblemDescription,omitempty"`
	ProblemHint        string                 `protobuf:"bytes,4,opt,name=ProblemHint,proto3" json:"ProblemHint,omitempty"`
	Solved             int32                  `protobuf:"varint,5,opt,name=Solved,proto3" json:"Solved,omitempty"`
	Submission         int32                  `protobuf:"varint,6,opt,name=Submission,proto3" json:"Submission,omitempty"`
	InputDescription   string                 `protobuf:"bytes,7,opt,name=InputDescription,proto3" json:"InputDescription,omitempty"`
	OutputDescription  string                 `protobuf:"bytes,8,opt,name=OutputDescription,proto3" json:"OutputDescription,omitempty"`
	ProblemInput       string                 `protobuf:"bytes,9,opt,name=ProblemInput,proto3" json:"ProblemInput,omitempty"`
	ProblemOutput      string                 `protobuf:"bytes,10,opt,name=ProblemOutput,proto3" json:"ProblemOutput,omitempty"`
	TimeLimit          int32                  `protobuf:"varint,11,opt,name=TimeLimit,proto3" json:"TimeLimit,omitempty"`
	MemoryLimit        int32                  `protobuf:"varint,12,opt,name=MemoryLimit,proto3" json:"MemoryLimit,omitempty"`
	Knowledges         string                 `protobuf:"bytes,13,opt,name=Knowledges,proto3" json:"Knowledges,omitempty"`
	Enable             int32                  `protobuf:"varint,14,opt,name=Enable,proto3" json:"Enable,omitempty"`
	Difficulty         int32                  `protobuf:"varint,15,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	IsDone             int32                  `protobuf:"varint,16,opt,name=isDone,proto3" json:"isDone,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Problem) Reset() {
	*x = Problem{}
	mi := &file_problem_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{19}
}

func (x *Problem) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *Problem) GetProblemName() string {
	if x != nil {
		return x.ProblemName
	}
	return ""
}

func (x *Problem) GetProblemDescription() string {
	if x != nil {
		return x.ProblemDescription
	}
	return ""
}

func (x *Problem) GetProblemHint() string {
	if x != nil {
		return x.ProblemHint
	}
	return ""
}

func (x *Problem) GetSolved() int32 {
	if x != nil {
		return x.Solved
	}
	return 0
}

func (x *Problem) GetSubmission() int32 {
	if x != nil {
		return x.Submission
	}
	return 0
}

func (x *Problem) GetInputDescription() string {
	if x != nil {
		return x.InputDescription
	}
	return ""
}

func (x *Problem) GetOutputDescription() string {
	if x != nil {
		return x.OutputDescription
	}
	return ""
}

func (x *Problem) GetProblemInput() string {
	if x != nil {
		return x.ProblemInput
	}
	return ""
}

func (x *Problem) GetProblemOutput() string {
	if x != nil {
		return x.ProblemOutput
	}
	return ""
}

func (x *Problem) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *Problem) GetMemoryLimit() int32 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *Problem) GetKnowledges() string {
	if x != nil {
		return x.Knowledges
	}
	return ""
}

func (x *Problem) GetEnable() int32 {
	if x != nil {
		return x.Enable
	}
	return 0
}

func (x *Problem) GetDifficulty() int32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *Problem) GetIsDone() int32 {
	if x != nil {
		return x.IsDone
	}
	return 0
}

type AddProblemReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Problem       *Problem               `protobuf:"bytes,2,opt,name=problem,proto3" json:"problem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProblemReq) Reset() {
	*x = AddProblemReq{}
	mi := &file_problem_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProblemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProblemReq) ProtoMessage() {}

func (x *AddProblemReq) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProblemReq.ProtoReflect.Descriptor instead.
func (*AddProblemReq) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{20}
}

func (x *AddProblemReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *AddProblemReq) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

var File_problem_proto protoreflect.FileDescriptor

var file_problem_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0x53, 0x0a, 0x1b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x56, 0x69, 0x73, 0x69,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44,
	0x22, 0x2d, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x57, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x72, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0x36, 0x0a, 0x16,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0x66, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x54, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x39,
	0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x13, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x37, 0x0a, 0x17,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x6e, 0x0a, 0x06, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x65, 0x0a, 0x0f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x22, 0x6e, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x22, 0xa7, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x48, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x48, 0x69, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0x56, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x32, 0x89, 0x08, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1b, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12,
	0x19, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x41, 0x64, 0x64,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a, 0x2e,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x6f, 0x6a, 0x2e,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x6f, 0x6a,
	0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f,
	0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f,
	0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e,
	0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x2e,
	0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x12, 0x22, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42,
	0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x73,
	0x75, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_problem_proto_rawDescOnce sync.Once
	file_problem_proto_rawDescData = file_problem_proto_rawDesc
)

func file_problem_proto_rawDescGZIP() []byte {
	file_problem_proto_rawDescOnce.Do(func() {
		file_problem_proto_rawDescData = protoimpl.X.CompressGZIP(file_problem_proto_rawDescData)
	})
	return file_problem_proto_rawDescData
}

var file_problem_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_problem_proto_goTypes = []any{
	(*UpdateProblemVisitNumberReq)(nil), // 0: oj.problem.updateProblemVisitNumberReq
	(*QueryProblemNameReq)(nil),         // 1: oj.problem.QueryProblemNameReq
	(*QueryProblemListReq)(nil),         // 2: oj.problem.QueryProblemListReq
	(*QueryProblemListRsp)(nil),         // 3: oj.problem.QueryProblemListRsp
	(*QueryContestProblemReq)(nil),      // 4: oj.problem.QueryContestProblemReq
	(*QueryContestProblemReqRsp)(nil),   // 5: oj.problem.QueryContestProblemReqRsp
	(*ContestProblem)(nil),              // 6: oj.problem.ContestProblem
	(*UpdateProblemStatusReq)(nil),      // 7: oj.problem.UpdateProblemStatusReq
	(*DeleteProblemDataReq)(nil),        // 8: oj.problem.DeleteProblemDataReq
	(*UpdateProblemDataReq)(nil),        // 9: oj.problem.UpdateProblemDataReq
	(*CommonRsp)(nil),                   // 10: oj.problem.CommonRsp
	(*AddProblemDataReq)(nil),           // 11: oj.problem.AddProblemDataReq
	(*QueryProblemDataReq)(nil),         // 12: oj.problem.QueryProblemDataReq
	(*QueryProblemDataRsp)(nil),         // 13: oj.problem.QueryProblemDataRsp
	(*QueryProblemDataListReq)(nil),     // 14: oj.problem.QueryProblemDataListReq
	(*QueryProblemDataListRsp)(nil),     // 15: oj.problem.QueryProblemDataListRsp
	(*Sample)(nil),                      // 16: oj.problem.Sample
	(*QueryProblemReq)(nil),             // 17: oj.problem.QueryProblemReq
	(*QueryProblemRsp)(nil),             // 18: oj.problem.QueryProblemRsp
	(*Problem)(nil),                     // 19: oj.problem.Problem
	(*AddProblemReq)(nil),               // 20: oj.problem.AddProblemReq
}
var file_problem_proto_depIdxs = []int32{
	19, // 0: oj.problem.QueryProblemListRsp.problem:type_name -> oj.problem.Problem
	6,  // 1: oj.problem.QueryContestProblemReqRsp.problems:type_name -> oj.problem.ContestProblem
	16, // 2: oj.problem.QueryProblemDataListRsp.sample:type_name -> oj.problem.Sample
	19, // 3: oj.problem.QueryProblemRsp.problem:type_name -> oj.problem.Problem
	19, // 4: oj.problem.AddProblemReq.problem:type_name -> oj.problem.Problem
	17, // 5: oj.problem.ProblemServer.QueryProblem:input_type -> oj.problem.QueryProblemReq
	20, // 6: oj.problem.ProblemServer.AddProblem:input_type -> oj.problem.AddProblemReq
	7,  // 7: oj.problem.ProblemServer.UpdateProblemStatus:input_type -> oj.problem.UpdateProblemStatusReq
	2,  // 8: oj.problem.ProblemServer.QueryProblemList:input_type -> oj.problem.QueryProblemListReq
	1,  // 9: oj.problem.ProblemServer.QueryProblemName:input_type -> oj.problem.QueryProblemNameReq
	0,  // 10: oj.problem.ProblemServer.updateProblemVisitNumber:input_type -> oj.problem.updateProblemVisitNumberReq
	14, // 11: oj.problem.ProblemServer.QueryProblemDataList:input_type -> oj.problem.QueryProblemDataListReq
	12, // 12: oj.problem.ProblemServer.QueryProblemData:input_type -> oj.problem.QueryProblemDataReq
	11, // 13: oj.problem.ProblemServer.AddProblemData:input_type -> oj.problem.AddProblemDataReq
	9,  // 14: oj.problem.ProblemServer.UpdateProblemData:input_type -> oj.problem.UpdateProblemDataReq
	8,  // 15: oj.problem.ProblemServer.DeleteProblemData:input_type -> oj.problem.DeleteProblemDataReq
	4,  // 16: oj.problem.ProblemServer.QueryContestProblem:input_type -> oj.problem.QueryContestProblemReq
	18, // 17: oj.problem.ProblemServer.QueryProblem:output_type -> oj.problem.QueryProblemRsp
	10, // 18: oj.problem.ProblemServer.AddProblem:output_type -> oj.problem.CommonRsp
	10, // 19: oj.problem.ProblemServer.UpdateProblemStatus:output_type -> oj.problem.CommonRsp
	3,  // 20: oj.problem.ProblemServer.QueryProblemList:output_type -> oj.problem.QueryProblemListRsp
	3,  // 21: oj.problem.ProblemServer.QueryProblemName:output_type -> oj.problem.QueryProblemListRsp
	10, // 22: oj.problem.ProblemServer.updateProblemVisitNumber:output_type -> oj.problem.CommonRsp
	15, // 23: oj.problem.ProblemServer.QueryProblemDataList:output_type -> oj.problem.QueryProblemDataListRsp
	13, // 24: oj.problem.ProblemServer.QueryProblemData:output_type -> oj.problem.QueryProblemDataRsp
	10, // 25: oj.problem.ProblemServer.AddProblemData:output_type -> oj.problem.CommonRsp
	10, // 26: oj.problem.ProblemServer.UpdateProblemData:output_type -> oj.problem.CommonRsp
	10, // 27: oj.problem.ProblemServer.DeleteProblemData:output_type -> oj.problem.CommonRsp
	5,  // 28: oj.problem.ProblemServer.QueryContestProblem:output_type -> oj.problem.QueryContestProblemReqRsp
	17, // [17:29] is the sub-list for method output_type
	5,  // [5:17] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_problem_proto_init() }
func file_problem_proto_init() {
	if File_problem_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_problem_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_problem_proto_goTypes,
		DependencyIndexes: file_problem_proto_depIdxs,
		MessageInfos:      file_problem_proto_msgTypes,
	}.Build()
	File_problem_proto = out.File
	file_problem_proto_rawDesc = nil
	file_problem_proto_goTypes = nil
	file_problem_proto_depIdxs = nil
}
