// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: problem.proto

package problem

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// ProblemServerService defines service.
type ProblemServerService interface {
	// QueryProblem QueryProblem 查询题目
	QueryProblem(ctx context.Context, req *QueryProblemReq) (*QueryProblemRsp, error)
	// AddProblem AddProblem 添加题目
	AddProblem(ctx context.Context, req *AddProblemReq) (*CommonRsp, error)
	// UpdateProblem UpdateProblem 更新题目
	UpdateProblem(ctx context.Context, req *UpdateProblemReq) (*CommonRsp, error)
	// UpdateProblemStatus UpdateProblemStatus 更新题目状态
	UpdateProblemStatus(ctx context.Context, req *UpdateProblemStatusReq) (*CommonRsp, error)
	// QueryProblemList QueryProblemList 查询题目列表
	QueryProblemList(ctx context.Context, req *QueryProblemListReq) (*QueryProblemListRsp, error)
	// QueryAllProblem QueryAllProblem 查询所有题目列表
	QueryAllProblem(ctx context.Context, req *QueryProblemListReq) (*QueryAllProblemRsp, error)
	// QueryProblemName QueryProblemName 查询题目名称
	QueryProblemName(ctx context.Context, req *QueryProblemNameReq) (*QueryAllProblemRsp, error)
	// UpdateProblemVisitNumber UpdateProblemVisitNumber 更新题目访问数据
	UpdateProblemVisitNumber(ctx context.Context, req *UpdateProblemVisitNumberReq) (*CommonRsp, error)
	// QueryProblemDataList QueryProblemDataList 查询题目样例
	QueryProblemDataList(ctx context.Context, req *QueryProblemDataListReq) (*QueryProblemDataListRsp, error)
	// QueryProblemData QueryProblemData 查询题目样例数据
	QueryProblemData(ctx context.Context, req *QueryProblemDataReq) (*QueryProblemDataRsp, error)
	// AddProblemData AddProblemData 添加题目样例数据
	AddProblemData(ctx context.Context, req *AddProblemDataReq) (*CommonRsp, error)
	// UpdateProblemData UpdateProblemData 更新题目样例数据
	UpdateProblemData(ctx context.Context, req *UpdateProblemDataReq) (*CommonRsp, error)
	// DeleteProblemData DeleteProblemData 删除题目样例数据
	DeleteProblemData(ctx context.Context, req *DeleteProblemDataReq) (*CommonRsp, error)
	// QueryContestProblem QueryContestProblem 查询作业的题目数据
	QueryContestProblem(ctx context.Context, req *QueryContestProblemReq) (*QueryContestProblemReqRsp, error)
}

func ProblemServerService_QueryProblem_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryProblemReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).QueryProblem(ctx, reqbody.(*QueryProblemReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ProblemServerService_AddProblem_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddProblemReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).AddProblem(ctx, reqbody.(*AddProblemReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ProblemServerService_UpdateProblem_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateProblemReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).UpdateProblem(ctx, reqbody.(*UpdateProblemReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ProblemServerService_UpdateProblemStatus_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateProblemStatusReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).UpdateProblemStatus(ctx, reqbody.(*UpdateProblemStatusReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ProblemServerService_QueryProblemList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryProblemListReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).QueryProblemList(ctx, reqbody.(*QueryProblemListReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ProblemServerService_QueryAllProblem_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryProblemListReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).QueryAllProblem(ctx, reqbody.(*QueryProblemListReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ProblemServerService_QueryProblemName_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryProblemNameReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).QueryProblemName(ctx, reqbody.(*QueryProblemNameReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ProblemServerService_UpdateProblemVisitNumber_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateProblemVisitNumberReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).UpdateProblemVisitNumber(ctx, reqbody.(*UpdateProblemVisitNumberReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ProblemServerService_QueryProblemDataList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryProblemDataListReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).QueryProblemDataList(ctx, reqbody.(*QueryProblemDataListReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ProblemServerService_QueryProblemData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryProblemDataReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).QueryProblemData(ctx, reqbody.(*QueryProblemDataReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ProblemServerService_AddProblemData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddProblemDataReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).AddProblemData(ctx, reqbody.(*AddProblemDataReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ProblemServerService_UpdateProblemData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateProblemDataReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).UpdateProblemData(ctx, reqbody.(*UpdateProblemDataReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ProblemServerService_DeleteProblemData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DeleteProblemDataReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).DeleteProblemData(ctx, reqbody.(*DeleteProblemDataReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ProblemServerService_QueryContestProblem_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryContestProblemReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ProblemServerService).QueryContestProblem(ctx, reqbody.(*QueryContestProblemReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// ProblemServerServer_ServiceDesc descriptor for server.RegisterService.
var ProblemServerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "oj.problem.ProblemServer",
	HandlerType: ((*ProblemServerService)(nil)),
	Methods: []server.Method{
		{
			Name: "/oj.problem.ProblemServer/QueryProblem",
			Func: ProblemServerService_QueryProblem_Handler,
		},
		{
			Name: "/oj.problem.ProblemServer/AddProblem",
			Func: ProblemServerService_AddProblem_Handler,
		},
		{
			Name: "/oj.problem.ProblemServer/UpdateProblem",
			Func: ProblemServerService_UpdateProblem_Handler,
		},
		{
			Name: "/oj.problem.ProblemServer/UpdateProblemStatus",
			Func: ProblemServerService_UpdateProblemStatus_Handler,
		},
		{
			Name: "/oj.problem.ProblemServer/QueryProblemList",
			Func: ProblemServerService_QueryProblemList_Handler,
		},
		{
			Name: "/oj.problem.ProblemServer/QueryAllProblem",
			Func: ProblemServerService_QueryAllProblem_Handler,
		},
		{
			Name: "/oj.problem.ProblemServer/QueryProblemName",
			Func: ProblemServerService_QueryProblemName_Handler,
		},
		{
			Name: "/oj.problem.ProblemServer/UpdateProblemVisitNumber",
			Func: ProblemServerService_UpdateProblemVisitNumber_Handler,
		},
		{
			Name: "/oj.problem.ProblemServer/QueryProblemDataList",
			Func: ProblemServerService_QueryProblemDataList_Handler,
		},
		{
			Name: "/oj.problem.ProblemServer/QueryProblemData",
			Func: ProblemServerService_QueryProblemData_Handler,
		},
		{
			Name: "/oj.problem.ProblemServer/AddProblemData",
			Func: ProblemServerService_AddProblemData_Handler,
		},
		{
			Name: "/oj.problem.ProblemServer/UpdateProblemData",
			Func: ProblemServerService_UpdateProblemData_Handler,
		},
		{
			Name: "/oj.problem.ProblemServer/DeleteProblemData",
			Func: ProblemServerService_DeleteProblemData_Handler,
		},
		{
			Name: "/oj.problem.ProblemServer/QueryContestProblem",
			Func: ProblemServerService_QueryContestProblem_Handler,
		},
	},
}

// RegisterProblemServerService registers service.
func RegisterProblemServerService(s server.Service, svr ProblemServerService) {
	if err := s.Register(&ProblemServerServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("ProblemServer register error:%v", err))
	}
}

// ObjectiveServerService defines service.
type ObjectiveServerService interface {
	// AddObjective AddObjective 添加客观题
	AddObjective(ctx context.Context, req *AddObjectiveReq) (*CommonRsp, error)
	// UpdateObjective UpdateObjective 更新客观题
	UpdateObjective(ctx context.Context, req *UpdateObjectiveReq) (*CommonRsp, error)
	// UpdateObjectiveStatus UpdateObjectiveStatus 更新客观题状态
	UpdateObjectiveStatus(ctx context.Context, req *UpdateObjectiveStatusReq) (*CommonRsp, error)
	// QueryObjective QueryObjective 查询客观题
	QueryObjective(ctx context.Context, req *QueryObjectiveReq) (*QueryObjectiveRsp, error)
	// QueryAllObjective QueryAllObjective 查询客观题
	QueryAllObjective(ctx context.Context, req *QueryObjectiveListReq) (*QueryObjectiveListRsp, error)
	// QueryObjectiveList QueryObjectiveList 分页查询客观题
	QueryObjectiveList(ctx context.Context, req *QueryObjectiveListReq) (*QueryObjectiveListRsp, error)
	// IsCorrectObjective IsCorrectObjective 是否客观题错误
	IsCorrectObjective(ctx context.Context, req *IsCorrectObjectiveReq) (*IsCorrectObjectiveRsp, error)
}

func ObjectiveServerService_AddObjective_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddObjectiveReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ObjectiveServerService).AddObjective(ctx, reqbody.(*AddObjectiveReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ObjectiveServerService_UpdateObjective_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateObjectiveReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ObjectiveServerService).UpdateObjective(ctx, reqbody.(*UpdateObjectiveReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ObjectiveServerService_UpdateObjectiveStatus_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateObjectiveStatusReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ObjectiveServerService).UpdateObjectiveStatus(ctx, reqbody.(*UpdateObjectiveStatusReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ObjectiveServerService_QueryObjective_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryObjectiveReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ObjectiveServerService).QueryObjective(ctx, reqbody.(*QueryObjectiveReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ObjectiveServerService_QueryAllObjective_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryObjectiveListReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ObjectiveServerService).QueryAllObjective(ctx, reqbody.(*QueryObjectiveListReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ObjectiveServerService_QueryObjectiveList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryObjectiveListReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ObjectiveServerService).QueryObjectiveList(ctx, reqbody.(*QueryObjectiveListReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func ObjectiveServerService_IsCorrectObjective_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &IsCorrectObjectiveReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ObjectiveServerService).IsCorrectObjective(ctx, reqbody.(*IsCorrectObjectiveReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// ObjectiveServerServer_ServiceDesc descriptor for server.RegisterService.
var ObjectiveServerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "oj.problem.ObjectiveServer",
	HandlerType: ((*ObjectiveServerService)(nil)),
	Methods: []server.Method{
		{
			Name: "/oj.problem.ObjectiveServer/AddObjective",
			Func: ObjectiveServerService_AddObjective_Handler,
		},
		{
			Name: "/oj.problem.ObjectiveServer/UpdateObjective",
			Func: ObjectiveServerService_UpdateObjective_Handler,
		},
		{
			Name: "/oj.problem.ObjectiveServer/UpdateObjectiveStatus",
			Func: ObjectiveServerService_UpdateObjectiveStatus_Handler,
		},
		{
			Name: "/oj.problem.ObjectiveServer/QueryObjective",
			Func: ObjectiveServerService_QueryObjective_Handler,
		},
		{
			Name: "/oj.problem.ObjectiveServer/QueryAllObjective",
			Func: ObjectiveServerService_QueryAllObjective_Handler,
		},
		{
			Name: "/oj.problem.ObjectiveServer/QueryObjectiveList",
			Func: ObjectiveServerService_QueryObjectiveList_Handler,
		},
		{
			Name: "/oj.problem.ObjectiveServer/IsCorrectObjective",
			Func: ObjectiveServerService_IsCorrectObjective_Handler,
		},
	},
}

// RegisterObjectiveServerService registers service.
func RegisterObjectiveServerService(s server.Service, svr ObjectiveServerService) {
	if err := s.Register(&ObjectiveServerServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("ObjectiveServer register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedProblemServer struct{}

// QueryProblem QueryProblem 查询题目
func (s *UnimplementedProblemServer) QueryProblem(ctx context.Context, req *QueryProblemReq) (*QueryProblemRsp, error) {
	return nil, errors.New("rpc QueryProblem of service ProblemServer is not implemented")
}

// AddProblem AddProblem 添加题目
func (s *UnimplementedProblemServer) AddProblem(ctx context.Context, req *AddProblemReq) (*CommonRsp, error) {
	return nil, errors.New("rpc AddProblem of service ProblemServer is not implemented")
}

// UpdateProblem UpdateProblem 更新题目
func (s *UnimplementedProblemServer) UpdateProblem(ctx context.Context, req *UpdateProblemReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateProblem of service ProblemServer is not implemented")
}

// UpdateProblemStatus UpdateProblemStatus 更新题目状态
func (s *UnimplementedProblemServer) UpdateProblemStatus(ctx context.Context, req *UpdateProblemStatusReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateProblemStatus of service ProblemServer is not implemented")
}

// QueryProblemList QueryProblemList 查询题目列表
func (s *UnimplementedProblemServer) QueryProblemList(ctx context.Context, req *QueryProblemListReq) (*QueryProblemListRsp, error) {
	return nil, errors.New("rpc QueryProblemList of service ProblemServer is not implemented")
}

// QueryAllProblem QueryAllProblem 查询所有题目列表
func (s *UnimplementedProblemServer) QueryAllProblem(ctx context.Context, req *QueryProblemListReq) (*QueryAllProblemRsp, error) {
	return nil, errors.New("rpc QueryAllProblem of service ProblemServer is not implemented")
}

// QueryProblemName QueryProblemName 查询题目名称
func (s *UnimplementedProblemServer) QueryProblemName(ctx context.Context, req *QueryProblemNameReq) (*QueryAllProblemRsp, error) {
	return nil, errors.New("rpc QueryProblemName of service ProblemServer is not implemented")
}

// UpdateProblemVisitNumber UpdateProblemVisitNumber 更新题目访问数据
func (s *UnimplementedProblemServer) UpdateProblemVisitNumber(ctx context.Context, req *UpdateProblemVisitNumberReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateProblemVisitNumber of service ProblemServer is not implemented")
}

// QueryProblemDataList QueryProblemDataList 查询题目样例
func (s *UnimplementedProblemServer) QueryProblemDataList(ctx context.Context, req *QueryProblemDataListReq) (*QueryProblemDataListRsp, error) {
	return nil, errors.New("rpc QueryProblemDataList of service ProblemServer is not implemented")
}

// QueryProblemData QueryProblemData 查询题目样例数据
func (s *UnimplementedProblemServer) QueryProblemData(ctx context.Context, req *QueryProblemDataReq) (*QueryProblemDataRsp, error) {
	return nil, errors.New("rpc QueryProblemData of service ProblemServer is not implemented")
}

// AddProblemData AddProblemData 添加题目样例数据
func (s *UnimplementedProblemServer) AddProblemData(ctx context.Context, req *AddProblemDataReq) (*CommonRsp, error) {
	return nil, errors.New("rpc AddProblemData of service ProblemServer is not implemented")
}

// UpdateProblemData UpdateProblemData 更新题目样例数据
func (s *UnimplementedProblemServer) UpdateProblemData(ctx context.Context, req *UpdateProblemDataReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateProblemData of service ProblemServer is not implemented")
}

// DeleteProblemData DeleteProblemData 删除题目样例数据
func (s *UnimplementedProblemServer) DeleteProblemData(ctx context.Context, req *DeleteProblemDataReq) (*CommonRsp, error) {
	return nil, errors.New("rpc DeleteProblemData of service ProblemServer is not implemented")
}

// QueryContestProblem QueryContestProblem 查询作业的题目数据
func (s *UnimplementedProblemServer) QueryContestProblem(ctx context.Context, req *QueryContestProblemReq) (*QueryContestProblemReqRsp, error) {
	return nil, errors.New("rpc QueryContestProblem of service ProblemServer is not implemented")
}

type UnimplementedObjectiveServer struct{}

// AddObjective AddObjective 添加客观题
func (s *UnimplementedObjectiveServer) AddObjective(ctx context.Context, req *AddObjectiveReq) (*CommonRsp, error) {
	return nil, errors.New("rpc AddObjective of service ObjectiveServer is not implemented")
}

// UpdateObjective UpdateObjective 更新客观题
func (s *UnimplementedObjectiveServer) UpdateObjective(ctx context.Context, req *UpdateObjectiveReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateObjective of service ObjectiveServer is not implemented")
}

// UpdateObjectiveStatus UpdateObjectiveStatus 更新客观题状态
func (s *UnimplementedObjectiveServer) UpdateObjectiveStatus(ctx context.Context, req *UpdateObjectiveStatusReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateObjectiveStatus of service ObjectiveServer is not implemented")
}

// QueryObjective QueryObjective 查询客观题
func (s *UnimplementedObjectiveServer) QueryObjective(ctx context.Context, req *QueryObjectiveReq) (*QueryObjectiveRsp, error) {
	return nil, errors.New("rpc QueryObjective of service ObjectiveServer is not implemented")
}

// QueryAllObjective QueryAllObjective 查询客观题
func (s *UnimplementedObjectiveServer) QueryAllObjective(ctx context.Context, req *QueryObjectiveListReq) (*QueryObjectiveListRsp, error) {
	return nil, errors.New("rpc QueryAllObjective of service ObjectiveServer is not implemented")
}

// QueryObjectiveList QueryObjectiveList 分页查询客观题
func (s *UnimplementedObjectiveServer) QueryObjectiveList(ctx context.Context, req *QueryObjectiveListReq) (*QueryObjectiveListRsp, error) {
	return nil, errors.New("rpc QueryObjectiveList of service ObjectiveServer is not implemented")
}

// IsCorrectObjective IsCorrectObjective 是否客观题错误
func (s *UnimplementedObjectiveServer) IsCorrectObjective(ctx context.Context, req *IsCorrectObjectiveReq) (*IsCorrectObjectiveRsp, error) {
	return nil, errors.New("rpc IsCorrectObjective of service ObjectiveServer is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// ProblemServerClientProxy defines service client proxy
type ProblemServerClientProxy interface {
	// QueryProblem QueryProblem 查询题目
	QueryProblem(ctx context.Context, req *QueryProblemReq, opts ...client.Option) (rsp *QueryProblemRsp, err error)
	// AddProblem AddProblem 添加题目
	AddProblem(ctx context.Context, req *AddProblemReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateProblem UpdateProblem 更新题目
	UpdateProblem(ctx context.Context, req *UpdateProblemReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateProblemStatus UpdateProblemStatus 更新题目状态
	UpdateProblemStatus(ctx context.Context, req *UpdateProblemStatusReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QueryProblemList QueryProblemList 查询题目列表
	QueryProblemList(ctx context.Context, req *QueryProblemListReq, opts ...client.Option) (rsp *QueryProblemListRsp, err error)
	// QueryAllProblem QueryAllProblem 查询所有题目列表
	QueryAllProblem(ctx context.Context, req *QueryProblemListReq, opts ...client.Option) (rsp *QueryAllProblemRsp, err error)
	// QueryProblemName QueryProblemName 查询题目名称
	QueryProblemName(ctx context.Context, req *QueryProblemNameReq, opts ...client.Option) (rsp *QueryAllProblemRsp, err error)
	// UpdateProblemVisitNumber UpdateProblemVisitNumber 更新题目访问数据
	UpdateProblemVisitNumber(ctx context.Context, req *UpdateProblemVisitNumberReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QueryProblemDataList QueryProblemDataList 查询题目样例
	QueryProblemDataList(ctx context.Context, req *QueryProblemDataListReq, opts ...client.Option) (rsp *QueryProblemDataListRsp, err error)
	// QueryProblemData QueryProblemData 查询题目样例数据
	QueryProblemData(ctx context.Context, req *QueryProblemDataReq, opts ...client.Option) (rsp *QueryProblemDataRsp, err error)
	// AddProblemData AddProblemData 添加题目样例数据
	AddProblemData(ctx context.Context, req *AddProblemDataReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateProblemData UpdateProblemData 更新题目样例数据
	UpdateProblemData(ctx context.Context, req *UpdateProblemDataReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// DeleteProblemData DeleteProblemData 删除题目样例数据
	DeleteProblemData(ctx context.Context, req *DeleteProblemDataReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QueryContestProblem QueryContestProblem 查询作业的题目数据
	QueryContestProblem(ctx context.Context, req *QueryContestProblemReq, opts ...client.Option) (rsp *QueryContestProblemReqRsp, err error)
}

type ProblemServerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewProblemServerClientProxy = func(opts ...client.Option) ProblemServerClientProxy {
	return &ProblemServerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *ProblemServerClientProxyImpl) QueryProblem(ctx context.Context, req *QueryProblemReq, opts ...client.Option) (*QueryProblemRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/QueryProblem")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("QueryProblem")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryProblemRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ProblemServerClientProxyImpl) AddProblem(ctx context.Context, req *AddProblemReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/AddProblem")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("AddProblem")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ProblemServerClientProxyImpl) UpdateProblem(ctx context.Context, req *UpdateProblemReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/UpdateProblem")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("UpdateProblem")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ProblemServerClientProxyImpl) UpdateProblemStatus(ctx context.Context, req *UpdateProblemStatusReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/UpdateProblemStatus")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("UpdateProblemStatus")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ProblemServerClientProxyImpl) QueryProblemList(ctx context.Context, req *QueryProblemListReq, opts ...client.Option) (*QueryProblemListRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/QueryProblemList")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("QueryProblemList")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryProblemListRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ProblemServerClientProxyImpl) QueryAllProblem(ctx context.Context, req *QueryProblemListReq, opts ...client.Option) (*QueryAllProblemRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/QueryAllProblem")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("QueryAllProblem")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryAllProblemRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ProblemServerClientProxyImpl) QueryProblemName(ctx context.Context, req *QueryProblemNameReq, opts ...client.Option) (*QueryAllProblemRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/QueryProblemName")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("QueryProblemName")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryAllProblemRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ProblemServerClientProxyImpl) UpdateProblemVisitNumber(ctx context.Context, req *UpdateProblemVisitNumberReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/UpdateProblemVisitNumber")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("UpdateProblemVisitNumber")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ProblemServerClientProxyImpl) QueryProblemDataList(ctx context.Context, req *QueryProblemDataListReq, opts ...client.Option) (*QueryProblemDataListRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/QueryProblemDataList")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("QueryProblemDataList")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryProblemDataListRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ProblemServerClientProxyImpl) QueryProblemData(ctx context.Context, req *QueryProblemDataReq, opts ...client.Option) (*QueryProblemDataRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/QueryProblemData")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("QueryProblemData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryProblemDataRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ProblemServerClientProxyImpl) AddProblemData(ctx context.Context, req *AddProblemDataReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/AddProblemData")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("AddProblemData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ProblemServerClientProxyImpl) UpdateProblemData(ctx context.Context, req *UpdateProblemDataReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/UpdateProblemData")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("UpdateProblemData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ProblemServerClientProxyImpl) DeleteProblemData(ctx context.Context, req *DeleteProblemDataReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/DeleteProblemData")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("DeleteProblemData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ProblemServerClientProxyImpl) QueryContestProblem(ctx context.Context, req *QueryContestProblemReq, opts ...client.Option) (*QueryContestProblemReqRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ProblemServer/QueryContestProblem")
	msg.WithCalleeServiceName(ProblemServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ProblemServer")
	msg.WithCalleeMethod("QueryContestProblem")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryContestProblemReqRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// ObjectiveServerClientProxy defines service client proxy
type ObjectiveServerClientProxy interface {
	// AddObjective AddObjective 添加客观题
	AddObjective(ctx context.Context, req *AddObjectiveReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateObjective UpdateObjective 更新客观题
	UpdateObjective(ctx context.Context, req *UpdateObjectiveReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateObjectiveStatus UpdateObjectiveStatus 更新客观题状态
	UpdateObjectiveStatus(ctx context.Context, req *UpdateObjectiveStatusReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QueryObjective QueryObjective 查询客观题
	QueryObjective(ctx context.Context, req *QueryObjectiveReq, opts ...client.Option) (rsp *QueryObjectiveRsp, err error)
	// QueryAllObjective QueryAllObjective 查询客观题
	QueryAllObjective(ctx context.Context, req *QueryObjectiveListReq, opts ...client.Option) (rsp *QueryObjectiveListRsp, err error)
	// QueryObjectiveList QueryObjectiveList 分页查询客观题
	QueryObjectiveList(ctx context.Context, req *QueryObjectiveListReq, opts ...client.Option) (rsp *QueryObjectiveListRsp, err error)
	// IsCorrectObjective IsCorrectObjective 是否客观题错误
	IsCorrectObjective(ctx context.Context, req *IsCorrectObjectiveReq, opts ...client.Option) (rsp *IsCorrectObjectiveRsp, err error)
}

type ObjectiveServerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewObjectiveServerClientProxy = func(opts ...client.Option) ObjectiveServerClientProxy {
	return &ObjectiveServerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *ObjectiveServerClientProxyImpl) AddObjective(ctx context.Context, req *AddObjectiveReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ObjectiveServer/AddObjective")
	msg.WithCalleeServiceName(ObjectiveServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ObjectiveServer")
	msg.WithCalleeMethod("AddObjective")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ObjectiveServerClientProxyImpl) UpdateObjective(ctx context.Context, req *UpdateObjectiveReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ObjectiveServer/UpdateObjective")
	msg.WithCalleeServiceName(ObjectiveServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ObjectiveServer")
	msg.WithCalleeMethod("UpdateObjective")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ObjectiveServerClientProxyImpl) UpdateObjectiveStatus(ctx context.Context, req *UpdateObjectiveStatusReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ObjectiveServer/UpdateObjectiveStatus")
	msg.WithCalleeServiceName(ObjectiveServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ObjectiveServer")
	msg.WithCalleeMethod("UpdateObjectiveStatus")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ObjectiveServerClientProxyImpl) QueryObjective(ctx context.Context, req *QueryObjectiveReq, opts ...client.Option) (*QueryObjectiveRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ObjectiveServer/QueryObjective")
	msg.WithCalleeServiceName(ObjectiveServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ObjectiveServer")
	msg.WithCalleeMethod("QueryObjective")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryObjectiveRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ObjectiveServerClientProxyImpl) QueryAllObjective(ctx context.Context, req *QueryObjectiveListReq, opts ...client.Option) (*QueryObjectiveListRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ObjectiveServer/QueryAllObjective")
	msg.WithCalleeServiceName(ObjectiveServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ObjectiveServer")
	msg.WithCalleeMethod("QueryAllObjective")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryObjectiveListRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ObjectiveServerClientProxyImpl) QueryObjectiveList(ctx context.Context, req *QueryObjectiveListReq, opts ...client.Option) (*QueryObjectiveListRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ObjectiveServer/QueryObjectiveList")
	msg.WithCalleeServiceName(ObjectiveServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ObjectiveServer")
	msg.WithCalleeMethod("QueryObjectiveList")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryObjectiveListRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *ObjectiveServerClientProxyImpl) IsCorrectObjective(ctx context.Context, req *IsCorrectObjectiveReq, opts ...client.Option) (*IsCorrectObjectiveRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.problem.ObjectiveServer/IsCorrectObjective")
	msg.WithCalleeServiceName(ObjectiveServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ObjectiveServer")
	msg.WithCalleeMethod("IsCorrectObjective")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &IsCorrectObjectiveRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
