// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/csuJudge/judgeProto/problem/problem.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/csuJudge/judgeProto/problem/problem_mock.go -package=problem -self_package=github.com/csuJudge/judgeProto/problem --source=stub/github.com/csuJudge/judgeProto/problem/problem.trpc.go
//

// Package problem is a generated GoMock package.
package problem

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockProblemServerService is a mock of ProblemServerService interface.
type MockProblemServerService struct {
	ctrl     *gomock.Controller
	recorder *MockProblemServerServiceMockRecorder
}

// MockProblemServerServiceMockRecorder is the mock recorder for MockProblemServerService.
type MockProblemServerServiceMockRecorder struct {
	mock *MockProblemServerService
}

// NewMockProblemServerService creates a new mock instance.
func NewMockProblemServerService(ctrl *gomock.Controller) *MockProblemServerService {
	mock := &MockProblemServerService{ctrl: ctrl}
	mock.recorder = &MockProblemServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemServerService) EXPECT() *MockProblemServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProblemServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddProblem mocks base method.
func (m *MockProblemServerService) AddProblem(ctx context.Context, req *AddProblemReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProblem", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProblem indicates an expected call of AddProblem.
func (mr *MockProblemServerServiceMockRecorder) AddProblem(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProblem", reflect.TypeOf((*MockProblemServerService)(nil).AddProblem), ctx, req)
}

// AddProblemData mocks base method.
func (m *MockProblemServerService) AddProblemData(ctx context.Context, req *AddProblemDataReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProblemData", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProblemData indicates an expected call of AddProblemData.
func (mr *MockProblemServerServiceMockRecorder) AddProblemData(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProblemData", reflect.TypeOf((*MockProblemServerService)(nil).AddProblemData), ctx, req)
}

// DeleteProblemData mocks base method.
func (m *MockProblemServerService) DeleteProblemData(ctx context.Context, req *DeleteProblemDataReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProblemData", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProblemData indicates an expected call of DeleteProblemData.
func (mr *MockProblemServerServiceMockRecorder) DeleteProblemData(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProblemData", reflect.TypeOf((*MockProblemServerService)(nil).DeleteProblemData), ctx, req)
}

// QueryAllProblem mocks base method.
func (m *MockProblemServerService) QueryAllProblem(ctx context.Context, req *QueryProblemListReq) (*QueryAllProblemRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllProblem", ctx, req)
	ret0, _ := ret[0].(*QueryAllProblemRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllProblem indicates an expected call of QueryAllProblem.
func (mr *MockProblemServerServiceMockRecorder) QueryAllProblem(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllProblem", reflect.TypeOf((*MockProblemServerService)(nil).QueryAllProblem), ctx, req)
}

// QueryContestProblem mocks base method.
func (m *MockProblemServerService) QueryContestProblem(ctx context.Context, req *QueryContestProblemReq) (*QueryContestProblemReqRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContestProblem", ctx, req)
	ret0, _ := ret[0].(*QueryContestProblemReqRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContestProblem indicates an expected call of QueryContestProblem.
func (mr *MockProblemServerServiceMockRecorder) QueryContestProblem(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContestProblem", reflect.TypeOf((*MockProblemServerService)(nil).QueryContestProblem), ctx, req)
}

// QueryProblem mocks base method.
func (m *MockProblemServerService) QueryProblem(ctx context.Context, req *QueryProblemReq) (*QueryProblemRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProblem", ctx, req)
	ret0, _ := ret[0].(*QueryProblemRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblem indicates an expected call of QueryProblem.
func (mr *MockProblemServerServiceMockRecorder) QueryProblem(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblem", reflect.TypeOf((*MockProblemServerService)(nil).QueryProblem), ctx, req)
}

// QueryProblemData mocks base method.
func (m *MockProblemServerService) QueryProblemData(ctx context.Context, req *QueryProblemDataReq) (*QueryProblemDataRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProblemData", ctx, req)
	ret0, _ := ret[0].(*QueryProblemDataRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemData indicates an expected call of QueryProblemData.
func (mr *MockProblemServerServiceMockRecorder) QueryProblemData(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemData", reflect.TypeOf((*MockProblemServerService)(nil).QueryProblemData), ctx, req)
}

// QueryProblemDataList mocks base method.
func (m *MockProblemServerService) QueryProblemDataList(ctx context.Context, req *QueryProblemDataListReq) (*QueryProblemDataListRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProblemDataList", ctx, req)
	ret0, _ := ret[0].(*QueryProblemDataListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemDataList indicates an expected call of QueryProblemDataList.
func (mr *MockProblemServerServiceMockRecorder) QueryProblemDataList(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemDataList", reflect.TypeOf((*MockProblemServerService)(nil).QueryProblemDataList), ctx, req)
}

// QueryProblemList mocks base method.
func (m *MockProblemServerService) QueryProblemList(ctx context.Context, req *QueryProblemListReq) (*QueryProblemListRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProblemList", ctx, req)
	ret0, _ := ret[0].(*QueryProblemListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemList indicates an expected call of QueryProblemList.
func (mr *MockProblemServerServiceMockRecorder) QueryProblemList(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemList", reflect.TypeOf((*MockProblemServerService)(nil).QueryProblemList), ctx, req)
}

// QueryProblemName mocks base method.
func (m *MockProblemServerService) QueryProblemName(ctx context.Context, req *QueryProblemNameReq) (*QueryAllProblemRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProblemName", ctx, req)
	ret0, _ := ret[0].(*QueryAllProblemRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemName indicates an expected call of QueryProblemName.
func (mr *MockProblemServerServiceMockRecorder) QueryProblemName(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemName", reflect.TypeOf((*MockProblemServerService)(nil).QueryProblemName), ctx, req)
}

// UpdateProblem mocks base method.
func (m *MockProblemServerService) UpdateProblem(ctx context.Context, req *UpdateProblemReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProblem", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProblem indicates an expected call of UpdateProblem.
func (mr *MockProblemServerServiceMockRecorder) UpdateProblem(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProblem", reflect.TypeOf((*MockProblemServerService)(nil).UpdateProblem), ctx, req)
}

// UpdateProblemData mocks base method.
func (m *MockProblemServerService) UpdateProblemData(ctx context.Context, req *UpdateProblemDataReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProblemData", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProblemData indicates an expected call of UpdateProblemData.
func (mr *MockProblemServerServiceMockRecorder) UpdateProblemData(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProblemData", reflect.TypeOf((*MockProblemServerService)(nil).UpdateProblemData), ctx, req)
}

// UpdateProblemStatus mocks base method.
func (m *MockProblemServerService) UpdateProblemStatus(ctx context.Context, req *UpdateProblemStatusReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProblemStatus", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProblemStatus indicates an expected call of UpdateProblemStatus.
func (mr *MockProblemServerServiceMockRecorder) UpdateProblemStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProblemStatus", reflect.TypeOf((*MockProblemServerService)(nil).UpdateProblemStatus), ctx, req)
}

// UpdateProblemVisitNumber mocks base method.
func (m *MockProblemServerService) UpdateProblemVisitNumber(ctx context.Context, req *UpdateProblemVisitNumberReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProblemVisitNumber", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProblemVisitNumber indicates an expected call of UpdateProblemVisitNumber.
func (mr *MockProblemServerServiceMockRecorder) UpdateProblemVisitNumber(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProblemVisitNumber", reflect.TypeOf((*MockProblemServerService)(nil).UpdateProblemVisitNumber), ctx, req)
}

// MockObjectiveServerService is a mock of ObjectiveServerService interface.
type MockObjectiveServerService struct {
	ctrl     *gomock.Controller
	recorder *MockObjectiveServerServiceMockRecorder
}

// MockObjectiveServerServiceMockRecorder is the mock recorder for MockObjectiveServerService.
type MockObjectiveServerServiceMockRecorder struct {
	mock *MockObjectiveServerService
}

// NewMockObjectiveServerService creates a new mock instance.
func NewMockObjectiveServerService(ctrl *gomock.Controller) *MockObjectiveServerService {
	mock := &MockObjectiveServerService{ctrl: ctrl}
	mock.recorder = &MockObjectiveServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectiveServerService) EXPECT() *MockObjectiveServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockObjectiveServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddObjective mocks base method.
func (m *MockObjectiveServerService) AddObjective(ctx context.Context, req *AddObjectiveReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddObjective", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddObjective indicates an expected call of AddObjective.
func (mr *MockObjectiveServerServiceMockRecorder) AddObjective(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddObjective", reflect.TypeOf((*MockObjectiveServerService)(nil).AddObjective), ctx, req)
}

// IsCorrectObjective mocks base method.
func (m *MockObjectiveServerService) IsCorrectObjective(ctx context.Context, req *IsCorrectObjectiveReq) (*IsCorrectObjectiveRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCorrectObjective", ctx, req)
	ret0, _ := ret[0].(*IsCorrectObjectiveRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCorrectObjective indicates an expected call of IsCorrectObjective.
func (mr *MockObjectiveServerServiceMockRecorder) IsCorrectObjective(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCorrectObjective", reflect.TypeOf((*MockObjectiveServerService)(nil).IsCorrectObjective), ctx, req)
}

// QueryAllObjective mocks base method.
func (m *MockObjectiveServerService) QueryAllObjective(ctx context.Context, req *QueryObjectiveListReq) (*QueryObjectiveListRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllObjective", ctx, req)
	ret0, _ := ret[0].(*QueryObjectiveListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllObjective indicates an expected call of QueryAllObjective.
func (mr *MockObjectiveServerServiceMockRecorder) QueryAllObjective(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllObjective", reflect.TypeOf((*MockObjectiveServerService)(nil).QueryAllObjective), ctx, req)
}

// QueryObjective mocks base method.
func (m *MockObjectiveServerService) QueryObjective(ctx context.Context, req *QueryObjectiveReq) (*QueryObjectiveRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryObjective", ctx, req)
	ret0, _ := ret[0].(*QueryObjectiveRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryObjective indicates an expected call of QueryObjective.
func (mr *MockObjectiveServerServiceMockRecorder) QueryObjective(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryObjective", reflect.TypeOf((*MockObjectiveServerService)(nil).QueryObjective), ctx, req)
}

// QueryObjectiveList mocks base method.
func (m *MockObjectiveServerService) QueryObjectiveList(ctx context.Context, req *QueryObjectiveListReq) (*QueryObjectiveListRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryObjectiveList", ctx, req)
	ret0, _ := ret[0].(*QueryObjectiveListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryObjectiveList indicates an expected call of QueryObjectiveList.
func (mr *MockObjectiveServerServiceMockRecorder) QueryObjectiveList(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryObjectiveList", reflect.TypeOf((*MockObjectiveServerService)(nil).QueryObjectiveList), ctx, req)
}

// UpdateObjective mocks base method.
func (m *MockObjectiveServerService) UpdateObjective(ctx context.Context, req *UpdateObjectiveReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjective", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjective indicates an expected call of UpdateObjective.
func (mr *MockObjectiveServerServiceMockRecorder) UpdateObjective(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjective", reflect.TypeOf((*MockObjectiveServerService)(nil).UpdateObjective), ctx, req)
}

// UpdateObjectiveStatus mocks base method.
func (m *MockObjectiveServerService) UpdateObjectiveStatus(ctx context.Context, req *UpdateObjectiveStatusReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjectiveStatus", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectiveStatus indicates an expected call of UpdateObjectiveStatus.
func (mr *MockObjectiveServerServiceMockRecorder) UpdateObjectiveStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectiveStatus", reflect.TypeOf((*MockObjectiveServerService)(nil).UpdateObjectiveStatus), ctx, req)
}

// MockProblemServerClientProxy is a mock of ProblemServerClientProxy interface.
type MockProblemServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockProblemServerClientProxyMockRecorder
}

// MockProblemServerClientProxyMockRecorder is the mock recorder for MockProblemServerClientProxy.
type MockProblemServerClientProxyMockRecorder struct {
	mock *MockProblemServerClientProxy
}

// NewMockProblemServerClientProxy creates a new mock instance.
func NewMockProblemServerClientProxy(ctrl *gomock.Controller) *MockProblemServerClientProxy {
	mock := &MockProblemServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockProblemServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemServerClientProxy) EXPECT() *MockProblemServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProblemServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddProblem mocks base method.
func (m *MockProblemServerClientProxy) AddProblem(ctx context.Context, req *AddProblemReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProblem", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProblem indicates an expected call of AddProblem.
func (mr *MockProblemServerClientProxyMockRecorder) AddProblem(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProblem", reflect.TypeOf((*MockProblemServerClientProxy)(nil).AddProblem), varargs...)
}

// AddProblemData mocks base method.
func (m *MockProblemServerClientProxy) AddProblemData(ctx context.Context, req *AddProblemDataReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProblemData", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProblemData indicates an expected call of AddProblemData.
func (mr *MockProblemServerClientProxyMockRecorder) AddProblemData(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProblemData", reflect.TypeOf((*MockProblemServerClientProxy)(nil).AddProblemData), varargs...)
}

// DeleteProblemData mocks base method.
func (m *MockProblemServerClientProxy) DeleteProblemData(ctx context.Context, req *DeleteProblemDataReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProblemData", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProblemData indicates an expected call of DeleteProblemData.
func (mr *MockProblemServerClientProxyMockRecorder) DeleteProblemData(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProblemData", reflect.TypeOf((*MockProblemServerClientProxy)(nil).DeleteProblemData), varargs...)
}

// QueryAllProblem mocks base method.
func (m *MockProblemServerClientProxy) QueryAllProblem(ctx context.Context, req *QueryProblemListReq, opts ...client.Option) (*QueryAllProblemRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAllProblem", varargs...)
	ret0, _ := ret[0].(*QueryAllProblemRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllProblem indicates an expected call of QueryAllProblem.
func (mr *MockProblemServerClientProxyMockRecorder) QueryAllProblem(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllProblem", reflect.TypeOf((*MockProblemServerClientProxy)(nil).QueryAllProblem), varargs...)
}

// QueryContestProblem mocks base method.
func (m *MockProblemServerClientProxy) QueryContestProblem(ctx context.Context, req *QueryContestProblemReq, opts ...client.Option) (*QueryContestProblemReqRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContestProblem", varargs...)
	ret0, _ := ret[0].(*QueryContestProblemReqRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContestProblem indicates an expected call of QueryContestProblem.
func (mr *MockProblemServerClientProxyMockRecorder) QueryContestProblem(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContestProblem", reflect.TypeOf((*MockProblemServerClientProxy)(nil).QueryContestProblem), varargs...)
}

// QueryProblem mocks base method.
func (m *MockProblemServerClientProxy) QueryProblem(ctx context.Context, req *QueryProblemReq, opts ...client.Option) (*QueryProblemRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryProblem", varargs...)
	ret0, _ := ret[0].(*QueryProblemRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblem indicates an expected call of QueryProblem.
func (mr *MockProblemServerClientProxyMockRecorder) QueryProblem(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblem", reflect.TypeOf((*MockProblemServerClientProxy)(nil).QueryProblem), varargs...)
}

// QueryProblemData mocks base method.
func (m *MockProblemServerClientProxy) QueryProblemData(ctx context.Context, req *QueryProblemDataReq, opts ...client.Option) (*QueryProblemDataRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryProblemData", varargs...)
	ret0, _ := ret[0].(*QueryProblemDataRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemData indicates an expected call of QueryProblemData.
func (mr *MockProblemServerClientProxyMockRecorder) QueryProblemData(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemData", reflect.TypeOf((*MockProblemServerClientProxy)(nil).QueryProblemData), varargs...)
}

// QueryProblemDataList mocks base method.
func (m *MockProblemServerClientProxy) QueryProblemDataList(ctx context.Context, req *QueryProblemDataListReq, opts ...client.Option) (*QueryProblemDataListRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryProblemDataList", varargs...)
	ret0, _ := ret[0].(*QueryProblemDataListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemDataList indicates an expected call of QueryProblemDataList.
func (mr *MockProblemServerClientProxyMockRecorder) QueryProblemDataList(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemDataList", reflect.TypeOf((*MockProblemServerClientProxy)(nil).QueryProblemDataList), varargs...)
}

// QueryProblemList mocks base method.
func (m *MockProblemServerClientProxy) QueryProblemList(ctx context.Context, req *QueryProblemListReq, opts ...client.Option) (*QueryProblemListRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryProblemList", varargs...)
	ret0, _ := ret[0].(*QueryProblemListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemList indicates an expected call of QueryProblemList.
func (mr *MockProblemServerClientProxyMockRecorder) QueryProblemList(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemList", reflect.TypeOf((*MockProblemServerClientProxy)(nil).QueryProblemList), varargs...)
}

// QueryProblemName mocks base method.
func (m *MockProblemServerClientProxy) QueryProblemName(ctx context.Context, req *QueryProblemNameReq, opts ...client.Option) (*QueryAllProblemRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryProblemName", varargs...)
	ret0, _ := ret[0].(*QueryAllProblemRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemName indicates an expected call of QueryProblemName.
func (mr *MockProblemServerClientProxyMockRecorder) QueryProblemName(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemName", reflect.TypeOf((*MockProblemServerClientProxy)(nil).QueryProblemName), varargs...)
}

// UpdateProblem mocks base method.
func (m *MockProblemServerClientProxy) UpdateProblem(ctx context.Context, req *UpdateProblemReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProblem", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProblem indicates an expected call of UpdateProblem.
func (mr *MockProblemServerClientProxyMockRecorder) UpdateProblem(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProblem", reflect.TypeOf((*MockProblemServerClientProxy)(nil).UpdateProblem), varargs...)
}

// UpdateProblemData mocks base method.
func (m *MockProblemServerClientProxy) UpdateProblemData(ctx context.Context, req *UpdateProblemDataReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProblemData", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProblemData indicates an expected call of UpdateProblemData.
func (mr *MockProblemServerClientProxyMockRecorder) UpdateProblemData(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProblemData", reflect.TypeOf((*MockProblemServerClientProxy)(nil).UpdateProblemData), varargs...)
}

// UpdateProblemStatus mocks base method.
func (m *MockProblemServerClientProxy) UpdateProblemStatus(ctx context.Context, req *UpdateProblemStatusReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProblemStatus", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProblemStatus indicates an expected call of UpdateProblemStatus.
func (mr *MockProblemServerClientProxyMockRecorder) UpdateProblemStatus(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProblemStatus", reflect.TypeOf((*MockProblemServerClientProxy)(nil).UpdateProblemStatus), varargs...)
}

// UpdateProblemVisitNumber mocks base method.
func (m *MockProblemServerClientProxy) UpdateProblemVisitNumber(ctx context.Context, req *UpdateProblemVisitNumberReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProblemVisitNumber", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProblemVisitNumber indicates an expected call of UpdateProblemVisitNumber.
func (mr *MockProblemServerClientProxyMockRecorder) UpdateProblemVisitNumber(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProblemVisitNumber", reflect.TypeOf((*MockProblemServerClientProxy)(nil).UpdateProblemVisitNumber), varargs...)
}

// MockObjectiveServerClientProxy is a mock of ObjectiveServerClientProxy interface.
type MockObjectiveServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockObjectiveServerClientProxyMockRecorder
}

// MockObjectiveServerClientProxyMockRecorder is the mock recorder for MockObjectiveServerClientProxy.
type MockObjectiveServerClientProxyMockRecorder struct {
	mock *MockObjectiveServerClientProxy
}

// NewMockObjectiveServerClientProxy creates a new mock instance.
func NewMockObjectiveServerClientProxy(ctrl *gomock.Controller) *MockObjectiveServerClientProxy {
	mock := &MockObjectiveServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockObjectiveServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectiveServerClientProxy) EXPECT() *MockObjectiveServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockObjectiveServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddObjective mocks base method.
func (m *MockObjectiveServerClientProxy) AddObjective(ctx context.Context, req *AddObjectiveReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddObjective", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddObjective indicates an expected call of AddObjective.
func (mr *MockObjectiveServerClientProxyMockRecorder) AddObjective(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddObjective", reflect.TypeOf((*MockObjectiveServerClientProxy)(nil).AddObjective), varargs...)
}

// IsCorrectObjective mocks base method.
func (m *MockObjectiveServerClientProxy) IsCorrectObjective(ctx context.Context, req *IsCorrectObjectiveReq, opts ...client.Option) (*IsCorrectObjectiveRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsCorrectObjective", varargs...)
	ret0, _ := ret[0].(*IsCorrectObjectiveRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCorrectObjective indicates an expected call of IsCorrectObjective.
func (mr *MockObjectiveServerClientProxyMockRecorder) IsCorrectObjective(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCorrectObjective", reflect.TypeOf((*MockObjectiveServerClientProxy)(nil).IsCorrectObjective), varargs...)
}

// QueryAllObjective mocks base method.
func (m *MockObjectiveServerClientProxy) QueryAllObjective(ctx context.Context, req *QueryObjectiveListReq, opts ...client.Option) (*QueryObjectiveListRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAllObjective", varargs...)
	ret0, _ := ret[0].(*QueryObjectiveListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllObjective indicates an expected call of QueryAllObjective.
func (mr *MockObjectiveServerClientProxyMockRecorder) QueryAllObjective(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllObjective", reflect.TypeOf((*MockObjectiveServerClientProxy)(nil).QueryAllObjective), varargs...)
}

// QueryObjective mocks base method.
func (m *MockObjectiveServerClientProxy) QueryObjective(ctx context.Context, req *QueryObjectiveReq, opts ...client.Option) (*QueryObjectiveRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryObjective", varargs...)
	ret0, _ := ret[0].(*QueryObjectiveRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryObjective indicates an expected call of QueryObjective.
func (mr *MockObjectiveServerClientProxyMockRecorder) QueryObjective(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryObjective", reflect.TypeOf((*MockObjectiveServerClientProxy)(nil).QueryObjective), varargs...)
}

// QueryObjectiveList mocks base method.
func (m *MockObjectiveServerClientProxy) QueryObjectiveList(ctx context.Context, req *QueryObjectiveListReq, opts ...client.Option) (*QueryObjectiveListRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryObjectiveList", varargs...)
	ret0, _ := ret[0].(*QueryObjectiveListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryObjectiveList indicates an expected call of QueryObjectiveList.
func (mr *MockObjectiveServerClientProxyMockRecorder) QueryObjectiveList(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryObjectiveList", reflect.TypeOf((*MockObjectiveServerClientProxy)(nil).QueryObjectiveList), varargs...)
}

// UpdateObjective mocks base method.
func (m *MockObjectiveServerClientProxy) UpdateObjective(ctx context.Context, req *UpdateObjectiveReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateObjective", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjective indicates an expected call of UpdateObjective.
func (mr *MockObjectiveServerClientProxyMockRecorder) UpdateObjective(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjective", reflect.TypeOf((*MockObjectiveServerClientProxy)(nil).UpdateObjective), varargs...)
}

// UpdateObjectiveStatus mocks base method.
func (m *MockObjectiveServerClientProxy) UpdateObjectiveStatus(ctx context.Context, req *UpdateObjectiveStatusReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateObjectiveStatus", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectiveStatus indicates an expected call of UpdateObjectiveStatus.
func (mr *MockObjectiveServerClientProxyMockRecorder) UpdateObjectiveStatus(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectiveStatus", reflect.TypeOf((*MockObjectiveServerClientProxy)(nil).UpdateObjectiveStatus), varargs...)
}
