// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/csuJudge/judgeProto/problem/problem.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/csuJudge/judgeProto/problem/problem_mock.go -package=problem -self_package=github.com/csuJudge/judgeProto/problem --source=stub/github.com/csuJudge/judgeProto/problem/problem.trpc.go
//

// Package problem is a generated GoMock package.
package problem

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockProblemServerService is a mock of ProblemServerService interface.
type MockProblemServerService struct {
	ctrl     *gomock.Controller
	recorder *MockProblemServerServiceMockRecorder
}

// MockProblemServerServiceMockRecorder is the mock recorder for MockProblemServerService.
type MockProblemServerServiceMockRecorder struct {
	mock *MockProblemServerService
}

// NewMockProblemServerService creates a new mock instance.
func NewMockProblemServerService(ctrl *gomock.Controller) *MockProblemServerService {
	mock := &MockProblemServerService{ctrl: ctrl}
	mock.recorder = &MockProblemServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemServerService) EXPECT() *MockProblemServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProblemServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddProblem mocks base method.
func (m *MockProblemServerService) AddProblem(ctx context.Context, req *AddProblemReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProblem", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProblem indicates an expected call of AddProblem.
func (mr *MockProblemServerServiceMockRecorder) AddProblem(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProblem", reflect.TypeOf((*MockProblemServerService)(nil).AddProblem), ctx, req)
}

// AddProblemData mocks base method.
func (m *MockProblemServerService) AddProblemData(ctx context.Context, req *AddProblemDataReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProblemData", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProblemData indicates an expected call of AddProblemData.
func (mr *MockProblemServerServiceMockRecorder) AddProblemData(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProblemData", reflect.TypeOf((*MockProblemServerService)(nil).AddProblemData), ctx, req)
}

// DeleteProblemData mocks base method.
func (m *MockProblemServerService) DeleteProblemData(ctx context.Context, req *DeleteProblemDataReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProblemData", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProblemData indicates an expected call of DeleteProblemData.
func (mr *MockProblemServerServiceMockRecorder) DeleteProblemData(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProblemData", reflect.TypeOf((*MockProblemServerService)(nil).DeleteProblemData), ctx, req)
}

// QueryProblem mocks base method.
func (m *MockProblemServerService) QueryProblem(ctx context.Context, req *QueryProblemReq) (*QueryProblemRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProblem", ctx, req)
	ret0, _ := ret[0].(*QueryProblemRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblem indicates an expected call of QueryProblem.
func (mr *MockProblemServerServiceMockRecorder) QueryProblem(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblem", reflect.TypeOf((*MockProblemServerService)(nil).QueryProblem), ctx, req)
}

// QueryProblemData mocks base method.
func (m *MockProblemServerService) QueryProblemData(ctx context.Context, req *QueryProblemDataReq) (*QueryProblemDataRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProblemData", ctx, req)
	ret0, _ := ret[0].(*QueryProblemDataRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemData indicates an expected call of QueryProblemData.
func (mr *MockProblemServerServiceMockRecorder) QueryProblemData(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemData", reflect.TypeOf((*MockProblemServerService)(nil).QueryProblemData), ctx, req)
}

// QueryProblemDataList mocks base method.
func (m *MockProblemServerService) QueryProblemDataList(ctx context.Context, req *QueryProblemDataListReq) (*QueryProblemDataListRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProblemDataList", ctx, req)
	ret0, _ := ret[0].(*QueryProblemDataListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemDataList indicates an expected call of QueryProblemDataList.
func (mr *MockProblemServerServiceMockRecorder) QueryProblemDataList(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemDataList", reflect.TypeOf((*MockProblemServerService)(nil).QueryProblemDataList), ctx, req)
}

// UpdateProblemData mocks base method.
func (m *MockProblemServerService) UpdateProblemData(ctx context.Context, req *UpdateProblemDataReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProblemData", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProblemData indicates an expected call of UpdateProblemData.
func (mr *MockProblemServerServiceMockRecorder) UpdateProblemData(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProblemData", reflect.TypeOf((*MockProblemServerService)(nil).UpdateProblemData), ctx, req)
}

// MockProblemServerClientProxy is a mock of ProblemServerClientProxy interface.
type MockProblemServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockProblemServerClientProxyMockRecorder
}

// MockProblemServerClientProxyMockRecorder is the mock recorder for MockProblemServerClientProxy.
type MockProblemServerClientProxyMockRecorder struct {
	mock *MockProblemServerClientProxy
}

// NewMockProblemServerClientProxy creates a new mock instance.
func NewMockProblemServerClientProxy(ctrl *gomock.Controller) *MockProblemServerClientProxy {
	mock := &MockProblemServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockProblemServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemServerClientProxy) EXPECT() *MockProblemServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProblemServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddProblem mocks base method.
func (m *MockProblemServerClientProxy) AddProblem(ctx context.Context, req *AddProblemReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProblem", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProblem indicates an expected call of AddProblem.
func (mr *MockProblemServerClientProxyMockRecorder) AddProblem(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProblem", reflect.TypeOf((*MockProblemServerClientProxy)(nil).AddProblem), varargs...)
}

// AddProblemData mocks base method.
func (m *MockProblemServerClientProxy) AddProblemData(ctx context.Context, req *AddProblemDataReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProblemData", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProblemData indicates an expected call of AddProblemData.
func (mr *MockProblemServerClientProxyMockRecorder) AddProblemData(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProblemData", reflect.TypeOf((*MockProblemServerClientProxy)(nil).AddProblemData), varargs...)
}

// DeleteProblemData mocks base method.
func (m *MockProblemServerClientProxy) DeleteProblemData(ctx context.Context, req *DeleteProblemDataReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProblemData", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProblemData indicates an expected call of DeleteProblemData.
func (mr *MockProblemServerClientProxyMockRecorder) DeleteProblemData(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProblemData", reflect.TypeOf((*MockProblemServerClientProxy)(nil).DeleteProblemData), varargs...)
}

// QueryProblem mocks base method.
func (m *MockProblemServerClientProxy) QueryProblem(ctx context.Context, req *QueryProblemReq, opts ...client.Option) (*QueryProblemRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryProblem", varargs...)
	ret0, _ := ret[0].(*QueryProblemRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblem indicates an expected call of QueryProblem.
func (mr *MockProblemServerClientProxyMockRecorder) QueryProblem(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblem", reflect.TypeOf((*MockProblemServerClientProxy)(nil).QueryProblem), varargs...)
}

// QueryProblemData mocks base method.
func (m *MockProblemServerClientProxy) QueryProblemData(ctx context.Context, req *QueryProblemDataReq, opts ...client.Option) (*QueryProblemDataRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryProblemData", varargs...)
	ret0, _ := ret[0].(*QueryProblemDataRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemData indicates an expected call of QueryProblemData.
func (mr *MockProblemServerClientProxyMockRecorder) QueryProblemData(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemData", reflect.TypeOf((*MockProblemServerClientProxy)(nil).QueryProblemData), varargs...)
}

// QueryProblemDataList mocks base method.
func (m *MockProblemServerClientProxy) QueryProblemDataList(ctx context.Context, req *QueryProblemDataListReq, opts ...client.Option) (*QueryProblemDataListRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryProblemDataList", varargs...)
	ret0, _ := ret[0].(*QueryProblemDataListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemDataList indicates an expected call of QueryProblemDataList.
func (mr *MockProblemServerClientProxyMockRecorder) QueryProblemDataList(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemDataList", reflect.TypeOf((*MockProblemServerClientProxy)(nil).QueryProblemDataList), varargs...)
}

// UpdateProblemData mocks base method.
func (m *MockProblemServerClientProxy) UpdateProblemData(ctx context.Context, req *UpdateProblemDataReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProblemData", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProblemData indicates an expected call of UpdateProblemData.
func (mr *MockProblemServerClientProxyMockRecorder) UpdateProblemData(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProblemData", reflect.TypeOf((*MockProblemServerClientProxy)(nil).UpdateProblemData), varargs...)
}
