// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/csuJudge/judgeProto/problem.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/csuJudge/judgeProto/problem_mock.go -package=judgeProto -self_package=github.com/csuJudge/judgeProto --source=stub/github.com/csuJudge/judgeProto/problem.trpc.go
//

// Package judgeProto is a generated GoMock package.
package judgeProto

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockProblemServerService is a mock of ProblemServerService interface.
type MockProblemServerService struct {
	ctrl     *gomock.Controller
	recorder *MockProblemServerServiceMockRecorder
}

// MockProblemServerServiceMockRecorder is the mock recorder for MockProblemServerService.
type MockProblemServerServiceMockRecorder struct {
	mock *MockProblemServerService
}

// NewMockProblemServerService creates a new mock instance.
func NewMockProblemServerService(ctrl *gomock.Controller) *MockProblemServerService {
	mock := &MockProblemServerService{ctrl: ctrl}
	mock.recorder = &MockProblemServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemServerService) EXPECT() *MockProblemServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProblemServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddProblem mocks base method.
func (m *MockProblemServerService) AddProblem(ctx context.Context, req *AddProblemReq) (*AddProblemRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProblem", ctx, req)
	ret0, _ := ret[0].(*AddProblemRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProblem indicates an expected call of AddProblem.
func (mr *MockProblemServerServiceMockRecorder) AddProblem(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProblem", reflect.TypeOf((*MockProblemServerService)(nil).AddProblem), ctx, req)
}

// QueryProblem mocks base method.
func (m *MockProblemServerService) QueryProblem(ctx context.Context, req *QueryProblemReq) (*QueryProblemRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProblem", ctx, req)
	ret0, _ := ret[0].(*QueryProblemRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblem indicates an expected call of QueryProblem.
func (mr *MockProblemServerServiceMockRecorder) QueryProblem(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblem", reflect.TypeOf((*MockProblemServerService)(nil).QueryProblem), ctx, req)
}

// MockProblemServerClientProxy is a mock of ProblemServerClientProxy interface.
type MockProblemServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockProblemServerClientProxyMockRecorder
}

// MockProblemServerClientProxyMockRecorder is the mock recorder for MockProblemServerClientProxy.
type MockProblemServerClientProxyMockRecorder struct {
	mock *MockProblemServerClientProxy
}

// NewMockProblemServerClientProxy creates a new mock instance.
func NewMockProblemServerClientProxy(ctrl *gomock.Controller) *MockProblemServerClientProxy {
	mock := &MockProblemServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockProblemServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemServerClientProxy) EXPECT() *MockProblemServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProblemServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddProblem mocks base method.
func (m *MockProblemServerClientProxy) AddProblem(ctx context.Context, req *AddProblemReq, opts ...client.Option) (*AddProblemRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProblem", varargs...)
	ret0, _ := ret[0].(*AddProblemRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProblem indicates an expected call of AddProblem.
func (mr *MockProblemServerClientProxyMockRecorder) AddProblem(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProblem", reflect.TypeOf((*MockProblemServerClientProxy)(nil).AddProblem), varargs...)
}

// QueryProblem mocks base method.
func (m *MockProblemServerClientProxy) QueryProblem(ctx context.Context, req *QueryProblemReq, opts ...client.Option) (*QueryProblemRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryProblem", varargs...)
	ret0, _ := ret[0].(*QueryProblemRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblem indicates an expected call of QueryProblem.
func (mr *MockProblemServerClientProxyMockRecorder) QueryProblem(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblem", reflect.TypeOf((*MockProblemServerClientProxy)(nil).QueryProblem), varargs...)
}
