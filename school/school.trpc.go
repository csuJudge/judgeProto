// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: school.proto

package school

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// CourseServerService defines service.
type CourseServerService interface {
	// AddCourse AddCourse 添加课程
	AddCourse(ctx context.Context, req *AddCourseReq) (*CommonRsp, error)
}

func CourseServerService_AddCourse_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddCourseReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(CourseServerService).AddCourse(ctx, reqbody.(*AddCourseReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// CourseServerServer_ServiceDesc descriptor for server.RegisterService.
var CourseServerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "oj.school.CourseServer",
	HandlerType: ((*CourseServerService)(nil)),
	Methods: []server.Method{
		{
			Name: "/oj.school.CourseServer/AddCourse",
			Func: CourseServerService_AddCourse_Handler,
		},
	},
}

// RegisterCourseServerService registers service.
func RegisterCourseServerService(s server.Service, svr CourseServerService) {
	if err := s.Register(&CourseServerServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("CourseServer register error:%v", err))
	}
}

// ClassServerService defines service.
type ClassServerService interface {
	// QueryUserClass QueryUserClass 查询用户的班级
	QueryUserClass(ctx context.Context, req *QueryUserClassReq) (*QueryUserClassRsp, error)
}

func ClassServerService_QueryUserClass_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryUserClassReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ClassServerService).QueryUserClass(ctx, reqbody.(*QueryUserClassReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// ClassServerServer_ServiceDesc descriptor for server.RegisterService.
var ClassServerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "oj.school.ClassServer",
	HandlerType: ((*ClassServerService)(nil)),
	Methods: []server.Method{
		{
			Name: "/oj.school.ClassServer/QueryUserClass",
			Func: ClassServerService_QueryUserClass_Handler,
		},
	},
}

// RegisterClassServerService registers service.
func RegisterClassServerService(s server.Service, svr ClassServerService) {
	if err := s.Register(&ClassServerServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("ClassServer register error:%v", err))
	}
}

// TermServerService defines service.
type TermServerService interface {
	// AddTerm AddTerm 添加学期
	AddTerm(ctx context.Context, req *AddTermReq) (*CommonRsp, error)
}

func TermServerService_AddTerm_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddTermReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(TermServerService).AddTerm(ctx, reqbody.(*AddTermReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// TermServerServer_ServiceDesc descriptor for server.RegisterService.
var TermServerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "oj.school.TermServer",
	HandlerType: ((*TermServerService)(nil)),
	Methods: []server.Method{
		{
			Name: "/oj.school.TermServer/AddTerm",
			Func: TermServerService_AddTerm_Handler,
		},
	},
}

// RegisterTermServerService registers service.
func RegisterTermServerService(s server.Service, svr TermServerService) {
	if err := s.Register(&TermServerServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("TermServer register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedCourseServer struct{}

// AddCourse AddCourse 添加课程
func (s *UnimplementedCourseServer) AddCourse(ctx context.Context, req *AddCourseReq) (*CommonRsp, error) {
	return nil, errors.New("rpc AddCourse of service CourseServer is not implemented")
}

type UnimplementedClassServer struct{}

// QueryUserClass QueryUserClass 查询用户的班级
func (s *UnimplementedClassServer) QueryUserClass(ctx context.Context, req *QueryUserClassReq) (*QueryUserClassRsp, error) {
	return nil, errors.New("rpc QueryUserClass of service ClassServer is not implemented")
}

type UnimplementedTermServer struct{}

// AddTerm AddTerm 添加学期
func (s *UnimplementedTermServer) AddTerm(ctx context.Context, req *AddTermReq) (*CommonRsp, error) {
	return nil, errors.New("rpc AddTerm of service TermServer is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// CourseServerClientProxy defines service client proxy
type CourseServerClientProxy interface {
	// AddCourse AddCourse 添加课程
	AddCourse(ctx context.Context, req *AddCourseReq, opts ...client.Option) (rsp *CommonRsp, err error)
}

type CourseServerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewCourseServerClientProxy = func(opts ...client.Option) CourseServerClientProxy {
	return &CourseServerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *CourseServerClientProxyImpl) AddCourse(ctx context.Context, req *AddCourseReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.school.CourseServer/AddCourse")
	msg.WithCalleeServiceName(CourseServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("CourseServer")
	msg.WithCalleeMethod("AddCourse")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// ClassServerClientProxy defines service client proxy
type ClassServerClientProxy interface {
	// QueryUserClass QueryUserClass 查询用户的班级
	QueryUserClass(ctx context.Context, req *QueryUserClassReq, opts ...client.Option) (rsp *QueryUserClassRsp, err error)
}

type ClassServerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewClassServerClientProxy = func(opts ...client.Option) ClassServerClientProxy {
	return &ClassServerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *ClassServerClientProxyImpl) QueryUserClass(ctx context.Context, req *QueryUserClassReq, opts ...client.Option) (*QueryUserClassRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.school.ClassServer/QueryUserClass")
	msg.WithCalleeServiceName(ClassServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ClassServer")
	msg.WithCalleeMethod("QueryUserClass")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryUserClassRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// TermServerClientProxy defines service client proxy
type TermServerClientProxy interface {
	// AddTerm AddTerm 添加学期
	AddTerm(ctx context.Context, req *AddTermReq, opts ...client.Option) (rsp *CommonRsp, err error)
}

type TermServerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewTermServerClientProxy = func(opts ...client.Option) TermServerClientProxy {
	return &TermServerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *TermServerClientProxyImpl) AddTerm(ctx context.Context, req *AddTermReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.school.TermServer/AddTerm")
	msg.WithCalleeServiceName(TermServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("TermServer")
	msg.WithCalleeMethod("AddTerm")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
