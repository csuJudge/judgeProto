// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/csuJudge/judgeProto/school/school.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/csuJudge/judgeProto/school/school_mock.go -package=school -self_package=github.com/csuJudge/judgeProto/school --source=stub/github.com/csuJudge/judgeProto/school/school.trpc.go
//

// Package school is a generated GoMock package.
package school

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockCourseServerService is a mock of CourseServerService interface.
type MockCourseServerService struct {
	ctrl     *gomock.Controller
	recorder *MockCourseServerServiceMockRecorder
}

// MockCourseServerServiceMockRecorder is the mock recorder for MockCourseServerService.
type MockCourseServerServiceMockRecorder struct {
	mock *MockCourseServerService
}

// NewMockCourseServerService creates a new mock instance.
func NewMockCourseServerService(ctrl *gomock.Controller) *MockCourseServerService {
	mock := &MockCourseServerService{ctrl: ctrl}
	mock.recorder = &MockCourseServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseServerService) EXPECT() *MockCourseServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCourseServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddCourse mocks base method.
func (m *MockCourseServerService) AddCourse(ctx context.Context, req *AddCourseReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCourse", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCourse indicates an expected call of AddCourse.
func (mr *MockCourseServerServiceMockRecorder) AddCourse(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCourse", reflect.TypeOf((*MockCourseServerService)(nil).AddCourse), ctx, req)
}

// UpdateCourse mocks base method.
func (m *MockCourseServerService) UpdateCourse(ctx context.Context, req *UpdateCourseReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourse", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourse indicates an expected call of UpdateCourse.
func (mr *MockCourseServerServiceMockRecorder) UpdateCourse(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourse", reflect.TypeOf((*MockCourseServerService)(nil).UpdateCourse), ctx, req)
}

// UpdateCourseStatus mocks base method.
func (m *MockCourseServerService) UpdateCourseStatus(ctx context.Context, req *UpdateCourseStatusReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseStatus", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourseStatus indicates an expected call of UpdateCourseStatus.
func (mr *MockCourseServerServiceMockRecorder) UpdateCourseStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseStatus", reflect.TypeOf((*MockCourseServerService)(nil).UpdateCourseStatus), ctx, req)
}

// MockClassServerService is a mock of ClassServerService interface.
type MockClassServerService struct {
	ctrl     *gomock.Controller
	recorder *MockClassServerServiceMockRecorder
}

// MockClassServerServiceMockRecorder is the mock recorder for MockClassServerService.
type MockClassServerServiceMockRecorder struct {
	mock *MockClassServerService
}

// NewMockClassServerService creates a new mock instance.
func NewMockClassServerService(ctrl *gomock.Controller) *MockClassServerService {
	mock := &MockClassServerService{ctrl: ctrl}
	mock.recorder = &MockClassServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassServerService) EXPECT() *MockClassServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClassServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddClass mocks base method.
func (m *MockClassServerService) AddClass(ctx context.Context, req *AddClassReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClass", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClass indicates an expected call of AddClass.
func (mr *MockClassServerServiceMockRecorder) AddClass(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClass", reflect.TypeOf((*MockClassServerService)(nil).AddClass), ctx, req)
}

// QueryClass mocks base method.
func (m *MockClassServerService) QueryClass(ctx context.Context, req *QueryClassReq) (*QueryClassRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryClass", ctx, req)
	ret0, _ := ret[0].(*QueryClassRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryClass indicates an expected call of QueryClass.
func (mr *MockClassServerServiceMockRecorder) QueryClass(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryClass", reflect.TypeOf((*MockClassServerService)(nil).QueryClass), ctx, req)
}

// QueryClassPageSize mocks base method.
func (m *MockClassServerService) QueryClassPageSize(ctx context.Context, req *QueryClassPageSizeReq) (*QueryClassPageSizeRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryClassPageSize", ctx, req)
	ret0, _ := ret[0].(*QueryClassPageSizeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryClassPageSize indicates an expected call of QueryClassPageSize.
func (mr *MockClassServerServiceMockRecorder) QueryClassPageSize(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryClassPageSize", reflect.TypeOf((*MockClassServerService)(nil).QueryClassPageSize), ctx, req)
}

// QueryClassUser mocks base method.
func (m *MockClassServerService) QueryClassUser(ctx context.Context, req *QueryClassUserReq) (*QueryClassUserRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryClassUser", ctx, req)
	ret0, _ := ret[0].(*QueryClassUserRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryClassUser indicates an expected call of QueryClassUser.
func (mr *MockClassServerServiceMockRecorder) QueryClassUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryClassUser", reflect.TypeOf((*MockClassServerService)(nil).QueryClassUser), ctx, req)
}

// QueryUserClass mocks base method.
func (m *MockClassServerService) QueryUserClass(ctx context.Context, req *QueryUserClassReq) (*QueryUserClassRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserClass", ctx, req)
	ret0, _ := ret[0].(*QueryUserClassRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserClass indicates an expected call of QueryUserClass.
func (mr *MockClassServerServiceMockRecorder) QueryUserClass(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserClass", reflect.TypeOf((*MockClassServerService)(nil).QueryUserClass), ctx, req)
}

// UpdateClass mocks base method.
func (m *MockClassServerService) UpdateClass(ctx context.Context, req *UpdateClassReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClass", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClass indicates an expected call of UpdateClass.
func (mr *MockClassServerServiceMockRecorder) UpdateClass(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClass", reflect.TypeOf((*MockClassServerService)(nil).UpdateClass), ctx, req)
}

// UpdateClassStatus mocks base method.
func (m *MockClassServerService) UpdateClassStatus(ctx context.Context, req *UpdateClassStatusReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassStatus", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClassStatus indicates an expected call of UpdateClassStatus.
func (mr *MockClassServerServiceMockRecorder) UpdateClassStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassStatus", reflect.TypeOf((*MockClassServerService)(nil).UpdateClassStatus), ctx, req)
}

// UpdateClassUser mocks base method.
func (m *MockClassServerService) UpdateClassUser(ctx context.Context, req *UpdateClassUserReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassUser", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClassUser indicates an expected call of UpdateClassUser.
func (mr *MockClassServerServiceMockRecorder) UpdateClassUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassUser", reflect.TypeOf((*MockClassServerService)(nil).UpdateClassUser), ctx, req)
}

// MockTermServerService is a mock of TermServerService interface.
type MockTermServerService struct {
	ctrl     *gomock.Controller
	recorder *MockTermServerServiceMockRecorder
}

// MockTermServerServiceMockRecorder is the mock recorder for MockTermServerService.
type MockTermServerServiceMockRecorder struct {
	mock *MockTermServerService
}

// NewMockTermServerService creates a new mock instance.
func NewMockTermServerService(ctrl *gomock.Controller) *MockTermServerService {
	mock := &MockTermServerService{ctrl: ctrl}
	mock.recorder = &MockTermServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTermServerService) EXPECT() *MockTermServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockTermServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddTerm mocks base method.
func (m *MockTermServerService) AddTerm(ctx context.Context, req *AddTermReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTerm", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTerm indicates an expected call of AddTerm.
func (mr *MockTermServerServiceMockRecorder) AddTerm(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTerm", reflect.TypeOf((*MockTermServerService)(nil).AddTerm), ctx, req)
}

// UpdateTerm mocks base method.
func (m *MockTermServerService) UpdateTerm(ctx context.Context, req *UpdateTermReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTerm", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTerm indicates an expected call of UpdateTerm.
func (mr *MockTermServerServiceMockRecorder) UpdateTerm(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTerm", reflect.TypeOf((*MockTermServerService)(nil).UpdateTerm), ctx, req)
}

// UpdateTermStatus mocks base method.
func (m *MockTermServerService) UpdateTermStatus(ctx context.Context, req *UpdateTermStatusReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTermStatus", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTermStatus indicates an expected call of UpdateTermStatus.
func (mr *MockTermServerServiceMockRecorder) UpdateTermStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTermStatus", reflect.TypeOf((*MockTermServerService)(nil).UpdateTermStatus), ctx, req)
}

// MockCourseServerClientProxy is a mock of CourseServerClientProxy interface.
type MockCourseServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockCourseServerClientProxyMockRecorder
}

// MockCourseServerClientProxyMockRecorder is the mock recorder for MockCourseServerClientProxy.
type MockCourseServerClientProxyMockRecorder struct {
	mock *MockCourseServerClientProxy
}

// NewMockCourseServerClientProxy creates a new mock instance.
func NewMockCourseServerClientProxy(ctrl *gomock.Controller) *MockCourseServerClientProxy {
	mock := &MockCourseServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockCourseServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseServerClientProxy) EXPECT() *MockCourseServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCourseServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddCourse mocks base method.
func (m *MockCourseServerClientProxy) AddCourse(ctx context.Context, req *AddCourseReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCourse", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCourse indicates an expected call of AddCourse.
func (mr *MockCourseServerClientProxyMockRecorder) AddCourse(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCourse", reflect.TypeOf((*MockCourseServerClientProxy)(nil).AddCourse), varargs...)
}

// UpdateCourse mocks base method.
func (m *MockCourseServerClientProxy) UpdateCourse(ctx context.Context, req *UpdateCourseReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCourse", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourse indicates an expected call of UpdateCourse.
func (mr *MockCourseServerClientProxyMockRecorder) UpdateCourse(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourse", reflect.TypeOf((*MockCourseServerClientProxy)(nil).UpdateCourse), varargs...)
}

// UpdateCourseStatus mocks base method.
func (m *MockCourseServerClientProxy) UpdateCourseStatus(ctx context.Context, req *UpdateCourseStatusReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCourseStatus", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourseStatus indicates an expected call of UpdateCourseStatus.
func (mr *MockCourseServerClientProxyMockRecorder) UpdateCourseStatus(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseStatus", reflect.TypeOf((*MockCourseServerClientProxy)(nil).UpdateCourseStatus), varargs...)
}

// MockClassServerClientProxy is a mock of ClassServerClientProxy interface.
type MockClassServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockClassServerClientProxyMockRecorder
}

// MockClassServerClientProxyMockRecorder is the mock recorder for MockClassServerClientProxy.
type MockClassServerClientProxyMockRecorder struct {
	mock *MockClassServerClientProxy
}

// NewMockClassServerClientProxy creates a new mock instance.
func NewMockClassServerClientProxy(ctrl *gomock.Controller) *MockClassServerClientProxy {
	mock := &MockClassServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockClassServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassServerClientProxy) EXPECT() *MockClassServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClassServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddClass mocks base method.
func (m *MockClassServerClientProxy) AddClass(ctx context.Context, req *AddClassReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddClass", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClass indicates an expected call of AddClass.
func (mr *MockClassServerClientProxyMockRecorder) AddClass(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClass", reflect.TypeOf((*MockClassServerClientProxy)(nil).AddClass), varargs...)
}

// QueryClass mocks base method.
func (m *MockClassServerClientProxy) QueryClass(ctx context.Context, req *QueryClassReq, opts ...client.Option) (*QueryClassRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryClass", varargs...)
	ret0, _ := ret[0].(*QueryClassRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryClass indicates an expected call of QueryClass.
func (mr *MockClassServerClientProxyMockRecorder) QueryClass(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryClass", reflect.TypeOf((*MockClassServerClientProxy)(nil).QueryClass), varargs...)
}

// QueryClassPageSize mocks base method.
func (m *MockClassServerClientProxy) QueryClassPageSize(ctx context.Context, req *QueryClassPageSizeReq, opts ...client.Option) (*QueryClassPageSizeRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryClassPageSize", varargs...)
	ret0, _ := ret[0].(*QueryClassPageSizeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryClassPageSize indicates an expected call of QueryClassPageSize.
func (mr *MockClassServerClientProxyMockRecorder) QueryClassPageSize(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryClassPageSize", reflect.TypeOf((*MockClassServerClientProxy)(nil).QueryClassPageSize), varargs...)
}

// QueryClassUser mocks base method.
func (m *MockClassServerClientProxy) QueryClassUser(ctx context.Context, req *QueryClassUserReq, opts ...client.Option) (*QueryClassUserRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryClassUser", varargs...)
	ret0, _ := ret[0].(*QueryClassUserRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryClassUser indicates an expected call of QueryClassUser.
func (mr *MockClassServerClientProxyMockRecorder) QueryClassUser(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryClassUser", reflect.TypeOf((*MockClassServerClientProxy)(nil).QueryClassUser), varargs...)
}

// QueryUserClass mocks base method.
func (m *MockClassServerClientProxy) QueryUserClass(ctx context.Context, req *QueryUserClassReq, opts ...client.Option) (*QueryUserClassRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryUserClass", varargs...)
	ret0, _ := ret[0].(*QueryUserClassRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserClass indicates an expected call of QueryUserClass.
func (mr *MockClassServerClientProxyMockRecorder) QueryUserClass(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserClass", reflect.TypeOf((*MockClassServerClientProxy)(nil).QueryUserClass), varargs...)
}

// UpdateClass mocks base method.
func (m *MockClassServerClientProxy) UpdateClass(ctx context.Context, req *UpdateClassReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClass", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClass indicates an expected call of UpdateClass.
func (mr *MockClassServerClientProxyMockRecorder) UpdateClass(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClass", reflect.TypeOf((*MockClassServerClientProxy)(nil).UpdateClass), varargs...)
}

// UpdateClassStatus mocks base method.
func (m *MockClassServerClientProxy) UpdateClassStatus(ctx context.Context, req *UpdateClassStatusReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClassStatus", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClassStatus indicates an expected call of UpdateClassStatus.
func (mr *MockClassServerClientProxyMockRecorder) UpdateClassStatus(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassStatus", reflect.TypeOf((*MockClassServerClientProxy)(nil).UpdateClassStatus), varargs...)
}

// UpdateClassUser mocks base method.
func (m *MockClassServerClientProxy) UpdateClassUser(ctx context.Context, req *UpdateClassUserReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClassUser", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClassUser indicates an expected call of UpdateClassUser.
func (mr *MockClassServerClientProxyMockRecorder) UpdateClassUser(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassUser", reflect.TypeOf((*MockClassServerClientProxy)(nil).UpdateClassUser), varargs...)
}

// MockTermServerClientProxy is a mock of TermServerClientProxy interface.
type MockTermServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockTermServerClientProxyMockRecorder
}

// MockTermServerClientProxyMockRecorder is the mock recorder for MockTermServerClientProxy.
type MockTermServerClientProxyMockRecorder struct {
	mock *MockTermServerClientProxy
}

// NewMockTermServerClientProxy creates a new mock instance.
func NewMockTermServerClientProxy(ctrl *gomock.Controller) *MockTermServerClientProxy {
	mock := &MockTermServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockTermServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTermServerClientProxy) EXPECT() *MockTermServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockTermServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddTerm mocks base method.
func (m *MockTermServerClientProxy) AddTerm(ctx context.Context, req *AddTermReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTerm", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTerm indicates an expected call of AddTerm.
func (mr *MockTermServerClientProxyMockRecorder) AddTerm(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTerm", reflect.TypeOf((*MockTermServerClientProxy)(nil).AddTerm), varargs...)
}

// UpdateTerm mocks base method.
func (m *MockTermServerClientProxy) UpdateTerm(ctx context.Context, req *UpdateTermReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTerm", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTerm indicates an expected call of UpdateTerm.
func (mr *MockTermServerClientProxyMockRecorder) UpdateTerm(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTerm", reflect.TypeOf((*MockTermServerClientProxy)(nil).UpdateTerm), varargs...)
}

// UpdateTermStatus mocks base method.
func (m *MockTermServerClientProxy) UpdateTermStatus(ctx context.Context, req *UpdateTermStatusReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTermStatus", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTermStatus indicates an expected call of UpdateTermStatus.
func (mr *MockTermServerClientProxyMockRecorder) UpdateTermStatus(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTermStatus", reflect.TypeOf((*MockTermServerClientProxy)(nil).UpdateTermStatus), varargs...)
}
