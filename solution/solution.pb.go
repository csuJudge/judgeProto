// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v5.29.3
// source: solution.proto

package solution

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type QueryTodaySolutionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string              `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`             // 返回信息
	Code       int32               `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`                  // 返回码
	Statistics *ClassifiedSolution `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`       // 统计数据
	TimeRange  []int32             `protobuf:"varint,4,rep,packed,name=timeRange,proto3" json:"timeRange,omitempty"` // 时间跨度
}

func (x *QueryTodaySolutionRsp) Reset() {
	*x = QueryTodaySolutionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTodaySolutionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTodaySolutionRsp) ProtoMessage() {}

func (x *QueryTodaySolutionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTodaySolutionRsp.ProtoReflect.Descriptor instead.
func (*QueryTodaySolutionRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{0}
}

func (x *QueryTodaySolutionRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryTodaySolutionRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryTodaySolutionRsp) GetStatistics() *ClassifiedSolution {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *QueryTodaySolutionRsp) GetTimeRange() []int32 {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

type UserIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int32 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` // 用户编号
}

func (x *UserIDReq) Reset() {
	*x = UserIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIDReq) ProtoMessage() {}

func (x *UserIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIDReq.ProtoReflect.Descriptor instead.
func (*UserIDReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{1}
}

func (x *UserIDReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryMySolutionRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int32 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` // 用户编号
}

func (x *QueryMySolutionRecordReq) Reset() {
	*x = QueryMySolutionRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMySolutionRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMySolutionRecordReq) ProtoMessage() {}

func (x *QueryMySolutionRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMySolutionRecordReq.ProtoReflect.Descriptor instead.
func (*QueryMySolutionRecordReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{2}
}

func (x *QueryMySolutionRecordReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryMySolutionRecordRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message          string     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`                   // 返回信息
	Code             int32      `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`                        // 返回码
	AcceptProblems   []*Problem `protobuf:"bytes,3,rep,name=acceptProblems,proto3" json:"acceptProblems,omitempty"`     // 通过的题目
	UnAcceptProblems []*Problem `protobuf:"bytes,4,rep,name=unAcceptProblems,proto3" json:"unAcceptProblems,omitempty"` // 不通过的题目
}

func (x *QueryMySolutionRecordRsp) Reset() {
	*x = QueryMySolutionRecordRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMySolutionRecordRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMySolutionRecordRsp) ProtoMessage() {}

func (x *QueryMySolutionRecordRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMySolutionRecordRsp.ProtoReflect.Descriptor instead.
func (*QueryMySolutionRecordRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{3}
}

func (x *QueryMySolutionRecordRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryMySolutionRecordRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryMySolutionRecordRsp) GetAcceptProblems() []*Problem {
	if x != nil {
		return x.AcceptProblems
	}
	return nil
}

func (x *QueryMySolutionRecordRsp) GetUnAcceptProblems() []*Problem {
	if x != nil {
		return x.UnAcceptProblems
	}
	return nil
}

type QueryContestSolutionSubmitCountRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                        `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code    int32                         `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Accept  []*ContestSolutionSubmitCount `protobuf:"bytes,3,rep,name=accept,proto3" json:"accept,omitempty"`   // 正确的提交
	Total   []*ContestSolutionSubmitCount `protobuf:"bytes,4,rep,name=total,proto3" json:"total,omitempty"`     // 提交总数
}

func (x *QueryContestSolutionSubmitCountRsp) Reset() {
	*x = QueryContestSolutionSubmitCountRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryContestSolutionSubmitCountRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContestSolutionSubmitCountRsp) ProtoMessage() {}

func (x *QueryContestSolutionSubmitCountRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContestSolutionSubmitCountRsp.ProtoReflect.Descriptor instead.
func (*QueryContestSolutionSubmitCountRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{4}
}

func (x *QueryContestSolutionSubmitCountRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryContestSolutionSubmitCountRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryContestSolutionSubmitCountRsp) GetAccept() []*ContestSolutionSubmitCount {
	if x != nil {
		return x.Accept
	}
	return nil
}

func (x *QueryContestSolutionSubmitCountRsp) GetTotal() []*ContestSolutionSubmitCount {
	if x != nil {
		return x.Total
	}
	return nil
}

type ContestSolutionSubmitCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int32 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	ProblemID int32 `protobuf:"varint,2,opt,name=problemID,proto3" json:"problemID,omitempty"` // 题目编号
	Count     int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`         // 提交数
}

func (x *ContestSolutionSubmitCount) Reset() {
	*x = ContestSolutionSubmitCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestSolutionSubmitCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestSolutionSubmitCount) ProtoMessage() {}

func (x *ContestSolutionSubmitCount) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestSolutionSubmitCount.ProtoReflect.Descriptor instead.
func (*ContestSolutionSubmitCount) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{5}
}

func (x *ContestSolutionSubmitCount) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ContestSolutionSubmitCount) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *ContestSolutionSubmitCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type QueryRankDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestID int32 `protobuf:"varint,1,opt,name=contestID,proto3" json:"contestID,omitempty"` // 作业编号
	UserID    int32 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
}

func (x *QueryRankDataReq) Reset() {
	*x = QueryRankDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRankDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRankDataReq) ProtoMessage() {}

func (x *QueryRankDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRankDataReq.ProtoReflect.Descriptor instead.
func (*QueryRankDataReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{6}
}

func (x *QueryRankDataReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

func (x *QueryRankDataReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type CountContestSubmissionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestID int32 `protobuf:"varint,1,opt,name=contestID,proto3" json:"contestID,omitempty"` // 作业编号
	UserID    int32 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
}

func (x *CountContestSubmissionReq) Reset() {
	*x = CountContestSubmissionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountContestSubmissionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountContestSubmissionReq) ProtoMessage() {}

func (x *CountContestSubmissionReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountContestSubmissionReq.ProtoReflect.Descriptor instead.
func (*CountContestSubmissionReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{7}
}

func (x *CountContestSubmissionReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

func (x *CountContestSubmissionReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type CountContestProblemSubmissionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string                       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`       // 返回信息
	Code       int32                        `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`            // 返回码
	Statistics []*ProblemClassifiedSolution `protobuf:"bytes,3,rep,name=statistics,proto3" json:"statistics,omitempty"` // 统计数据
}

func (x *CountContestProblemSubmissionRsp) Reset() {
	*x = CountContestProblemSubmissionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountContestProblemSubmissionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountContestProblemSubmissionRsp) ProtoMessage() {}

func (x *CountContestProblemSubmissionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountContestProblemSubmissionRsp.ProtoReflect.Descriptor instead.
func (*CountContestProblemSubmissionRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{8}
}

func (x *CountContestProblemSubmissionRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CountContestProblemSubmissionRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CountContestProblemSubmissionRsp) GetStatistics() []*ProblemClassifiedSolution {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type ProblemClassifiedSolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemID  int32               `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`  // 题目编号
	Name       string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`             // 题目名称
	Statistics *ClassifiedSolution `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"` // 统计数据
}

func (x *ProblemClassifiedSolution) Reset() {
	*x = ProblemClassifiedSolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProblemClassifiedSolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemClassifiedSolution) ProtoMessage() {}

func (x *ProblemClassifiedSolution) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemClassifiedSolution.ProtoReflect.Descriptor instead.
func (*ProblemClassifiedSolution) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{9}
}

func (x *ProblemClassifiedSolution) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *ProblemClassifiedSolution) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProblemClassifiedSolution) GetStatistics() *ClassifiedSolution {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type CountContestSubmissionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string              `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`       // 返回信息
	Code       int32               `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`            // 返回码
	Statistics *ClassifiedSolution `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"` // 统计数据
}

func (x *CountContestSubmissionRsp) Reset() {
	*x = CountContestSubmissionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountContestSubmissionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountContestSubmissionRsp) ProtoMessage() {}

func (x *CountContestSubmissionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountContestSubmissionRsp.ProtoReflect.Descriptor instead.
func (*CountContestSubmissionRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{10}
}

func (x *CountContestSubmissionRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CountContestSubmissionRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CountContestSubmissionRsp) GetStatistics() *ClassifiedSolution {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type ClassifiedSolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptCount              int32 `protobuf:"varint,1,opt,name=acceptCount,proto3" json:"acceptCount,omitempty"`                           // 程序通过数量
	PresentationErrorCount   int32 `protobuf:"varint,2,opt,name=presentationErrorCount,proto3" json:"presentationErrorCount,omitempty"`     // 格式不对数量
	WrongAnswerCount         int32 `protobuf:"varint,3,opt,name=wrongAnswerCount,proto3" json:"wrongAnswerCount,omitempty"`                 // 答案不对数量
	TimeLimitExceededCount   int32 `protobuf:"varint,4,opt,name=timeLimitExceededCount,proto3" json:"timeLimitExceededCount,omitempty"`     // 运行超出时间限制数量
	MemoryLimitExceededCount int32 `protobuf:"varint,5,opt,name=memoryLimitExceededCount,proto3" json:"memoryLimitExceededCount,omitempty"` // 超出内存限制数量
	OutputLimitExceededCount int32 `protobuf:"varint,6,opt,name=outputLimitExceededCount,proto3" json:"outputLimitExceededCount,omitempty"` // 输出超过限制数量
	RuntimeErrorCount        int32 `protobuf:"varint,7,opt,name=runtimeErrorCount,proto3" json:"runtimeErrorCount,omitempty"`               // 运行时错误数量
	CompileErrorCount        int32 `protobuf:"varint,8,opt,name=compileErrorCount,proto3" json:"compileErrorCount,omitempty"`               // 编译错误数量
}

func (x *ClassifiedSolution) Reset() {
	*x = ClassifiedSolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassifiedSolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassifiedSolution) ProtoMessage() {}

func (x *ClassifiedSolution) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassifiedSolution.ProtoReflect.Descriptor instead.
func (*ClassifiedSolution) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{11}
}

func (x *ClassifiedSolution) GetAcceptCount() int32 {
	if x != nil {
		return x.AcceptCount
	}
	return 0
}

func (x *ClassifiedSolution) GetPresentationErrorCount() int32 {
	if x != nil {
		return x.PresentationErrorCount
	}
	return 0
}

func (x *ClassifiedSolution) GetWrongAnswerCount() int32 {
	if x != nil {
		return x.WrongAnswerCount
	}
	return 0
}

func (x *ClassifiedSolution) GetTimeLimitExceededCount() int32 {
	if x != nil {
		return x.TimeLimitExceededCount
	}
	return 0
}

func (x *ClassifiedSolution) GetMemoryLimitExceededCount() int32 {
	if x != nil {
		return x.MemoryLimitExceededCount
	}
	return 0
}

func (x *ClassifiedSolution) GetOutputLimitExceededCount() int32 {
	if x != nil {
		return x.OutputLimitExceededCount
	}
	return 0
}

func (x *ClassifiedSolution) GetRuntimeErrorCount() int32 {
	if x != nil {
		return x.RuntimeErrorCount
	}
	return 0
}

func (x *ClassifiedSolution) GetCompileErrorCount() int32 {
	if x != nil {
		return x.CompileErrorCount
	}
	return 0
}

type QueryContestRankDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestID int32 `protobuf:"varint,1,opt,name=contestID,proto3" json:"contestID,omitempty"` // 作业编号
	UserID    int32 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
}

func (x *QueryContestRankDataReq) Reset() {
	*x = QueryContestRankDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryContestRankDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContestRankDataReq) ProtoMessage() {}

func (x *QueryContestRankDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContestRankDataReq.ProtoReflect.Descriptor instead.
func (*QueryContestRankDataReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{12}
}

func (x *QueryContestRankDataReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

func (x *QueryContestRankDataReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryContestRankDataRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`   // 返回信息
	Code     int32      `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`        // 返回码
	Problems []*Problem `protobuf:"bytes,3,rep,name=problems,proto3" json:"problems,omitempty"` // 题目数据
	Ranks    []*Rank    `protobuf:"bytes,4,rep,name=ranks,proto3" json:"ranks,omitempty"`       // 排名
}

func (x *QueryContestRankDataRsp) Reset() {
	*x = QueryContestRankDataRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryContestRankDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContestRankDataRsp) ProtoMessage() {}

func (x *QueryContestRankDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContestRankDataRsp.ProtoReflect.Descriptor instead.
func (*QueryContestRankDataRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{13}
}

func (x *QueryContestRankDataRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryContestRankDataRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryContestRankDataRsp) GetProblems() []*Problem {
	if x != nil {
		return x.Problems
	}
	return nil
}

func (x *QueryContestRankDataRsp) GetRanks() []*Rank {
	if x != nil {
		return x.Ranks
	}
	return nil
}

type Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemID int32  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"` // 题目编号
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`            // 题目名称
	IsSolved  int32  `protobuf:"varint,3,opt,name=isSolved,proto3" json:"isSolved,omitempty"`   // 是否做完
}

func (x *Problem) Reset() {
	*x = Problem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{14}
}

func (x *Problem) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *Problem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Problem) GetIsSolved() int32 {
	if x != nil {
		return x.IsSolved
	}
	return 0
}

type Rank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                 // 用户姓名
	UserID       int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`            // 用户编号
	SolvedCount  int32                  `protobuf:"varint,3,opt,name=solvedCount,proto3" json:"solvedCount,omitempty"`  // 解决的数量
	Number       string                 `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`             // 用户学工号
	Score        float32                `protobuf:"fixed32,5,opt,name=score,proto3" json:"score,omitempty"`             // 总得分
	SolutionData []*ContestSolutionData `protobuf:"bytes,6,rep,name=solutionData,proto3" json:"solutionData,omitempty"` // 作业提交数据
}

func (x *Rank) Reset() {
	*x = Rank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rank) ProtoMessage() {}

func (x *Rank) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rank.ProtoReflect.Descriptor instead.
func (*Rank) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{15}
}

func (x *Rank) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rank) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Rank) GetSolvedCount() int32 {
	if x != nil {
		return x.SolvedCount
	}
	return 0
}

func (x *Rank) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Rank) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Rank) GetSolutionData() []*ContestSolutionData {
	if x != nil {
		return x.SolutionData
	}
	return nil
}

type ContestSolutionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemID   int32   `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`     // 题目主键
	PassRate    float32 `protobuf:"fixed32,2,opt,name=passRate,proto3" json:"passRate,omitempty"`      // 通过率
	Code        string  `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                // 用户代码
	CreatedTime string  `protobuf:"bytes,4,opt,name=createdTime,proto3" json:"createdTime,omitempty"`  // 提交时间
	Name        string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                // 题目名称
	SubmitCount int32   `protobuf:"varint,6,opt,name=submitCount,proto3" json:"submitCount,omitempty"` // 提交数
	SolvedCount int32   `protobuf:"varint,7,opt,name=solvedCount,proto3" json:"solvedCount,omitempty"` // 正确数
}

func (x *ContestSolutionData) Reset() {
	*x = ContestSolutionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestSolutionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestSolutionData) ProtoMessage() {}

func (x *ContestSolutionData) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestSolutionData.ProtoReflect.Descriptor instead.
func (*ContestSolutionData) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{16}
}

func (x *ContestSolutionData) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *ContestSolutionData) GetPassRate() float32 {
	if x != nil {
		return x.PassRate
	}
	return 0
}

func (x *ContestSolutionData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ContestSolutionData) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *ContestSolutionData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContestSolutionData) GetSubmitCount() int32 {
	if x != nil {
		return x.SubmitCount
	}
	return 0
}

func (x *ContestSolutionData) GetSolvedCount() int32 {
	if x != nil {
		return x.SolvedCount
	}
	return 0
}

type AddCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemID int32  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"` // 问题编号
	Language  int32  `protobuf:"varint,2,opt,name=language,proto3" json:"language,omitempty"`   // 语言类型
	UserID    int32  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	Code      string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`            // 代码
	CodeName  string `protobuf:"bytes,5,opt,name=codeName,proto3" json:"codeName,omitempty"`    // 代码名称
}

func (x *AddCodeReq) Reset() {
	*x = AddCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCodeReq) ProtoMessage() {}

func (x *AddCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCodeReq.ProtoReflect.Descriptor instead.
func (*AddCodeReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{17}
}

func (x *AddCodeReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *AddCodeReq) GetLanguage() int32 {
	if x != nil {
		return x.Language
	}
	return 0
}

func (x *AddCodeReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *AddCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AddCodeReq) GetCodeName() string {
	if x != nil {
		return x.CodeName
	}
	return ""
}

type AddKeyActionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemID int32  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"` // 问题编号
	Language  int32  `protobuf:"varint,2,opt,name=language,proto3" json:"language,omitempty"`   // 语言类型
	UserID    int32  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	Action    string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`        // 击键行为
	StartTime string `protobuf:"bytes,5,opt,name=startTime,proto3" json:"startTime,omitempty"`  // 开始时间
}

func (x *AddKeyActionReq) Reset() {
	*x = AddKeyActionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKeyActionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKeyActionReq) ProtoMessage() {}

func (x *AddKeyActionReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKeyActionReq.ProtoReflect.Descriptor instead.
func (*AddKeyActionReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{18}
}

func (x *AddKeyActionReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *AddKeyActionReq) GetLanguage() int32 {
	if x != nil {
		return x.Language
	}
	return 0
}

func (x *AddKeyActionReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *AddKeyActionReq) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AddKeyActionReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

type AddSolutionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`        // 返回信息
	Code       int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`             // 返回码
	SolutionID int32  `protobuf:"varint,3,opt,name=solutionID,proto3" json:"solutionID,omitempty"` // 提交编号
}

func (x *AddSolutionRsp) Reset() {
	*x = AddSolutionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSolutionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSolutionRsp) ProtoMessage() {}

func (x *AddSolutionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSolutionRsp.ProtoReflect.Descriptor instead.
func (*AddSolutionRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{19}
}

func (x *AddSolutionRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddSolutionRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddSolutionRsp) GetSolutionID() int32 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

type QuerySolutionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestID int32  `protobuf:"varint,1,opt,name=contestID,proto3" json:"contestID,omitempty"` // 作业编号
	Page      int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`           // 页
	Limit     int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`         // 页大小
	UserID    int32  `protobuf:"varint,4,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	Result    int32  `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`       // 结果
	User      string `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`            // 姓名 or 学号
	Language  int32  `protobuf:"varint,7,opt,name=language,proto3" json:"language,omitempty"`   // 语言
	ProblemID int32  `protobuf:"varint,8,opt,name=problemID,proto3" json:"problemID,omitempty"` // 题目编号
}

func (x *QuerySolutionReq) Reset() {
	*x = QuerySolutionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySolutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySolutionReq) ProtoMessage() {}

func (x *QuerySolutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySolutionReq.ProtoReflect.Descriptor instead.
func (*QuerySolutionReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{20}
}

func (x *QuerySolutionReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

func (x *QuerySolutionReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QuerySolutionReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QuerySolutionReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QuerySolutionReq) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *QuerySolutionReq) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *QuerySolutionReq) GetLanguage() int32 {
	if x != nil {
		return x.Language
	}
	return 0
}

func (x *QuerySolutionReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

type QuerySolutionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string      `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`   // 返回信息
	Code     int32       `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`        // 返回码
	Solution []*Solution `protobuf:"bytes,3,rep,name=solution,proto3" json:"solution,omitempty"` // 提交数据
	Total    int32       `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`      // 总数
}

func (x *QuerySolutionRsp) Reset() {
	*x = QuerySolutionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySolutionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySolutionRsp) ProtoMessage() {}

func (x *QuerySolutionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySolutionRsp.ProtoReflect.Descriptor instead.
func (*QuerySolutionRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{21}
}

func (x *QuerySolutionRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QuerySolutionRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QuerySolutionRsp) GetSolution() []*Solution {
	if x != nil {
		return x.Solution
	}
	return nil
}

func (x *QuerySolutionRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryUserProblemSolutionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   int32  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`    // 用户编号
	Problems string `protobuf:"bytes,2,opt,name=problems,proto3" json:"problems,omitempty"` // 题目编号集合
}

func (x *QueryUserProblemSolutionReq) Reset() {
	*x = QueryUserProblemSolutionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserProblemSolutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserProblemSolutionReq) ProtoMessage() {}

func (x *QueryUserProblemSolutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserProblemSolutionReq.ProtoReflect.Descriptor instead.
func (*QueryUserProblemSolutionReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{22}
}

func (x *QueryUserProblemSolutionReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QueryUserProblemSolutionReq) GetProblems() string {
	if x != nil {
		return x.Problems
	}
	return ""
}

type QueryUserProblemSolutionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message          string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`                   // 返回信息
	Code             int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`                        // 返回码
	AcceptProblems   string `protobuf:"bytes,3,opt,name=acceptProblems,proto3" json:"acceptProblems,omitempty"`     // 正确的题目
	UnAcceptProblems string `protobuf:"bytes,4,opt,name=unAcceptProblems,proto3" json:"unAcceptProblems,omitempty"` // 不正确的题目
}

func (x *QueryUserProblemSolutionRsp) Reset() {
	*x = QueryUserProblemSolutionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserProblemSolutionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserProblemSolutionRsp) ProtoMessage() {}

func (x *QueryUserProblemSolutionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserProblemSolutionRsp.ProtoReflect.Descriptor instead.
func (*QueryUserProblemSolutionRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{23}
}

func (x *QueryUserProblemSolutionRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryUserProblemSolutionRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryUserProblemSolutionRsp) GetAcceptProblems() string {
	if x != nil {
		return x.AcceptProblems
	}
	return ""
}

func (x *QueryUserProblemSolutionRsp) GetUnAcceptProblems() string {
	if x != nil {
		return x.UnAcceptProblems
	}
	return ""
}

type AddSolutionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemID    int32  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"`        // 题目编号
	UserID       int32  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`              // 用户编号
	Language     int32  `protobuf:"varint,3,opt,name=language,proto3" json:"language,omitempty"`          // 语言
	ContestID    int32  `protobuf:"varint,4,opt,name=contestID,proto3" json:"contestID,omitempty"`        // 考试编号
	UserCode     string `protobuf:"bytes,5,opt,name=userCode,proto3" json:"userCode,omitempty"`           // 用户代码
	Input        string `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`                 // 输入
	KeyAction    string `protobuf:"bytes,7,opt,name=keyAction,proto3" json:"keyAction,omitempty"`         // 击键行为
	Type         int32  `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`                  // 类型
	Ip           string `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`                       // ip信息
	StartTime    string `protobuf:"bytes,10,opt,name=startTime,proto3" json:"startTime,omitempty"`        // 进入题目的时间
	SolutionType int32  `protobuf:"varint,11,opt,name=solutionType,proto3" json:"solutionType,omitempty"` // 提交的类型
}

func (x *AddSolutionReq) Reset() {
	*x = AddSolutionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSolutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSolutionReq) ProtoMessage() {}

func (x *AddSolutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSolutionReq.ProtoReflect.Descriptor instead.
func (*AddSolutionReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{24}
}

func (x *AddSolutionReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *AddSolutionReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *AddSolutionReq) GetLanguage() int32 {
	if x != nil {
		return x.Language
	}
	return 0
}

func (x *AddSolutionReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

func (x *AddSolutionReq) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *AddSolutionReq) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *AddSolutionReq) GetKeyAction() string {
	if x != nil {
		return x.KeyAction
	}
	return ""
}

func (x *AddSolutionReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AddSolutionReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AddSolutionReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *AddSolutionReq) GetSolutionType() int32 {
	if x != nil {
		return x.SolutionType
	}
	return 0
}

type QuerySimListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestID int32 `protobuf:"varint,1,opt,name=contestID,proto3" json:"contestID,omitempty"` //  作业编号
	Page      int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`           // 页
	Limit     int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`         // 页大小
	UserID    int32 `protobuf:"varint,4,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
}

func (x *QuerySimListReq) Reset() {
	*x = QuerySimListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySimListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySimListReq) ProtoMessage() {}

func (x *QuerySimListReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySimListReq.ProtoReflect.Descriptor instead.
func (*QuerySimListReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{25}
}

func (x *QuerySimListReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

func (x *QuerySimListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QuerySimListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QuerySimListReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QuerySimListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code    int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Sim     []*Sim `protobuf:"bytes,3,rep,name=sim,proto3" json:"sim,omitempty"`         // 相似度列表
	Total   int32  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`    // 总数
}

func (x *QuerySimListRsp) Reset() {
	*x = QuerySimListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySimListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySimListRsp) ProtoMessage() {}

func (x *QuerySimListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySimListRsp.ProtoReflect.Descriptor instead.
func (*QuerySimListRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{26}
}

func (x *QuerySimListRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QuerySimListRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QuerySimListRsp) GetSim() []*Sim {
	if x != nil {
		return x.Sim
	}
	return nil
}

func (x *QuerySimListRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QuerySimSolutionDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionID    int32 `protobuf:"varint,1,opt,name=solutionID,proto3" json:"solutionID,omitempty"`       // 提交编号
	SimSolutionID int32 `protobuf:"varint,2,opt,name=simSolutionID,proto3" json:"simSolutionID,omitempty"` // 相似的提交编号
	UserID        int32 `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`               // 用户编号
}

func (x *QuerySimSolutionDataReq) Reset() {
	*x = QuerySimSolutionDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySimSolutionDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySimSolutionDataReq) ProtoMessage() {}

func (x *QuerySimSolutionDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySimSolutionDataReq.ProtoReflect.Descriptor instead.
func (*QuerySimSolutionDataReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{27}
}

func (x *QuerySimSolutionDataReq) GetSolutionID() int32 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

func (x *QuerySimSolutionDataReq) GetSimSolutionID() int32 {
	if x != nil {
		return x.SimSolutionID
	}
	return 0
}

func (x *QuerySimSolutionDataReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QuerySimSolutionDataRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     string    `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`         // 返回信息
	Code        int32     `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`              // 返回码
	Solution    *Solution `protobuf:"bytes,3,opt,name=solution,proto3" json:"solution,omitempty"`       // 提交
	SimSolution *Solution `protobuf:"bytes,4,opt,name=simSolution,proto3" json:"simSolution,omitempty"` // 相似的对比提交
}

func (x *QuerySimSolutionDataRsp) Reset() {
	*x = QuerySimSolutionDataRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySimSolutionDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySimSolutionDataRsp) ProtoMessage() {}

func (x *QuerySimSolutionDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySimSolutionDataRsp.ProtoReflect.Descriptor instead.
func (*QuerySimSolutionDataRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{28}
}

func (x *QuerySimSolutionDataRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QuerySimSolutionDataRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QuerySimSolutionDataRsp) GetSolution() *Solution {
	if x != nil {
		return x.Solution
	}
	return nil
}

func (x *QuerySimSolutionDataRsp) GetSimSolution() *Solution {
	if x != nil {
		return x.SimSolution
	}
	return nil
}

type Sim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemName   string `protobuf:"bytes,1,opt,name=problemName,proto3" json:"problemName,omitempty"`      // 题目名称
	SolutionID    int32  `protobuf:"varint,2,opt,name=solutionID,proto3" json:"solutionID,omitempty"`       // 提交编号
	SimSolutionID int32  `protobuf:"varint,3,opt,name=simSolutionID,proto3" json:"simSolutionID,omitempty"` // 相似的提交编号
	UserName      string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`            // 用户名
	SimScore      int32  `protobuf:"varint,5,opt,name=simScore,proto3" json:"simScore,omitempty"`           // 相似度得分
}

func (x *Sim) Reset() {
	*x = Sim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sim) ProtoMessage() {}

func (x *Sim) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sim.ProtoReflect.Descriptor instead.
func (*Sim) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{29}
}

func (x *Sim) GetProblemName() string {
	if x != nil {
		return x.ProblemName
	}
	return ""
}

func (x *Sim) GetSolutionID() int32 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

func (x *Sim) GetSimSolutionID() int32 {
	if x != nil {
		return x.SimSolutionID
	}
	return 0
}

func (x *Sim) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Sim) GetSimScore() int32 {
	if x != nil {
		return x.SimScore
	}
	return 0
}

type QueryLatestCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemID int32 `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"` // 题目编号
	UserID    int32 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
}

func (x *QueryLatestCodeReq) Reset() {
	*x = QueryLatestCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryLatestCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLatestCodeReq) ProtoMessage() {}

func (x *QueryLatestCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLatestCodeReq.ProtoReflect.Descriptor instead.
func (*QueryLatestCodeReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{30}
}

func (x *QueryLatestCodeReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *QueryLatestCodeReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryLatestCodeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`   // 返回信息
	Code     int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`        // 返回码
	LastCode *Code  `protobuf:"bytes,3,opt,name=lastCode,proto3" json:"lastCode,omitempty"` // 最新的代码
}

func (x *QueryLatestCodeRsp) Reset() {
	*x = QueryLatestCodeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryLatestCodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLatestCodeRsp) ProtoMessage() {}

func (x *QueryLatestCodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLatestCodeRsp.ProtoReflect.Descriptor instead.
func (*QueryLatestCodeRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{31}
}

func (x *QueryLatestCodeRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryLatestCodeRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryLatestCodeRsp) GetLastCode() *Code {
	if x != nil {
		return x.LastCode
	}
	return nil
}

type QuerySourceCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionID int32 `protobuf:"varint,1,opt,name=solutionID,proto3" json:"solutionID,omitempty"` // 提交编号
	UserID     int32 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`         // 用户编号
	QueryType  int32 `protobuf:"varint,3,opt,name=queryType,proto3" json:"queryType,omitempty"`   // 请求类型
}

func (x *QuerySourceCodeReq) Reset() {
	*x = QuerySourceCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySourceCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySourceCodeReq) ProtoMessage() {}

func (x *QuerySourceCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySourceCodeReq.ProtoReflect.Descriptor instead.
func (*QuerySourceCodeReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{32}
}

func (x *QuerySourceCodeReq) GetSolutionID() int32 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

func (x *QuerySourceCodeReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QuerySourceCodeReq) GetQueryType() int32 {
	if x != nil {
		return x.QueryType
	}
	return 0
}

type QuerySourceCodeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string    `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`   // 返回信息
	Code     int32     `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`        // 返回码
	Solution *Solution `protobuf:"bytes,3,opt,name=solution,proto3" json:"solution,omitempty"` // 提交信息
}

func (x *QuerySourceCodeRsp) Reset() {
	*x = QuerySourceCodeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySourceCodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySourceCodeRsp) ProtoMessage() {}

func (x *QuerySourceCodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySourceCodeRsp.ProtoReflect.Descriptor instead.
func (*QuerySourceCodeRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{33}
}

func (x *QuerySourceCodeRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QuerySourceCodeRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QuerySourceCodeRsp) GetSolution() *Solution {
	if x != nil {
		return x.Solution
	}
	return nil
}

type QuerySolutionResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionID int32 `protobuf:"varint,1,opt,name=solutionID,proto3" json:"solutionID,omitempty"` // 提交编号
	UserID     int32 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`         // 用户编号
}

func (x *QuerySolutionResultReq) Reset() {
	*x = QuerySolutionResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySolutionResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySolutionResultReq) ProtoMessage() {}

func (x *QuerySolutionResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySolutionResultReq.ProtoReflect.Descriptor instead.
func (*QuerySolutionResultReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{34}
}

func (x *QuerySolutionResultReq) GetSolutionID() int32 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

func (x *QuerySolutionResultReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QuerySolutionResultRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`             // 返回信息
	Code          int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`                  // 返回码
	Result        int32  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`              // 结果编号
	ResultMessage string `protobuf:"bytes,4,opt,name=resultMessage,proto3" json:"resultMessage,omitempty"` // 信息
}

func (x *QuerySolutionResultRsp) Reset() {
	*x = QuerySolutionResultRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySolutionResultRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySolutionResultRsp) ProtoMessage() {}

func (x *QuerySolutionResultRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySolutionResultRsp.ProtoReflect.Descriptor instead.
func (*QuerySolutionResultRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{35}
}

func (x *QuerySolutionResultRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QuerySolutionResultRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QuerySolutionResultRsp) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *QuerySolutionResultRsp) GetResultMessage() string {
	if x != nil {
		return x.ResultMessage
	}
	return ""
}

type QueryRuntimeInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionID int32 `protobuf:"varint,1,opt,name=solutionID,proto3" json:"solutionID,omitempty"` // 提交编号
	UserID     int32 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`         // 用户编号
	QueryType  int32 `protobuf:"varint,3,opt,name=queryType,proto3" json:"queryType,omitempty"`   // 请求类型
}

func (x *QueryRuntimeInfoReq) Reset() {
	*x = QueryRuntimeInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRuntimeInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRuntimeInfoReq) ProtoMessage() {}

func (x *QueryRuntimeInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRuntimeInfoReq.ProtoReflect.Descriptor instead.
func (*QueryRuntimeInfoReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{36}
}

func (x *QueryRuntimeInfoReq) GetSolutionID() int32 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

func (x *QueryRuntimeInfoReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QueryRuntimeInfoReq) GetQueryType() int32 {
	if x != nil {
		return x.QueryType
	}
	return 0
}

type QueryRuntimeInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message           string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`                      // 返回信息
	Code              int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`                           // 返回码
	RuntimeInfo       string `protobuf:"bytes,3,opt,name=runtimeInfo,proto3" json:"runtimeInfo,omitempty"`              // 运行信息
	CompileInfoLength int32  `protobuf:"varint,4,opt,name=compileInfoLength,proto3" json:"compileInfoLength,omitempty"` //  编译信息的长度
}

func (x *QueryRuntimeInfoRsp) Reset() {
	*x = QueryRuntimeInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRuntimeInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRuntimeInfoRsp) ProtoMessage() {}

func (x *QueryRuntimeInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRuntimeInfoRsp.ProtoReflect.Descriptor instead.
func (*QueryRuntimeInfoRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{37}
}

func (x *QueryRuntimeInfoRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryRuntimeInfoRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryRuntimeInfoRsp) GetRuntimeInfo() string {
	if x != nil {
		return x.RuntimeInfo
	}
	return ""
}

func (x *QueryRuntimeInfoRsp) GetCompileInfoLength() int32 {
	if x != nil {
		return x.CompileInfoLength
	}
	return 0
}

type RejudgeSolutionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      int32 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`           // 用户编号
	Id          int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                   // 编号
	RejudgeType int32 `protobuf:"varint,3,opt,name=rejudgeType,proto3" json:"rejudgeType,omitempty"` // 类型
}

func (x *RejudgeSolutionReq) Reset() {
	*x = RejudgeSolutionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejudgeSolutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejudgeSolutionReq) ProtoMessage() {}

func (x *RejudgeSolutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejudgeSolutionReq.ProtoReflect.Descriptor instead.
func (*RejudgeSolutionReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{38}
}

func (x *RejudgeSolutionReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *RejudgeSolutionReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RejudgeSolutionReq) GetRejudgeType() int32 {
	if x != nil {
		return x.RejudgeType
	}
	return 0
}

type CommonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code    int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
}

func (x *CommonRsp) Reset() {
	*x = CommonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRsp) ProtoMessage() {}

func (x *CommonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRsp.ProtoReflect.Descriptor instead.
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{39}
}

func (x *CommonRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type CountUserProblemSolutionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int32 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	ProblemID int32 `protobuf:"varint,2,opt,name=problemID,proto3" json:"problemID,omitempty"` // 题目编号
}

func (x *CountUserProblemSolutionReq) Reset() {
	*x = CountUserProblemSolutionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountUserProblemSolutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountUserProblemSolutionReq) ProtoMessage() {}

func (x *CountUserProblemSolutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountUserProblemSolutionReq.ProtoReflect.Descriptor instead.
func (*CountUserProblemSolutionReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{40}
}

func (x *CountUserProblemSolutionReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CountUserProblemSolutionReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

type CountUserProblemSolutionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`          // 返回信息
	Code        int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`               // 返回码
	SubmitCount int32  `protobuf:"varint,3,opt,name=submitCount,proto3" json:"submitCount,omitempty"` // 提交次数
	AcceptCount int32  `protobuf:"varint,4,opt,name=acceptCount,proto3" json:"acceptCount,omitempty"` //  正确次数
}

func (x *CountUserProblemSolutionRsp) Reset() {
	*x = CountUserProblemSolutionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountUserProblemSolutionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountUserProblemSolutionRsp) ProtoMessage() {}

func (x *CountUserProblemSolutionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountUserProblemSolutionRsp.ProtoReflect.Descriptor instead.
func (*CountUserProblemSolutionRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{41}
}

func (x *CountUserProblemSolutionRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CountUserProblemSolutionRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CountUserProblemSolutionRsp) GetSubmitCount() int32 {
	if x != nil {
		return x.SubmitCount
	}
	return 0
}

func (x *CountUserProblemSolutionRsp) GetAcceptCount() int32 {
	if x != nil {
		return x.AcceptCount
	}
	return 0
}

type Solution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionID       int32   `protobuf:"varint,1,opt,name=solutionID,proto3" json:"solutionID,omitempty"`              // 提交的编号
	ProblemID        int32   `protobuf:"varint,2,opt,name=problemID,proto3" json:"problemID,omitempty"`                // 题目编号
	Result           int32   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`                      // 结果
	PassRate         float32 `protobuf:"fixed32,4,opt,name=passRate,proto3" json:"passRate,omitempty"`                 // 通过率
	Memory           int32   `protobuf:"varint,5,opt,name=memory,proto3" json:"memory,omitempty"`                      // 内存限制
	TimeLimit        int32   `protobuf:"varint,6,opt,name=timeLimit,proto3" json:"timeLimit,omitempty"`                // 时间限制
	Language         int32   `protobuf:"varint,7,opt,name=language,proto3" json:"language,omitempty"`                  // 语言
	CodeLength       int32   `protobuf:"varint,8,opt,name=codeLength,proto3" json:"codeLength,omitempty"`              // 代码长度
	Creator          string  `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`                     // 提交者
	CreatTime        string  `protobuf:"bytes,10,opt,name=creatTime,proto3" json:"creatTime,omitempty"`                // 提交时间
	IsSeeRuntimeInfo int32   `protobuf:"varint,11,opt,name=isSeeRuntimeInfo,proto3" json:"isSeeRuntimeInfo,omitempty"` // 是否可见运行信息
	UserCode         string  `protobuf:"bytes,12,opt,name=userCode,proto3" json:"userCode,omitempty"`                  // 用户提交的代码
	CreatorID        int32   `protobuf:"varint,13,opt,name=creatorID,proto3" json:"creatorID,omitempty"`               // 提交者编号
	CodeView         int32   `protobuf:"varint,14,opt,name=codeView,proto3" json:"codeView,omitempty"`                 // 代码是否可见
	ProblemName      string  `protobuf:"bytes,15,opt,name=problemName,proto3" json:"problemName,omitempty"`            // 题目名称
	UserNumber       string  `protobuf:"bytes,16,opt,name=userNumber,proto3" json:"userNumber,omitempty"`              // 用户学号
}

func (x *Solution) Reset() {
	*x = Solution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Solution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Solution) ProtoMessage() {}

func (x *Solution) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Solution.ProtoReflect.Descriptor instead.
func (*Solution) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{42}
}

func (x *Solution) GetSolutionID() int32 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

func (x *Solution) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *Solution) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *Solution) GetPassRate() float32 {
	if x != nil {
		return x.PassRate
	}
	return 0
}

func (x *Solution) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Solution) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *Solution) GetLanguage() int32 {
	if x != nil {
		return x.Language
	}
	return 0
}

func (x *Solution) GetCodeLength() int32 {
	if x != nil {
		return x.CodeLength
	}
	return 0
}

func (x *Solution) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Solution) GetCreatTime() string {
	if x != nil {
		return x.CreatTime
	}
	return ""
}

func (x *Solution) GetIsSeeRuntimeInfo() int32 {
	if x != nil {
		return x.IsSeeRuntimeInfo
	}
	return 0
}

func (x *Solution) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *Solution) GetCreatorID() int32 {
	if x != nil {
		return x.CreatorID
	}
	return 0
}

func (x *Solution) GetCodeView() int32 {
	if x != nil {
		return x.CodeView
	}
	return 0
}

func (x *Solution) GetProblemName() string {
	if x != nil {
		return x.ProblemName
	}
	return ""
}

func (x *Solution) GetUserNumber() string {
	if x != nil {
		return x.UserNumber
	}
	return ""
}

type Code struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeID    int32  `protobuf:"varint,1,opt,name=codeID,proto3" json:"codeID,omitempty"`      // 代码编号
	UserCode  string `protobuf:"bytes,2,opt,name=userCode,proto3" json:"userCode,omitempty"`   // 代码
	CodeName  string `protobuf:"bytes,3,opt,name=codeName,proto3" json:"codeName,omitempty"`   // 代码名
	CodeType  int32  `protobuf:"varint,4,opt,name=codeType,proto3" json:"codeType,omitempty"`  // 代码类型
	CreatTime string `protobuf:"bytes,5,opt,name=creatTime,proto3" json:"creatTime,omitempty"` // 创建时间
	UserName  string `protobuf:"bytes,6,opt,name=userName,proto3" json:"userName,omitempty"`   // 用户名
}

func (x *Code) Reset() {
	*x = Code{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solution_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Code) ProtoMessage() {}

func (x *Code) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Code.ProtoReflect.Descriptor instead.
func (*Code) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{43}
}

func (x *Code) GetCodeID() int32 {
	if x != nil {
		return x.CodeID
	}
	return 0
}

func (x *Code) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *Code) GetCodeName() string {
	if x != nil {
		return x.CodeName
	}
	return ""
}

func (x *Code) GetCodeType() int32 {
	if x != nil {
		return x.CodeType
	}
	return 0
}

func (x *Code) GetCreatTime() string {
	if x != nil {
		return x.CreatTime
	}
	return ""
}

func (x *Code) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

var File_solution_proto protoreflect.FileDescriptor

var file_solution_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x23, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x32, 0x0a, 0x18, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xc8, 0x01,
	0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x10, 0x75, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x22, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a,
	0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3d,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x68, 0x0a,
	0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x51, 0x0a, 0x19, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x98, 0x01, 0x0a, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x6a,
	0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22,
	0x8e, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0x8a, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xa6, 0x03,
	0x0a, 0x12, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x18, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x18, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x22, 0x57, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x53,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xdd, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xd8, 0x01,
	0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x51, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x75, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x71, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x79, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x73, 0x69, 0x6d, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x69, 0x6d, 0x52, 0x03, 0x73, 0x69, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x77, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x73, 0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x6a,
	0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa5, 0x01, 0x0a, 0x03, 0x53, 0x69, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x6d,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x73, 0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x69, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x69, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x6a, 0x2e, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6a, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x75, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x16, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x84, 0x01, 0x0a, 0x16,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x6b, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x93, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x5e, 0x0a, 0x12, 0x52, 0x65, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x53, 0x0a, 0x1b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x44, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xea, 0x03, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f,
	0x64, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x53, 0x65, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x73, 0x53, 0x65,
	0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x4a, 0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x6f,
	0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x32,
	0x59, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x46, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x32, 0xd2, 0x0f, 0x0a, 0x0e, 0x53,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x70, 0x0a,
	0x18, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x6f, 0x6a, 0x2e, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x0f, 0x52, 0x65, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x20, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23,
	0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e,
	0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24,
	0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b,
	0x41, 0x64, 0x64, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6f, 0x6a,
	0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e,
	0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x6f, 0x6a, 0x2e,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6f, 0x6a, 0x2e, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e,
	0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x53,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x6a, 0x2e,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x14, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x24, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x6a, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x6f, 0x6a, 0x2e, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x1d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x6f,
	0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x6f, 0x6a, 0x2e, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x15, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x6a,
	0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x79, 0x53,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x79, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x53,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42,
	0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x73,
	0x75, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_solution_proto_rawDescOnce sync.Once
	file_solution_proto_rawDescData = file_solution_proto_rawDesc
)

func file_solution_proto_rawDescGZIP() []byte {
	file_solution_proto_rawDescOnce.Do(func() {
		file_solution_proto_rawDescData = protoimpl.X.CompressGZIP(file_solution_proto_rawDescData)
	})
	return file_solution_proto_rawDescData
}

var file_solution_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_solution_proto_goTypes = []interface{}{
	(*QueryTodaySolutionRsp)(nil),              // 0: oj.solution.QueryTodaySolutionRsp
	(*UserIDReq)(nil),                          // 1: oj.solution.UserIDReq
	(*QueryMySolutionRecordReq)(nil),           // 2: oj.solution.QueryMySolutionRecordReq
	(*QueryMySolutionRecordRsp)(nil),           // 3: oj.solution.QueryMySolutionRecordRsp
	(*QueryContestSolutionSubmitCountRsp)(nil), // 4: oj.solution.QueryContestSolutionSubmitCountRsp
	(*ContestSolutionSubmitCount)(nil),         // 5: oj.solution.ContestSolutionSubmitCount
	(*QueryRankDataReq)(nil),                   // 6: oj.solution.QueryRankDataReq
	(*CountContestSubmissionReq)(nil),          // 7: oj.solution.CountContestSubmissionReq
	(*CountContestProblemSubmissionRsp)(nil),   // 8: oj.solution.CountContestProblemSubmissionRsp
	(*ProblemClassifiedSolution)(nil),          // 9: oj.solution.ProblemClassifiedSolution
	(*CountContestSubmissionRsp)(nil),          // 10: oj.solution.CountContestSubmissionRsp
	(*ClassifiedSolution)(nil),                 // 11: oj.solution.ClassifiedSolution
	(*QueryContestRankDataReq)(nil),            // 12: oj.solution.QueryContestRankDataReq
	(*QueryContestRankDataRsp)(nil),            // 13: oj.solution.QueryContestRankDataRsp
	(*Problem)(nil),                            // 14: oj.solution.Problem
	(*Rank)(nil),                               // 15: oj.solution.Rank
	(*ContestSolutionData)(nil),                // 16: oj.solution.ContestSolutionData
	(*AddCodeReq)(nil),                         // 17: oj.solution.AddCodeReq
	(*AddKeyActionReq)(nil),                    // 18: oj.solution.AddKeyActionReq
	(*AddSolutionRsp)(nil),                     // 19: oj.solution.AddSolutionRsp
	(*QuerySolutionReq)(nil),                   // 20: oj.solution.QuerySolutionReq
	(*QuerySolutionRsp)(nil),                   // 21: oj.solution.QuerySolutionRsp
	(*QueryUserProblemSolutionReq)(nil),        // 22: oj.solution.QueryUserProblemSolutionReq
	(*QueryUserProblemSolutionRsp)(nil),        // 23: oj.solution.QueryUserProblemSolutionRsp
	(*AddSolutionReq)(nil),                     // 24: oj.solution.AddSolutionReq
	(*QuerySimListReq)(nil),                    // 25: oj.solution.QuerySimListReq
	(*QuerySimListRsp)(nil),                    // 26: oj.solution.QuerySimListRsp
	(*QuerySimSolutionDataReq)(nil),            // 27: oj.solution.QuerySimSolutionDataReq
	(*QuerySimSolutionDataRsp)(nil),            // 28: oj.solution.QuerySimSolutionDataRsp
	(*Sim)(nil),                                // 29: oj.solution.Sim
	(*QueryLatestCodeReq)(nil),                 // 30: oj.solution.QueryLatestCodeReq
	(*QueryLatestCodeRsp)(nil),                 // 31: oj.solution.QueryLatestCodeRsp
	(*QuerySourceCodeReq)(nil),                 // 32: oj.solution.QuerySourceCodeReq
	(*QuerySourceCodeRsp)(nil),                 // 33: oj.solution.QuerySourceCodeRsp
	(*QuerySolutionResultReq)(nil),             // 34: oj.solution.QuerySolutionResultReq
	(*QuerySolutionResultRsp)(nil),             // 35: oj.solution.QuerySolutionResultRsp
	(*QueryRuntimeInfoReq)(nil),                // 36: oj.solution.QueryRuntimeInfoReq
	(*QueryRuntimeInfoRsp)(nil),                // 37: oj.solution.QueryRuntimeInfoRsp
	(*RejudgeSolutionReq)(nil),                 // 38: oj.solution.RejudgeSolutionReq
	(*CommonRsp)(nil),                          // 39: oj.solution.CommonRsp
	(*CountUserProblemSolutionReq)(nil),        // 40: oj.solution.CountUserProblemSolutionReq
	(*CountUserProblemSolutionRsp)(nil),        // 41: oj.solution.CountUserProblemSolutionRsp
	(*Solution)(nil),                           // 42: oj.solution.Solution
	(*Code)(nil),                               // 43: oj.solution.Code
}
var file_solution_proto_depIdxs = []int32{
	11, // 0: oj.solution.QueryTodaySolutionRsp.statistics:type_name -> oj.solution.ClassifiedSolution
	14, // 1: oj.solution.QueryMySolutionRecordRsp.acceptProblems:type_name -> oj.solution.Problem
	14, // 2: oj.solution.QueryMySolutionRecordRsp.unAcceptProblems:type_name -> oj.solution.Problem
	5,  // 3: oj.solution.QueryContestSolutionSubmitCountRsp.accept:type_name -> oj.solution.ContestSolutionSubmitCount
	5,  // 4: oj.solution.QueryContestSolutionSubmitCountRsp.total:type_name -> oj.solution.ContestSolutionSubmitCount
	9,  // 5: oj.solution.CountContestProblemSubmissionRsp.statistics:type_name -> oj.solution.ProblemClassifiedSolution
	11, // 6: oj.solution.ProblemClassifiedSolution.statistics:type_name -> oj.solution.ClassifiedSolution
	11, // 7: oj.solution.CountContestSubmissionRsp.statistics:type_name -> oj.solution.ClassifiedSolution
	14, // 8: oj.solution.QueryContestRankDataRsp.problems:type_name -> oj.solution.Problem
	15, // 9: oj.solution.QueryContestRankDataRsp.ranks:type_name -> oj.solution.Rank
	16, // 10: oj.solution.Rank.solutionData:type_name -> oj.solution.ContestSolutionData
	42, // 11: oj.solution.QuerySolutionRsp.solution:type_name -> oj.solution.Solution
	29, // 12: oj.solution.QuerySimListRsp.sim:type_name -> oj.solution.Sim
	42, // 13: oj.solution.QuerySimSolutionDataRsp.solution:type_name -> oj.solution.Solution
	42, // 14: oj.solution.QuerySimSolutionDataRsp.simSolution:type_name -> oj.solution.Solution
	43, // 15: oj.solution.QueryLatestCodeRsp.lastCode:type_name -> oj.solution.Code
	42, // 16: oj.solution.QuerySourceCodeRsp.solution:type_name -> oj.solution.Solution
	17, // 17: oj.solution.CodeServer.AddCode:input_type -> oj.solution.AddCodeReq
	18, // 18: oj.solution.KeyActionServer.AddKeyAction:input_type -> oj.solution.AddKeyActionReq
	40, // 19: oj.solution.SolutionServer.CountUserProblemSolution:input_type -> oj.solution.CountUserProblemSolutionReq
	38, // 20: oj.solution.SolutionServer.RejudgeSolution:input_type -> oj.solution.RejudgeSolutionReq
	36, // 21: oj.solution.SolutionServer.QueryRuntimeInfo:input_type -> oj.solution.QueryRuntimeInfoReq
	34, // 22: oj.solution.SolutionServer.QuerySolutionResult:input_type -> oj.solution.QuerySolutionResultReq
	32, // 23: oj.solution.SolutionServer.QuerySourceCode:input_type -> oj.solution.QuerySourceCodeReq
	30, // 24: oj.solution.SolutionServer.QueryLatestCode:input_type -> oj.solution.QueryLatestCodeReq
	25, // 25: oj.solution.SolutionServer.QuerySimList:input_type -> oj.solution.QuerySimListReq
	27, // 26: oj.solution.SolutionServer.QuerySimSolutionData:input_type -> oj.solution.QuerySimSolutionDataReq
	24, // 27: oj.solution.SolutionServer.AddSolution:input_type -> oj.solution.AddSolutionReq
	22, // 28: oj.solution.SolutionServer.QueryUserProblemSolution:input_type -> oj.solution.QueryUserProblemSolutionReq
	20, // 29: oj.solution.SolutionServer.QuerySolution:input_type -> oj.solution.QuerySolutionReq
	24, // 30: oj.solution.SolutionServer.AddTestSolution:input_type -> oj.solution.AddSolutionReq
	12, // 31: oj.solution.SolutionServer.QueryContestRankData:input_type -> oj.solution.QueryContestRankDataReq
	7,  // 32: oj.solution.SolutionServer.CountContestSubmission:input_type -> oj.solution.CountContestSubmissionReq
	7,  // 33: oj.solution.SolutionServer.CountContestProblemSubmission:input_type -> oj.solution.CountContestSubmissionReq
	6,  // 34: oj.solution.SolutionServer.QueryRankData:input_type -> oj.solution.QueryRankDataReq
	6,  // 35: oj.solution.SolutionServer.QueryContestSolutionSubmitCount:input_type -> oj.solution.QueryRankDataReq
	2,  // 36: oj.solution.SolutionServer.QueryMySolutionRecord:input_type -> oj.solution.QueryMySolutionRecordReq
	2,  // 37: oj.solution.SolutionServer.CountMySolution:input_type -> oj.solution.QueryMySolutionRecordReq
	1,  // 38: oj.solution.SolutionServer.QueryTodaySolution:input_type -> oj.solution.UserIDReq
	20, // 39: oj.solution.SolutionServer.QueryMySolution:input_type -> oj.solution.QuerySolutionReq
	39, // 40: oj.solution.CodeServer.AddCode:output_type -> oj.solution.CommonRsp
	39, // 41: oj.solution.KeyActionServer.AddKeyAction:output_type -> oj.solution.CommonRsp
	41, // 42: oj.solution.SolutionServer.CountUserProblemSolution:output_type -> oj.solution.CountUserProblemSolutionRsp
	39, // 43: oj.solution.SolutionServer.RejudgeSolution:output_type -> oj.solution.CommonRsp
	37, // 44: oj.solution.SolutionServer.QueryRuntimeInfo:output_type -> oj.solution.QueryRuntimeInfoRsp
	35, // 45: oj.solution.SolutionServer.QuerySolutionResult:output_type -> oj.solution.QuerySolutionResultRsp
	33, // 46: oj.solution.SolutionServer.QuerySourceCode:output_type -> oj.solution.QuerySourceCodeRsp
	31, // 47: oj.solution.SolutionServer.QueryLatestCode:output_type -> oj.solution.QueryLatestCodeRsp
	26, // 48: oj.solution.SolutionServer.QuerySimList:output_type -> oj.solution.QuerySimListRsp
	28, // 49: oj.solution.SolutionServer.QuerySimSolutionData:output_type -> oj.solution.QuerySimSolutionDataRsp
	19, // 50: oj.solution.SolutionServer.AddSolution:output_type -> oj.solution.AddSolutionRsp
	23, // 51: oj.solution.SolutionServer.QueryUserProblemSolution:output_type -> oj.solution.QueryUserProblemSolutionRsp
	21, // 52: oj.solution.SolutionServer.QuerySolution:output_type -> oj.solution.QuerySolutionRsp
	19, // 53: oj.solution.SolutionServer.AddTestSolution:output_type -> oj.solution.AddSolutionRsp
	13, // 54: oj.solution.SolutionServer.QueryContestRankData:output_type -> oj.solution.QueryContestRankDataRsp
	10, // 55: oj.solution.SolutionServer.CountContestSubmission:output_type -> oj.solution.CountContestSubmissionRsp
	8,  // 56: oj.solution.SolutionServer.CountContestProblemSubmission:output_type -> oj.solution.CountContestProblemSubmissionRsp
	21, // 57: oj.solution.SolutionServer.QueryRankData:output_type -> oj.solution.QuerySolutionRsp
	4,  // 58: oj.solution.SolutionServer.QueryContestSolutionSubmitCount:output_type -> oj.solution.QueryContestSolutionSubmitCountRsp
	3,  // 59: oj.solution.SolutionServer.QueryMySolutionRecord:output_type -> oj.solution.QueryMySolutionRecordRsp
	10, // 60: oj.solution.SolutionServer.CountMySolution:output_type -> oj.solution.CountContestSubmissionRsp
	0,  // 61: oj.solution.SolutionServer.QueryTodaySolution:output_type -> oj.solution.QueryTodaySolutionRsp
	21, // 62: oj.solution.SolutionServer.QueryMySolution:output_type -> oj.solution.QuerySolutionRsp
	40, // [40:63] is the sub-list for method output_type
	17, // [17:40] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_solution_proto_init() }
func file_solution_proto_init() {
	if File_solution_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_solution_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTodaySolutionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMySolutionRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMySolutionRecordRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryContestSolutionSubmitCountRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestSolutionSubmitCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRankDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountContestSubmissionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountContestProblemSubmissionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProblemClassifiedSolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountContestSubmissionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassifiedSolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryContestRankDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryContestRankDataRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Problem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestSolutionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKeyActionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSolutionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySolutionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySolutionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserProblemSolutionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserProblemSolutionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSolutionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySimListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySimListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySimSolutionDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySimSolutionDataRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryLatestCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryLatestCodeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySourceCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySourceCodeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySolutionResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySolutionResultRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRuntimeInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRuntimeInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejudgeSolutionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountUserProblemSolutionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountUserProblemSolutionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Solution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solution_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Code); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_solution_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_solution_proto_goTypes,
		DependencyIndexes: file_solution_proto_depIdxs,
		MessageInfos:      file_solution_proto_msgTypes,
	}.Build()
	File_solution_proto = out.File
	file_solution_proto_rawDesc = nil
	file_solution_proto_goTypes = nil
	file_solution_proto_depIdxs = nil
}
