// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.19.1
// source: solution.proto

package solution

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QuerySimListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestID     int32                  `protobuf:"varint,1,opt,name=contestID,proto3" json:"contestID,omitempty"` //  作业编号
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`           // 页
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`         // 页大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySimListReq) Reset() {
	*x = QuerySimListReq{}
	mi := &file_solution_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySimListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySimListReq) ProtoMessage() {}

func (x *QuerySimListReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySimListReq.ProtoReflect.Descriptor instead.
func (*QuerySimListReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{0}
}

func (x *QuerySimListReq) GetContestID() int32 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

func (x *QuerySimListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QuerySimListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type QuerySimListRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	Sim           []*Sim                 `protobuf:"bytes,3,rep,name=sim,proto3" json:"sim,omitempty"`         // 相似度列表
	Count         int32                  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`    // 总数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySimListRsp) Reset() {
	*x = QuerySimListRsp{}
	mi := &file_solution_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySimListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySimListRsp) ProtoMessage() {}

func (x *QuerySimListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySimListRsp.ProtoReflect.Descriptor instead.
func (*QuerySimListRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{1}
}

func (x *QuerySimListRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QuerySimListRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QuerySimListRsp) GetSim() []*Sim {
	if x != nil {
		return x.Sim
	}
	return nil
}

func (x *QuerySimListRsp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type QuerySimSolutionDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SolutionID    int32                  `protobuf:"varint,1,opt,name=solutionID,proto3" json:"solutionID,omitempty"`       // 提交编号
	SimSolutionID int32                  `protobuf:"varint,2,opt,name=simSolutionID,proto3" json:"simSolutionID,omitempty"` // 相似的提交编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySimSolutionDataReq) Reset() {
	*x = QuerySimSolutionDataReq{}
	mi := &file_solution_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySimSolutionDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySimSolutionDataReq) ProtoMessage() {}

func (x *QuerySimSolutionDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySimSolutionDataReq.ProtoReflect.Descriptor instead.
func (*QuerySimSolutionDataReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{2}
}

func (x *QuerySimSolutionDataReq) GetSolutionID() int32 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

func (x *QuerySimSolutionDataReq) GetSimSolutionID() int32 {
	if x != nil {
		return x.SimSolutionID
	}
	return 0
}

type QuerySimSolutionDataRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`         // 返回信息
	Code          int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`              // 返回码
	Solution      *Solution              `protobuf:"bytes,3,opt,name=solution,proto3" json:"solution,omitempty"`       // 提交
	SimSolution   *Solution              `protobuf:"bytes,4,opt,name=simSolution,proto3" json:"simSolution,omitempty"` // 相似的对比提交
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySimSolutionDataRsp) Reset() {
	*x = QuerySimSolutionDataRsp{}
	mi := &file_solution_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySimSolutionDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySimSolutionDataRsp) ProtoMessage() {}

func (x *QuerySimSolutionDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySimSolutionDataRsp.ProtoReflect.Descriptor instead.
func (*QuerySimSolutionDataRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{3}
}

func (x *QuerySimSolutionDataRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QuerySimSolutionDataRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QuerySimSolutionDataRsp) GetSolution() *Solution {
	if x != nil {
		return x.Solution
	}
	return nil
}

func (x *QuerySimSolutionDataRsp) GetSimSolution() *Solution {
	if x != nil {
		return x.SimSolution
	}
	return nil
}

type Sim struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemName   string                 `protobuf:"bytes,1,opt,name=problemName,proto3" json:"problemName,omitempty"`      // 题目名称
	SolutionID    int32                  `protobuf:"varint,2,opt,name=solutionID,proto3" json:"solutionID,omitempty"`       // 提交编号
	SimSolutionID int32                  `protobuf:"varint,3,opt,name=simSolutionID,proto3" json:"simSolutionID,omitempty"` // 相似的提交编号
	UserName      string                 `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`            // 用户名
	SimScore      int32                  `protobuf:"varint,5,opt,name=simScore,proto3" json:"simScore,omitempty"`           // 相似度得分
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sim) Reset() {
	*x = Sim{}
	mi := &file_solution_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sim) ProtoMessage() {}

func (x *Sim) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sim.ProtoReflect.Descriptor instead.
func (*Sim) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{4}
}

func (x *Sim) GetProblemName() string {
	if x != nil {
		return x.ProblemName
	}
	return ""
}

func (x *Sim) GetSolutionID() int32 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

func (x *Sim) GetSimSolutionID() int32 {
	if x != nil {
		return x.SimSolutionID
	}
	return 0
}

func (x *Sim) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Sim) GetSimScore() int32 {
	if x != nil {
		return x.SimScore
	}
	return 0
}

type QueryLatestCodeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemID     int32                  `protobuf:"varint,1,opt,name=problemID,proto3" json:"problemID,omitempty"` // 题目编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryLatestCodeReq) Reset() {
	*x = QueryLatestCodeReq{}
	mi := &file_solution_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryLatestCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLatestCodeReq) ProtoMessage() {}

func (x *QueryLatestCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLatestCodeReq.ProtoReflect.Descriptor instead.
func (*QueryLatestCodeReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{5}
}

func (x *QueryLatestCodeReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *QueryLatestCodeReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type QueryLatestCodeRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`   // 返回信息
	Code          int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`        // 返回码
	LastCode      *Code                  `protobuf:"bytes,3,opt,name=lastCode,proto3" json:"lastCode,omitempty"` // 最新的代码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryLatestCodeRsp) Reset() {
	*x = QueryLatestCodeRsp{}
	mi := &file_solution_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryLatestCodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLatestCodeRsp) ProtoMessage() {}

func (x *QueryLatestCodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLatestCodeRsp.ProtoReflect.Descriptor instead.
func (*QueryLatestCodeRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{6}
}

func (x *QueryLatestCodeRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryLatestCodeRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryLatestCodeRsp) GetLastCode() *Code {
	if x != nil {
		return x.LastCode
	}
	return nil
}

type QuerySourceCodeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SolutionID    int32                  `protobuf:"varint,1,opt,name=solutionID,proto3" json:"solutionID,omitempty"` // 提交编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`         // 用户编号
	QueryType     int32                  `protobuf:"varint,3,opt,name=queryType,proto3" json:"queryType,omitempty"`   // 请求类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySourceCodeReq) Reset() {
	*x = QuerySourceCodeReq{}
	mi := &file_solution_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySourceCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySourceCodeReq) ProtoMessage() {}

func (x *QuerySourceCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySourceCodeReq.ProtoReflect.Descriptor instead.
func (*QuerySourceCodeReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{7}
}

func (x *QuerySourceCodeReq) GetSolutionID() int32 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

func (x *QuerySourceCodeReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QuerySourceCodeReq) GetQueryType() int32 {
	if x != nil {
		return x.QueryType
	}
	return 0
}

type QuerySourceCodeRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`   // 返回信息
	Code          int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`        // 返回码
	Solution      *Solution              `protobuf:"bytes,3,opt,name=solution,proto3" json:"solution,omitempty"` // 提交信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySourceCodeRsp) Reset() {
	*x = QuerySourceCodeRsp{}
	mi := &file_solution_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySourceCodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySourceCodeRsp) ProtoMessage() {}

func (x *QuerySourceCodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySourceCodeRsp.ProtoReflect.Descriptor instead.
func (*QuerySourceCodeRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{8}
}

func (x *QuerySourceCodeRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QuerySourceCodeRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QuerySourceCodeRsp) GetSolution() *Solution {
	if x != nil {
		return x.Solution
	}
	return nil
}

type QuerySolutionResultReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SolutionID    int32                  `protobuf:"varint,1,opt,name=solutionID,proto3" json:"solutionID,omitempty"` // 提交编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySolutionResultReq) Reset() {
	*x = QuerySolutionResultReq{}
	mi := &file_solution_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySolutionResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySolutionResultReq) ProtoMessage() {}

func (x *QuerySolutionResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySolutionResultReq.ProtoReflect.Descriptor instead.
func (*QuerySolutionResultReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{9}
}

func (x *QuerySolutionResultReq) GetSolutionID() int32 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

type QuerySolutionResultRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`             // 返回信息
	Code          int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`                  // 返回码
	Result        int32                  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`              // 结果编号
	ResultMessage string                 `protobuf:"bytes,4,opt,name=resultMessage,proto3" json:"resultMessage,omitempty"` // 信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySolutionResultRsp) Reset() {
	*x = QuerySolutionResultRsp{}
	mi := &file_solution_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySolutionResultRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySolutionResultRsp) ProtoMessage() {}

func (x *QuerySolutionResultRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySolutionResultRsp.ProtoReflect.Descriptor instead.
func (*QuerySolutionResultRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{10}
}

func (x *QuerySolutionResultRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QuerySolutionResultRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QuerySolutionResultRsp) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *QuerySolutionResultRsp) GetResultMessage() string {
	if x != nil {
		return x.ResultMessage
	}
	return ""
}

type QueryRuntimeInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SolutionID    int32                  `protobuf:"varint,1,opt,name=solutionID,proto3" json:"solutionID,omitempty"` // 提交编号
	UserID        int32                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`         // 用户编号
	QueryType     int32                  `protobuf:"varint,3,opt,name=queryType,proto3" json:"queryType,omitempty"`   // 请求类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRuntimeInfoReq) Reset() {
	*x = QueryRuntimeInfoReq{}
	mi := &file_solution_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRuntimeInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRuntimeInfoReq) ProtoMessage() {}

func (x *QueryRuntimeInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRuntimeInfoReq.ProtoReflect.Descriptor instead.
func (*QueryRuntimeInfoReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{11}
}

func (x *QueryRuntimeInfoReq) GetSolutionID() int32 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

func (x *QueryRuntimeInfoReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QueryRuntimeInfoReq) GetQueryType() int32 {
	if x != nil {
		return x.QueryType
	}
	return 0
}

type QueryRuntimeInfoRsp struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Message           string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`                      // 返回信息
	Code              int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`                           // 返回码
	RuntimeInfo       string                 `protobuf:"bytes,3,opt,name=runtimeInfo,proto3" json:"runtimeInfo,omitempty"`              // 运行信息
	CompileInfoLength int32                  `protobuf:"varint,4,opt,name=compileInfoLength,proto3" json:"compileInfoLength,omitempty"` //  编译信息的长度
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *QueryRuntimeInfoRsp) Reset() {
	*x = QueryRuntimeInfoRsp{}
	mi := &file_solution_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRuntimeInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRuntimeInfoRsp) ProtoMessage() {}

func (x *QueryRuntimeInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRuntimeInfoRsp.ProtoReflect.Descriptor instead.
func (*QueryRuntimeInfoRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{12}
}

func (x *QueryRuntimeInfoRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryRuntimeInfoRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryRuntimeInfoRsp) GetRuntimeInfo() string {
	if x != nil {
		return x.RuntimeInfo
	}
	return ""
}

func (x *QueryRuntimeInfoRsp) GetCompileInfoLength() int32 {
	if x != nil {
		return x.CompileInfoLength
	}
	return 0
}

type RejudgeSolutionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`           // 用户编号
	Id            int32                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                   // 编号
	RejudgeType   int32                  `protobuf:"varint,3,opt,name=rejudgeType,proto3" json:"rejudgeType,omitempty"` // 类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejudgeSolutionReq) Reset() {
	*x = RejudgeSolutionReq{}
	mi := &file_solution_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejudgeSolutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejudgeSolutionReq) ProtoMessage() {}

func (x *RejudgeSolutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejudgeSolutionReq.ProtoReflect.Descriptor instead.
func (*RejudgeSolutionReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{13}
}

func (x *RejudgeSolutionReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *RejudgeSolutionReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RejudgeSolutionReq) GetRejudgeType() int32 {
	if x != nil {
		return x.RejudgeType
	}
	return 0
}

type CommonRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回信息
	Code          int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // 返回码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonRsp) Reset() {
	*x = CommonRsp{}
	mi := &file_solution_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRsp) ProtoMessage() {}

func (x *CommonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRsp.ProtoReflect.Descriptor instead.
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{14}
}

func (x *CommonRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

type CountUserProblemSolutionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`       // 用户编号
	ProblemID     int32                  `protobuf:"varint,2,opt,name=problemID,proto3" json:"problemID,omitempty"` // 题目编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountUserProblemSolutionReq) Reset() {
	*x = CountUserProblemSolutionReq{}
	mi := &file_solution_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountUserProblemSolutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountUserProblemSolutionReq) ProtoMessage() {}

func (x *CountUserProblemSolutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountUserProblemSolutionReq.ProtoReflect.Descriptor instead.
func (*CountUserProblemSolutionReq) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{15}
}

func (x *CountUserProblemSolutionReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CountUserProblemSolutionReq) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

type CountUserProblemSolutionRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`          // 返回信息
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`               // 返回码
	SubmitCount   int32                  `protobuf:"varint,3,opt,name=submitCount,proto3" json:"submitCount,omitempty"` // 提交次数
	AcceptCount   int32                  `protobuf:"varint,4,opt,name=acceptCount,proto3" json:"acceptCount,omitempty"` //  正确次数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountUserProblemSolutionRsp) Reset() {
	*x = CountUserProblemSolutionRsp{}
	mi := &file_solution_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountUserProblemSolutionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountUserProblemSolutionRsp) ProtoMessage() {}

func (x *CountUserProblemSolutionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountUserProblemSolutionRsp.ProtoReflect.Descriptor instead.
func (*CountUserProblemSolutionRsp) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{16}
}

func (x *CountUserProblemSolutionRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CountUserProblemSolutionRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CountUserProblemSolutionRsp) GetSubmitCount() int32 {
	if x != nil {
		return x.SubmitCount
	}
	return 0
}

func (x *CountUserProblemSolutionRsp) GetAcceptCount() int32 {
	if x != nil {
		return x.AcceptCount
	}
	return 0
}

type Solution struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SolutionID       int32                  `protobuf:"varint,1,opt,name=solutionID,proto3" json:"solutionID,omitempty"`              // 提交的编号
	ProblemID        int32                  `protobuf:"varint,2,opt,name=problemID,proto3" json:"problemID,omitempty"`                // 题目编号
	Result           int32                  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`                      // 结果
	PassRate         float32                `protobuf:"fixed32,4,opt,name=passRate,proto3" json:"passRate,omitempty"`                 // 通过率
	Memory           int32                  `protobuf:"varint,5,opt,name=memory,proto3" json:"memory,omitempty"`                      // 内存限制
	TimeLimit        int32                  `protobuf:"varint,6,opt,name=timeLimit,proto3" json:"timeLimit,omitempty"`                // 时间限制
	Language         int32                  `protobuf:"varint,7,opt,name=language,proto3" json:"language,omitempty"`                  // 语言
	CodeLength       int32                  `protobuf:"varint,8,opt,name=codeLength,proto3" json:"codeLength,omitempty"`              // 代码长度
	Creator          string                 `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`                     // 提交者
	CreatTime        string                 `protobuf:"bytes,10,opt,name=creatTime,proto3" json:"creatTime,omitempty"`                // 提交时间
	IsSeeRuntimeInfo int32                  `protobuf:"varint,11,opt,name=isSeeRuntimeInfo,proto3" json:"isSeeRuntimeInfo,omitempty"` // 是否可见运行信息
	UserCode         string                 `protobuf:"bytes,12,opt,name=userCode,proto3" json:"userCode,omitempty"`                  // 用户提交的代码
	CreatorID        int32                  `protobuf:"varint,13,opt,name=creatorID,proto3" json:"creatorID,omitempty"`               // 提交者编号
	CodeView         int32                  `protobuf:"varint,14,opt,name=codeView,proto3" json:"codeView,omitempty"`                 // 代码是否可见
	ProblemName      string                 `protobuf:"bytes,15,opt,name=problemName,proto3" json:"problemName,omitempty"`            // 题目名称
	UserNumber       string                 `protobuf:"bytes,16,opt,name=userNumber,proto3" json:"userNumber,omitempty"`              // 用户学号
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Solution) Reset() {
	*x = Solution{}
	mi := &file_solution_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Solution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Solution) ProtoMessage() {}

func (x *Solution) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Solution.ProtoReflect.Descriptor instead.
func (*Solution) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{17}
}

func (x *Solution) GetSolutionID() int32 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

func (x *Solution) GetProblemID() int32 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *Solution) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *Solution) GetPassRate() float32 {
	if x != nil {
		return x.PassRate
	}
	return 0
}

func (x *Solution) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Solution) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *Solution) GetLanguage() int32 {
	if x != nil {
		return x.Language
	}
	return 0
}

func (x *Solution) GetCodeLength() int32 {
	if x != nil {
		return x.CodeLength
	}
	return 0
}

func (x *Solution) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Solution) GetCreatTime() string {
	if x != nil {
		return x.CreatTime
	}
	return ""
}

func (x *Solution) GetIsSeeRuntimeInfo() int32 {
	if x != nil {
		return x.IsSeeRuntimeInfo
	}
	return 0
}

func (x *Solution) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *Solution) GetCreatorID() int32 {
	if x != nil {
		return x.CreatorID
	}
	return 0
}

func (x *Solution) GetCodeView() int32 {
	if x != nil {
		return x.CodeView
	}
	return 0
}

func (x *Solution) GetProblemName() string {
	if x != nil {
		return x.ProblemName
	}
	return ""
}

func (x *Solution) GetUserNumber() string {
	if x != nil {
		return x.UserNumber
	}
	return ""
}

type Code struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CodeID        int32                  `protobuf:"varint,1,opt,name=codeID,proto3" json:"codeID,omitempty"`      // 代码编号
	UserCode      string                 `protobuf:"bytes,2,opt,name=userCode,proto3" json:"userCode,omitempty"`   // 代码
	CodeName      string                 `protobuf:"bytes,3,opt,name=codeName,proto3" json:"codeName,omitempty"`   // 代码名
	CodeType      int32                  `protobuf:"varint,4,opt,name=codeType,proto3" json:"codeType,omitempty"`  // 代码类型
	CreatTime     string                 `protobuf:"bytes,5,opt,name=creatTime,proto3" json:"creatTime,omitempty"` // 创建时间
	UserName      string                 `protobuf:"bytes,6,opt,name=userName,proto3" json:"userName,omitempty"`   // 用户名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Code) Reset() {
	*x = Code{}
	mi := &file_solution_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Code) ProtoMessage() {}

func (x *Code) ProtoReflect() protoreflect.Message {
	mi := &file_solution_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Code.ProtoReflect.Descriptor instead.
func (*Code) Descriptor() ([]byte, []int) {
	return file_solution_proto_rawDescGZIP(), []int{18}
}

func (x *Code) GetCodeID() int32 {
	if x != nil {
		return x.CodeID
	}
	return 0
}

func (x *Code) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *Code) GetCodeName() string {
	if x != nil {
		return x.CodeName
	}
	return ""
}

func (x *Code) GetCodeType() int32 {
	if x != nil {
		return x.CodeType
	}
	return 0
}

func (x *Code) GetCreatTime() string {
	if x != nil {
		return x.CreatTime
	}
	return ""
}

func (x *Code) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

var File_solution_proto protoreflect.FileDescriptor

var file_solution_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a,
	0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x79, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x73, 0x69, 0x6d,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6d, 0x52, 0x03, 0x73, 0x69, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x53,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69,
	0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31,
	0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73,
	0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x03, 0x53,
	0x69, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x69, 0x6d,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x71,
	0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x6a, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x75, 0x0a,
	0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x84,
	0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6b, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x5e, 0x0a, 0x12, 0x52, 0x65, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x53, 0x0a, 0x1b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xea, 0x03, 0x0a, 0x08, 0x53,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x53, 0x65, 0x65, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69,
	0x73, 0x53, 0x65, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x64,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0xef, 0x05, 0x0a, 0x0e, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x18, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x52,
	0x65, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e,
	0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x2e, 0x6f, 0x6a, 0x2e,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x6f, 0x6a, 0x2e,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69,
	0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x6f, 0x6a, 0x2e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x73, 0x75, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x2f,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_solution_proto_rawDescOnce sync.Once
	file_solution_proto_rawDescData = file_solution_proto_rawDesc
)

func file_solution_proto_rawDescGZIP() []byte {
	file_solution_proto_rawDescOnce.Do(func() {
		file_solution_proto_rawDescData = protoimpl.X.CompressGZIP(file_solution_proto_rawDescData)
	})
	return file_solution_proto_rawDescData
}

var file_solution_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_solution_proto_goTypes = []any{
	(*QuerySimListReq)(nil),             // 0: oj.solution.QuerySimListReq
	(*QuerySimListRsp)(nil),             // 1: oj.solution.QuerySimListRsp
	(*QuerySimSolutionDataReq)(nil),     // 2: oj.solution.QuerySimSolutionDataReq
	(*QuerySimSolutionDataRsp)(nil),     // 3: oj.solution.QuerySimSolutionDataRsp
	(*Sim)(nil),                         // 4: oj.solution.Sim
	(*QueryLatestCodeReq)(nil),          // 5: oj.solution.QueryLatestCodeReq
	(*QueryLatestCodeRsp)(nil),          // 6: oj.solution.QueryLatestCodeRsp
	(*QuerySourceCodeReq)(nil),          // 7: oj.solution.QuerySourceCodeReq
	(*QuerySourceCodeRsp)(nil),          // 8: oj.solution.QuerySourceCodeRsp
	(*QuerySolutionResultReq)(nil),      // 9: oj.solution.QuerySolutionResultReq
	(*QuerySolutionResultRsp)(nil),      // 10: oj.solution.QuerySolutionResultRsp
	(*QueryRuntimeInfoReq)(nil),         // 11: oj.solution.QueryRuntimeInfoReq
	(*QueryRuntimeInfoRsp)(nil),         // 12: oj.solution.QueryRuntimeInfoRsp
	(*RejudgeSolutionReq)(nil),          // 13: oj.solution.RejudgeSolutionReq
	(*CommonRsp)(nil),                   // 14: oj.solution.CommonRsp
	(*CountUserProblemSolutionReq)(nil), // 15: oj.solution.CountUserProblemSolutionReq
	(*CountUserProblemSolutionRsp)(nil), // 16: oj.solution.CountUserProblemSolutionRsp
	(*Solution)(nil),                    // 17: oj.solution.Solution
	(*Code)(nil),                        // 18: oj.solution.Code
}
var file_solution_proto_depIdxs = []int32{
	4,  // 0: oj.solution.QuerySimListRsp.sim:type_name -> oj.solution.Sim
	17, // 1: oj.solution.QuerySimSolutionDataRsp.solution:type_name -> oj.solution.Solution
	17, // 2: oj.solution.QuerySimSolutionDataRsp.simSolution:type_name -> oj.solution.Solution
	18, // 3: oj.solution.QueryLatestCodeRsp.lastCode:type_name -> oj.solution.Code
	17, // 4: oj.solution.QuerySourceCodeRsp.solution:type_name -> oj.solution.Solution
	15, // 5: oj.solution.SolutionServer.CountUserProblemSolution:input_type -> oj.solution.CountUserProblemSolutionReq
	13, // 6: oj.solution.SolutionServer.RejudgeSolution:input_type -> oj.solution.RejudgeSolutionReq
	11, // 7: oj.solution.SolutionServer.QueryRuntimeInfo:input_type -> oj.solution.QueryRuntimeInfoReq
	9,  // 8: oj.solution.SolutionServer.QuerySolutionResult:input_type -> oj.solution.QuerySolutionResultReq
	7,  // 9: oj.solution.SolutionServer.QuerySourceCode:input_type -> oj.solution.QuerySourceCodeReq
	5,  // 10: oj.solution.SolutionServer.QueryLatestCode:input_type -> oj.solution.QueryLatestCodeReq
	0,  // 11: oj.solution.SolutionServer.QuerySimList:input_type -> oj.solution.QuerySimListReq
	2,  // 12: oj.solution.SolutionServer.QuerySimSolutionData:input_type -> oj.solution.QuerySimSolutionDataReq
	16, // 13: oj.solution.SolutionServer.CountUserProblemSolution:output_type -> oj.solution.CountUserProblemSolutionRsp
	14, // 14: oj.solution.SolutionServer.RejudgeSolution:output_type -> oj.solution.CommonRsp
	12, // 15: oj.solution.SolutionServer.QueryRuntimeInfo:output_type -> oj.solution.QueryRuntimeInfoRsp
	10, // 16: oj.solution.SolutionServer.QuerySolutionResult:output_type -> oj.solution.QuerySolutionResultRsp
	8,  // 17: oj.solution.SolutionServer.QuerySourceCode:output_type -> oj.solution.QuerySourceCodeRsp
	6,  // 18: oj.solution.SolutionServer.QueryLatestCode:output_type -> oj.solution.QueryLatestCodeRsp
	1,  // 19: oj.solution.SolutionServer.QuerySimList:output_type -> oj.solution.QuerySimListRsp
	3,  // 20: oj.solution.SolutionServer.QuerySimSolutionData:output_type -> oj.solution.QuerySimSolutionDataRsp
	13, // [13:21] is the sub-list for method output_type
	5,  // [5:13] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_solution_proto_init() }
func file_solution_proto_init() {
	if File_solution_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_solution_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_solution_proto_goTypes,
		DependencyIndexes: file_solution_proto_depIdxs,
		MessageInfos:      file_solution_proto_msgTypes,
	}.Build()
	File_solution_proto = out.File
	file_solution_proto_rawDesc = nil
	file_solution_proto_goTypes = nil
	file_solution_proto_depIdxs = nil
}
