// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/csuJudge/judgeProto/solution/solution.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/csuJudge/judgeProto/solution/solution_mock.go -package=solution -self_package=github.com/csuJudge/judgeProto/solution --source=stub/github.com/csuJudge/judgeProto/solution/solution.trpc.go
//

// Package solution is a generated GoMock package.
package solution

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockSolutionServerService is a mock of SolutionServerService interface.
type MockSolutionServerService struct {
	ctrl     *gomock.Controller
	recorder *MockSolutionServerServiceMockRecorder
}

// MockSolutionServerServiceMockRecorder is the mock recorder for MockSolutionServerService.
type MockSolutionServerServiceMockRecorder struct {
	mock *MockSolutionServerService
}

// NewMockSolutionServerService creates a new mock instance.
func NewMockSolutionServerService(ctrl *gomock.Controller) *MockSolutionServerService {
	mock := &MockSolutionServerService{ctrl: ctrl}
	mock.recorder = &MockSolutionServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSolutionServerService) EXPECT() *MockSolutionServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSolutionServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// CountUserProblemSolution mocks base method.
func (m *MockSolutionServerService) CountUserProblemSolution(ctx context.Context, req *CountUserProblemSolutionReq) (*CountUserProblemSolutionRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserProblemSolution", ctx, req)
	ret0, _ := ret[0].(*CountUserProblemSolutionRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserProblemSolution indicates an expected call of CountUserProblemSolution.
func (mr *MockSolutionServerServiceMockRecorder) CountUserProblemSolution(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserProblemSolution", reflect.TypeOf((*MockSolutionServerService)(nil).CountUserProblemSolution), ctx, req)
}

// RejudgeSolution mocks base method.
func (m *MockSolutionServerService) RejudgeSolution(ctx context.Context, req *RejudgeSolutionReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejudgeSolution", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejudgeSolution indicates an expected call of RejudgeSolution.
func (mr *MockSolutionServerServiceMockRecorder) RejudgeSolution(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejudgeSolution", reflect.TypeOf((*MockSolutionServerService)(nil).RejudgeSolution), ctx, req)
}

// MockSolutionServerClientProxy is a mock of SolutionServerClientProxy interface.
type MockSolutionServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockSolutionServerClientProxyMockRecorder
}

// MockSolutionServerClientProxyMockRecorder is the mock recorder for MockSolutionServerClientProxy.
type MockSolutionServerClientProxyMockRecorder struct {
	mock *MockSolutionServerClientProxy
}

// NewMockSolutionServerClientProxy creates a new mock instance.
func NewMockSolutionServerClientProxy(ctrl *gomock.Controller) *MockSolutionServerClientProxy {
	mock := &MockSolutionServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockSolutionServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSolutionServerClientProxy) EXPECT() *MockSolutionServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSolutionServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// CountUserProblemSolution mocks base method.
func (m *MockSolutionServerClientProxy) CountUserProblemSolution(ctx context.Context, req *CountUserProblemSolutionReq, opts ...client.Option) (*CountUserProblemSolutionRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountUserProblemSolution", varargs...)
	ret0, _ := ret[0].(*CountUserProblemSolutionRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserProblemSolution indicates an expected call of CountUserProblemSolution.
func (mr *MockSolutionServerClientProxyMockRecorder) CountUserProblemSolution(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserProblemSolution", reflect.TypeOf((*MockSolutionServerClientProxy)(nil).CountUserProblemSolution), varargs...)
}

// RejudgeSolution mocks base method.
func (m *MockSolutionServerClientProxy) RejudgeSolution(ctx context.Context, req *RejudgeSolutionReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejudgeSolution", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejudgeSolution indicates an expected call of RejudgeSolution.
func (mr *MockSolutionServerClientProxyMockRecorder) RejudgeSolution(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejudgeSolution", reflect.TypeOf((*MockSolutionServerClientProxy)(nil).RejudgeSolution), varargs...)
}
