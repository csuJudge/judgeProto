// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: source.proto

package source

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// SourceServerService defines service.
type SourceServerService interface {
	// QuerySource QuerySource 查询来源
	QuerySource(ctx context.Context, req *EmptyReq) (*QuerySourceRsp, error)
	// AddSource AddSource 添加来源
	AddSource(ctx context.Context, req *AddSourceReq) (*CommonRsp, error)
	// QueryProblemSource QueryProblemSource 查询题目的来源
	QueryProblemSource(ctx context.Context, req *QueryProblemSourceReq) (*QueryProblemSourceRsp, error)
	// UpdateSource UpdateSource 更新来源
	UpdateSource(ctx context.Context, req *UpdateSourceReq) (*CommonRsp, error)
	// UpdateSourceStatus UpdateSourceStatus 更新来源状态
	UpdateSourceStatus(ctx context.Context, req *UpdateSourceStatusReq) (*CommonRsp, error)
	// QuerySourcePageSize QuerySourcePageSize 查询来源
	QuerySourcePageSize(ctx context.Context, req *QuerySourcePageSizeReq) (*QuerySourceRsp, error)
}

func SourceServerService_QuerySource_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &EmptyReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SourceServerService).QuerySource(ctx, reqbody.(*EmptyReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SourceServerService_AddSource_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddSourceReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SourceServerService).AddSource(ctx, reqbody.(*AddSourceReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SourceServerService_QueryProblemSource_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryProblemSourceReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SourceServerService).QueryProblemSource(ctx, reqbody.(*QueryProblemSourceReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SourceServerService_UpdateSource_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateSourceReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SourceServerService).UpdateSource(ctx, reqbody.(*UpdateSourceReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SourceServerService_UpdateSourceStatus_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateSourceStatusReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SourceServerService).UpdateSourceStatus(ctx, reqbody.(*UpdateSourceStatusReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SourceServerService_QuerySourcePageSize_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QuerySourcePageSizeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SourceServerService).QuerySourcePageSize(ctx, reqbody.(*QuerySourcePageSizeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// SourceServerServer_ServiceDesc descriptor for server.RegisterService.
var SourceServerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "oj.source.SourceServer",
	HandlerType: ((*SourceServerService)(nil)),
	Methods: []server.Method{
		{
			Name: "/oj.source.SourceServer/QuerySource",
			Func: SourceServerService_QuerySource_Handler,
		},
		{
			Name: "/oj.source.SourceServer/AddSource",
			Func: SourceServerService_AddSource_Handler,
		},
		{
			Name: "/oj.source.SourceServer/QueryProblemSource",
			Func: SourceServerService_QueryProblemSource_Handler,
		},
		{
			Name: "/oj.source.SourceServer/UpdateSource",
			Func: SourceServerService_UpdateSource_Handler,
		},
		{
			Name: "/oj.source.SourceServer/UpdateSourceStatus",
			Func: SourceServerService_UpdateSourceStatus_Handler,
		},
		{
			Name: "/oj.source.SourceServer/QuerySourcePageSize",
			Func: SourceServerService_QuerySourcePageSize_Handler,
		},
	},
}

// RegisterSourceServerService registers service.
func RegisterSourceServerService(s server.Service, svr SourceServerService) {
	if err := s.Register(&SourceServerServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("SourceServer register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedSourceServer struct{}

// QuerySource QuerySource 查询来源
func (s *UnimplementedSourceServer) QuerySource(ctx context.Context, req *EmptyReq) (*QuerySourceRsp, error) {
	return nil, errors.New("rpc QuerySource of service SourceServer is not implemented")
}

// AddSource AddSource 添加来源
func (s *UnimplementedSourceServer) AddSource(ctx context.Context, req *AddSourceReq) (*CommonRsp, error) {
	return nil, errors.New("rpc AddSource of service SourceServer is not implemented")
}

// QueryProblemSource QueryProblemSource 查询题目的来源
func (s *UnimplementedSourceServer) QueryProblemSource(ctx context.Context, req *QueryProblemSourceReq) (*QueryProblemSourceRsp, error) {
	return nil, errors.New("rpc QueryProblemSource of service SourceServer is not implemented")
}

// UpdateSource UpdateSource 更新来源
func (s *UnimplementedSourceServer) UpdateSource(ctx context.Context, req *UpdateSourceReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateSource of service SourceServer is not implemented")
}

// UpdateSourceStatus UpdateSourceStatus 更新来源状态
func (s *UnimplementedSourceServer) UpdateSourceStatus(ctx context.Context, req *UpdateSourceStatusReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateSourceStatus of service SourceServer is not implemented")
}

// QuerySourcePageSize QuerySourcePageSize 查询来源
func (s *UnimplementedSourceServer) QuerySourcePageSize(ctx context.Context, req *QuerySourcePageSizeReq) (*QuerySourceRsp, error) {
	return nil, errors.New("rpc QuerySourcePageSize of service SourceServer is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// SourceServerClientProxy defines service client proxy
type SourceServerClientProxy interface {
	// QuerySource QuerySource 查询来源
	QuerySource(ctx context.Context, req *EmptyReq, opts ...client.Option) (rsp *QuerySourceRsp, err error)
	// AddSource AddSource 添加来源
	AddSource(ctx context.Context, req *AddSourceReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QueryProblemSource QueryProblemSource 查询题目的来源
	QueryProblemSource(ctx context.Context, req *QueryProblemSourceReq, opts ...client.Option) (rsp *QueryProblemSourceRsp, err error)
	// UpdateSource UpdateSource 更新来源
	UpdateSource(ctx context.Context, req *UpdateSourceReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateSourceStatus UpdateSourceStatus 更新来源状态
	UpdateSourceStatus(ctx context.Context, req *UpdateSourceStatusReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QuerySourcePageSize QuerySourcePageSize 查询来源
	QuerySourcePageSize(ctx context.Context, req *QuerySourcePageSizeReq, opts ...client.Option) (rsp *QuerySourceRsp, err error)
}

type SourceServerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewSourceServerClientProxy = func(opts ...client.Option) SourceServerClientProxy {
	return &SourceServerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *SourceServerClientProxyImpl) QuerySource(ctx context.Context, req *EmptyReq, opts ...client.Option) (*QuerySourceRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.source.SourceServer/QuerySource")
	msg.WithCalleeServiceName(SourceServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SourceServer")
	msg.WithCalleeMethod("QuerySource")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QuerySourceRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SourceServerClientProxyImpl) AddSource(ctx context.Context, req *AddSourceReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.source.SourceServer/AddSource")
	msg.WithCalleeServiceName(SourceServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SourceServer")
	msg.WithCalleeMethod("AddSource")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SourceServerClientProxyImpl) QueryProblemSource(ctx context.Context, req *QueryProblemSourceReq, opts ...client.Option) (*QueryProblemSourceRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.source.SourceServer/QueryProblemSource")
	msg.WithCalleeServiceName(SourceServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SourceServer")
	msg.WithCalleeMethod("QueryProblemSource")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryProblemSourceRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SourceServerClientProxyImpl) UpdateSource(ctx context.Context, req *UpdateSourceReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.source.SourceServer/UpdateSource")
	msg.WithCalleeServiceName(SourceServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SourceServer")
	msg.WithCalleeMethod("UpdateSource")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SourceServerClientProxyImpl) UpdateSourceStatus(ctx context.Context, req *UpdateSourceStatusReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.source.SourceServer/UpdateSourceStatus")
	msg.WithCalleeServiceName(SourceServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SourceServer")
	msg.WithCalleeMethod("UpdateSourceStatus")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SourceServerClientProxyImpl) QuerySourcePageSize(ctx context.Context, req *QuerySourcePageSizeReq, opts ...client.Option) (*QuerySourceRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.source.SourceServer/QuerySourcePageSize")
	msg.WithCalleeServiceName(SourceServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SourceServer")
	msg.WithCalleeMethod("QuerySourcePageSize")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QuerySourceRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
