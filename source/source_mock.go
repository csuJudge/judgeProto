// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/csuJudge/judgeProto/source/source.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/csuJudge/judgeProto/source/source_mock.go -package=source -self_package=github.com/csuJudge/judgeProto/source --source=stub/github.com/csuJudge/judgeProto/source/source.trpc.go
//

// Package source is a generated GoMock package.
package source

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockSourceServerService is a mock of SourceServerService interface.
type MockSourceServerService struct {
	ctrl     *gomock.Controller
	recorder *MockSourceServerServiceMockRecorder
}

// MockSourceServerServiceMockRecorder is the mock recorder for MockSourceServerService.
type MockSourceServerServiceMockRecorder struct {
	mock *MockSourceServerService
}

// NewMockSourceServerService creates a new mock instance.
func NewMockSourceServerService(ctrl *gomock.Controller) *MockSourceServerService {
	mock := &MockSourceServerService{ctrl: ctrl}
	mock.recorder = &MockSourceServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceServerService) EXPECT() *MockSourceServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSourceServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddSource mocks base method.
func (m *MockSourceServerService) AddSource(ctx context.Context, req *AddSourceReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSource", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSource indicates an expected call of AddSource.
func (mr *MockSourceServerServiceMockRecorder) AddSource(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSource", reflect.TypeOf((*MockSourceServerService)(nil).AddSource), ctx, req)
}

// QueryProblemSource mocks base method.
func (m *MockSourceServerService) QueryProblemSource(ctx context.Context, req *QueryProblemSourceReq) (*QueryProblemSourceRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProblemSource", ctx, req)
	ret0, _ := ret[0].(*QueryProblemSourceRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemSource indicates an expected call of QueryProblemSource.
func (mr *MockSourceServerServiceMockRecorder) QueryProblemSource(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemSource", reflect.TypeOf((*MockSourceServerService)(nil).QueryProblemSource), ctx, req)
}

// QuerySource mocks base method.
func (m *MockSourceServerService) QuerySource(ctx context.Context, req *EmptyReq) (*QuerySourceRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySource", ctx, req)
	ret0, _ := ret[0].(*QuerySourceRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySource indicates an expected call of QuerySource.
func (mr *MockSourceServerServiceMockRecorder) QuerySource(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySource", reflect.TypeOf((*MockSourceServerService)(nil).QuerySource), ctx, req)
}

// QuerySourcePageSize mocks base method.
func (m *MockSourceServerService) QuerySourcePageSize(ctx context.Context, req *QuerySourcePageSizeReq) (*QuerySourceRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySourcePageSize", ctx, req)
	ret0, _ := ret[0].(*QuerySourceRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySourcePageSize indicates an expected call of QuerySourcePageSize.
func (mr *MockSourceServerServiceMockRecorder) QuerySourcePageSize(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySourcePageSize", reflect.TypeOf((*MockSourceServerService)(nil).QuerySourcePageSize), ctx, req)
}

// UpdateSource mocks base method.
func (m *MockSourceServerService) UpdateSource(ctx context.Context, req *UpdateSourceReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSource", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSource indicates an expected call of UpdateSource.
func (mr *MockSourceServerServiceMockRecorder) UpdateSource(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSource", reflect.TypeOf((*MockSourceServerService)(nil).UpdateSource), ctx, req)
}

// UpdateSourceStatus mocks base method.
func (m *MockSourceServerService) UpdateSourceStatus(ctx context.Context, req *UpdateSourceStatusReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSourceStatus", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSourceStatus indicates an expected call of UpdateSourceStatus.
func (mr *MockSourceServerServiceMockRecorder) UpdateSourceStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSourceStatus", reflect.TypeOf((*MockSourceServerService)(nil).UpdateSourceStatus), ctx, req)
}

// MockSourceServerClientProxy is a mock of SourceServerClientProxy interface.
type MockSourceServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockSourceServerClientProxyMockRecorder
}

// MockSourceServerClientProxyMockRecorder is the mock recorder for MockSourceServerClientProxy.
type MockSourceServerClientProxyMockRecorder struct {
	mock *MockSourceServerClientProxy
}

// NewMockSourceServerClientProxy creates a new mock instance.
func NewMockSourceServerClientProxy(ctrl *gomock.Controller) *MockSourceServerClientProxy {
	mock := &MockSourceServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockSourceServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceServerClientProxy) EXPECT() *MockSourceServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSourceServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddSource mocks base method.
func (m *MockSourceServerClientProxy) AddSource(ctx context.Context, req *AddSourceReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSource", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSource indicates an expected call of AddSource.
func (mr *MockSourceServerClientProxyMockRecorder) AddSource(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSource", reflect.TypeOf((*MockSourceServerClientProxy)(nil).AddSource), varargs...)
}

// QueryProblemSource mocks base method.
func (m *MockSourceServerClientProxy) QueryProblemSource(ctx context.Context, req *QueryProblemSourceReq, opts ...client.Option) (*QueryProblemSourceRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryProblemSource", varargs...)
	ret0, _ := ret[0].(*QueryProblemSourceRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProblemSource indicates an expected call of QueryProblemSource.
func (mr *MockSourceServerClientProxyMockRecorder) QueryProblemSource(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProblemSource", reflect.TypeOf((*MockSourceServerClientProxy)(nil).QueryProblemSource), varargs...)
}

// QuerySource mocks base method.
func (m *MockSourceServerClientProxy) QuerySource(ctx context.Context, req *EmptyReq, opts ...client.Option) (*QuerySourceRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuerySource", varargs...)
	ret0, _ := ret[0].(*QuerySourceRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySource indicates an expected call of QuerySource.
func (mr *MockSourceServerClientProxyMockRecorder) QuerySource(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySource", reflect.TypeOf((*MockSourceServerClientProxy)(nil).QuerySource), varargs...)
}

// QuerySourcePageSize mocks base method.
func (m *MockSourceServerClientProxy) QuerySourcePageSize(ctx context.Context, req *QuerySourcePageSizeReq, opts ...client.Option) (*QuerySourceRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuerySourcePageSize", varargs...)
	ret0, _ := ret[0].(*QuerySourceRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySourcePageSize indicates an expected call of QuerySourcePageSize.
func (mr *MockSourceServerClientProxyMockRecorder) QuerySourcePageSize(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySourcePageSize", reflect.TypeOf((*MockSourceServerClientProxy)(nil).QuerySourcePageSize), varargs...)
}

// UpdateSource mocks base method.
func (m *MockSourceServerClientProxy) UpdateSource(ctx context.Context, req *UpdateSourceReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSource", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSource indicates an expected call of UpdateSource.
func (mr *MockSourceServerClientProxyMockRecorder) UpdateSource(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSource", reflect.TypeOf((*MockSourceServerClientProxy)(nil).UpdateSource), varargs...)
}

// UpdateSourceStatus mocks base method.
func (m *MockSourceServerClientProxy) UpdateSourceStatus(ctx context.Context, req *UpdateSourceStatusReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSourceStatus", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSourceStatus indicates an expected call of UpdateSourceStatus.
func (mr *MockSourceServerClientProxyMockRecorder) UpdateSourceStatus(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSourceStatus", reflect.TypeOf((*MockSourceServerClientProxy)(nil).UpdateSourceStatus), varargs...)
}
