// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: user.proto

package judgeProto

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// UserServerService defines service.
type UserServerService interface {
	// QueryUserPrivilege QueryUserPrivilege 查询用户权限
	QueryUserPrivilege(ctx context.Context, req *QueryUserPrivilegeReq) (*QueryUserPrivilegeRsp, error)
}

func UserServerService_QueryUserPrivilege_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryUserPrivilegeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserServerService).QueryUserPrivilege(ctx, reqbody.(*QueryUserPrivilegeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// UserServerServer_ServiceDesc descriptor for server.RegisterService.
var UserServerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "oj.user.UserServer",
	HandlerType: ((*UserServerService)(nil)),
	Methods: []server.Method{
		{
			Name: "/oj.user.UserServer/QueryUserPrivilege",
			Func: UserServerService_QueryUserPrivilege_Handler,
		},
	},
}

// RegisterUserServerService registers service.
func RegisterUserServerService(s server.Service, svr UserServerService) {
	if err := s.Register(&UserServerServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("UserServer register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedUserServer struct{}

// QueryUserPrivilege QueryUserPrivilege 查询用户权限
func (s *UnimplementedUserServer) QueryUserPrivilege(ctx context.Context, req *QueryUserPrivilegeReq) (*QueryUserPrivilegeRsp, error) {
	return nil, errors.New("rpc QueryUserPrivilege of service UserServer is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// UserServerClientProxy defines service client proxy
type UserServerClientProxy interface {
	// QueryUserPrivilege QueryUserPrivilege 查询用户权限
	QueryUserPrivilege(ctx context.Context, req *QueryUserPrivilegeReq, opts ...client.Option) (rsp *QueryUserPrivilegeRsp, err error)
}

type UserServerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewUserServerClientProxy = func(opts ...client.Option) UserServerClientProxy {
	return &UserServerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *UserServerClientProxyImpl) QueryUserPrivilege(ctx context.Context, req *QueryUserPrivilegeReq, opts ...client.Option) (*QueryUserPrivilegeRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.user.UserServer/QueryUserPrivilege")
	msg.WithCalleeServiceName(UserServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("UserServer")
	msg.WithCalleeMethod("QueryUserPrivilege")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryUserPrivilegeRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
