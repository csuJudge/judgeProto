// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: user.proto

package user

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// UserServerService defines service.
type UserServerService interface {
	// QueryUserPrivilege QueryUserPrivilege 查询用户权限
	QueryUserPrivilege(ctx context.Context, req *QueryUserPrivilegeReq) (*QueryUserPrivilegeRsp, error)
	// UpdateUserPassword UpdateUserPassword 更新用户密码
	UpdateUserPassword(ctx context.Context, req *UpdateUserPasswordReq) (*CommonRsp, error)
	// UpdateUserStatus UpdateUserStatus 查询用户状态
	UpdateUserStatus(ctx context.Context, req *UpdateUserStatusReq) (*CommonRsp, error)
	// QueryUserInfo QueryUserInfo 查询用户信息
	QueryUserInfo(ctx context.Context, req *QueryUserInfoReq) (*QueryUserInfoRsp, error)
	// AddUser AddUser 添加用户
	AddUser(ctx context.Context, req *AddUserReq) (*CommonRsp, error)
	// QueryUserRank QueryUserRank 查询用户排名
	QueryUserRank(ctx context.Context, req *QueryUserRankReq) (*QueryUserRankRsp, error)
	// QueryAllUser QueryAllUser 查询所有用户
	QueryAllUser(ctx context.Context, req *QueryUserReq) (*QueryAllUserRsp, error)
	// UpdateUser UpdateUser 更新用户
	UpdateUser(ctx context.Context, req *UpdateUserReq) (*CommonRsp, error)
	// Login Login 登陆
	Login(ctx context.Context, req *LoginReq) (*LoginRsp, error)
	// IsLogin IsLogin 是否登录
	IsLogin(ctx context.Context, req *IsLoginReq) (*IsLoginRsp, error)
	// UpdateMyInfo UpdateMyInfo 更新我的信息
	UpdateMyInfo(ctx context.Context, req *UpdateMyInfoReq) (*CommonRsp, error)
	// QueryTeacher QueryTeacher 查询老师信息
	QueryTeacher(ctx context.Context, req *QueryTeacherReq) (*QueryAllUserRsp, error)
}

func UserServerService_QueryUserPrivilege_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryUserPrivilegeReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserServerService).QueryUserPrivilege(ctx, reqbody.(*QueryUserPrivilegeReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserServerService_UpdateUserPassword_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateUserPasswordReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserServerService).UpdateUserPassword(ctx, reqbody.(*UpdateUserPasswordReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserServerService_UpdateUserStatus_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateUserStatusReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserServerService).UpdateUserStatus(ctx, reqbody.(*UpdateUserStatusReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserServerService_QueryUserInfo_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryUserInfoReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserServerService).QueryUserInfo(ctx, reqbody.(*QueryUserInfoReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserServerService_AddUser_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddUserReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserServerService).AddUser(ctx, reqbody.(*AddUserReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserServerService_QueryUserRank_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryUserRankReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserServerService).QueryUserRank(ctx, reqbody.(*QueryUserRankReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserServerService_QueryAllUser_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryUserReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserServerService).QueryAllUser(ctx, reqbody.(*QueryUserReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserServerService_UpdateUser_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateUserReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserServerService).UpdateUser(ctx, reqbody.(*UpdateUserReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserServerService_Login_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &LoginReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserServerService).Login(ctx, reqbody.(*LoginReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserServerService_IsLogin_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &IsLoginReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserServerService).IsLogin(ctx, reqbody.(*IsLoginReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserServerService_UpdateMyInfo_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateMyInfoReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserServerService).UpdateMyInfo(ctx, reqbody.(*UpdateMyInfoReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserServerService_QueryTeacher_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &QueryTeacherReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserServerService).QueryTeacher(ctx, reqbody.(*QueryTeacherReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// UserServerServer_ServiceDesc descriptor for server.RegisterService.
var UserServerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "oj.user.UserServer",
	HandlerType: ((*UserServerService)(nil)),
	Methods: []server.Method{
		{
			Name: "/oj.user.UserServer/QueryUserPrivilege",
			Func: UserServerService_QueryUserPrivilege_Handler,
		},
		{
			Name: "/oj.user.UserServer/UpdateUserPassword",
			Func: UserServerService_UpdateUserPassword_Handler,
		},
		{
			Name: "/oj.user.UserServer/UpdateUserStatus",
			Func: UserServerService_UpdateUserStatus_Handler,
		},
		{
			Name: "/oj.user.UserServer/QueryUserInfo",
			Func: UserServerService_QueryUserInfo_Handler,
		},
		{
			Name: "/oj.user.UserServer/AddUser",
			Func: UserServerService_AddUser_Handler,
		},
		{
			Name: "/oj.user.UserServer/QueryUserRank",
			Func: UserServerService_QueryUserRank_Handler,
		},
		{
			Name: "/oj.user.UserServer/QueryAllUser",
			Func: UserServerService_QueryAllUser_Handler,
		},
		{
			Name: "/oj.user.UserServer/UpdateUser",
			Func: UserServerService_UpdateUser_Handler,
		},
		{
			Name: "/oj.user.UserServer/Login",
			Func: UserServerService_Login_Handler,
		},
		{
			Name: "/oj.user.UserServer/IsLogin",
			Func: UserServerService_IsLogin_Handler,
		},
		{
			Name: "/oj.user.UserServer/UpdateMyInfo",
			Func: UserServerService_UpdateMyInfo_Handler,
		},
		{
			Name: "/oj.user.UserServer/QueryTeacher",
			Func: UserServerService_QueryTeacher_Handler,
		},
	},
}

// RegisterUserServerService registers service.
func RegisterUserServerService(s server.Service, svr UserServerService) {
	if err := s.Register(&UserServerServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("UserServer register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedUserServer struct{}

// QueryUserPrivilege QueryUserPrivilege 查询用户权限
func (s *UnimplementedUserServer) QueryUserPrivilege(ctx context.Context, req *QueryUserPrivilegeReq) (*QueryUserPrivilegeRsp, error) {
	return nil, errors.New("rpc QueryUserPrivilege of service UserServer is not implemented")
}

// UpdateUserPassword UpdateUserPassword 更新用户密码
func (s *UnimplementedUserServer) UpdateUserPassword(ctx context.Context, req *UpdateUserPasswordReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateUserPassword of service UserServer is not implemented")
}

// UpdateUserStatus UpdateUserStatus 查询用户状态
func (s *UnimplementedUserServer) UpdateUserStatus(ctx context.Context, req *UpdateUserStatusReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateUserStatus of service UserServer is not implemented")
}

// QueryUserInfo QueryUserInfo 查询用户信息
func (s *UnimplementedUserServer) QueryUserInfo(ctx context.Context, req *QueryUserInfoReq) (*QueryUserInfoRsp, error) {
	return nil, errors.New("rpc QueryUserInfo of service UserServer is not implemented")
}

// AddUser AddUser 添加用户
func (s *UnimplementedUserServer) AddUser(ctx context.Context, req *AddUserReq) (*CommonRsp, error) {
	return nil, errors.New("rpc AddUser of service UserServer is not implemented")
}

// QueryUserRank QueryUserRank 查询用户排名
func (s *UnimplementedUserServer) QueryUserRank(ctx context.Context, req *QueryUserRankReq) (*QueryUserRankRsp, error) {
	return nil, errors.New("rpc QueryUserRank of service UserServer is not implemented")
}

// QueryAllUser QueryAllUser 查询所有用户
func (s *UnimplementedUserServer) QueryAllUser(ctx context.Context, req *QueryUserReq) (*QueryAllUserRsp, error) {
	return nil, errors.New("rpc QueryAllUser of service UserServer is not implemented")
}

// UpdateUser UpdateUser 更新用户
func (s *UnimplementedUserServer) UpdateUser(ctx context.Context, req *UpdateUserReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateUser of service UserServer is not implemented")
}

// Login Login 登陆
func (s *UnimplementedUserServer) Login(ctx context.Context, req *LoginReq) (*LoginRsp, error) {
	return nil, errors.New("rpc Login of service UserServer is not implemented")
}

// IsLogin IsLogin 是否登录
func (s *UnimplementedUserServer) IsLogin(ctx context.Context, req *IsLoginReq) (*IsLoginRsp, error) {
	return nil, errors.New("rpc IsLogin of service UserServer is not implemented")
}

// UpdateMyInfo UpdateMyInfo 更新我的信息
func (s *UnimplementedUserServer) UpdateMyInfo(ctx context.Context, req *UpdateMyInfoReq) (*CommonRsp, error) {
	return nil, errors.New("rpc UpdateMyInfo of service UserServer is not implemented")
}

// QueryTeacher QueryTeacher 查询老师信息
func (s *UnimplementedUserServer) QueryTeacher(ctx context.Context, req *QueryTeacherReq) (*QueryAllUserRsp, error) {
	return nil, errors.New("rpc QueryTeacher of service UserServer is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// UserServerClientProxy defines service client proxy
type UserServerClientProxy interface {
	// QueryUserPrivilege QueryUserPrivilege 查询用户权限
	QueryUserPrivilege(ctx context.Context, req *QueryUserPrivilegeReq, opts ...client.Option) (rsp *QueryUserPrivilegeRsp, err error)
	// UpdateUserPassword UpdateUserPassword 更新用户密码
	UpdateUserPassword(ctx context.Context, req *UpdateUserPasswordReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// UpdateUserStatus UpdateUserStatus 查询用户状态
	UpdateUserStatus(ctx context.Context, req *UpdateUserStatusReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QueryUserInfo QueryUserInfo 查询用户信息
	QueryUserInfo(ctx context.Context, req *QueryUserInfoReq, opts ...client.Option) (rsp *QueryUserInfoRsp, err error)
	// AddUser AddUser 添加用户
	AddUser(ctx context.Context, req *AddUserReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QueryUserRank QueryUserRank 查询用户排名
	QueryUserRank(ctx context.Context, req *QueryUserRankReq, opts ...client.Option) (rsp *QueryUserRankRsp, err error)
	// QueryAllUser QueryAllUser 查询所有用户
	QueryAllUser(ctx context.Context, req *QueryUserReq, opts ...client.Option) (rsp *QueryAllUserRsp, err error)
	// UpdateUser UpdateUser 更新用户
	UpdateUser(ctx context.Context, req *UpdateUserReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// Login Login 登陆
	Login(ctx context.Context, req *LoginReq, opts ...client.Option) (rsp *LoginRsp, err error)
	// IsLogin IsLogin 是否登录
	IsLogin(ctx context.Context, req *IsLoginReq, opts ...client.Option) (rsp *IsLoginRsp, err error)
	// UpdateMyInfo UpdateMyInfo 更新我的信息
	UpdateMyInfo(ctx context.Context, req *UpdateMyInfoReq, opts ...client.Option) (rsp *CommonRsp, err error)
	// QueryTeacher QueryTeacher 查询老师信息
	QueryTeacher(ctx context.Context, req *QueryTeacherReq, opts ...client.Option) (rsp *QueryAllUserRsp, err error)
}

type UserServerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewUserServerClientProxy = func(opts ...client.Option) UserServerClientProxy {
	return &UserServerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *UserServerClientProxyImpl) QueryUserPrivilege(ctx context.Context, req *QueryUserPrivilegeReq, opts ...client.Option) (*QueryUserPrivilegeRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.user.UserServer/QueryUserPrivilege")
	msg.WithCalleeServiceName(UserServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("UserServer")
	msg.WithCalleeMethod("QueryUserPrivilege")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryUserPrivilegeRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserServerClientProxyImpl) UpdateUserPassword(ctx context.Context, req *UpdateUserPasswordReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.user.UserServer/UpdateUserPassword")
	msg.WithCalleeServiceName(UserServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("UserServer")
	msg.WithCalleeMethod("UpdateUserPassword")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserServerClientProxyImpl) UpdateUserStatus(ctx context.Context, req *UpdateUserStatusReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.user.UserServer/UpdateUserStatus")
	msg.WithCalleeServiceName(UserServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("UserServer")
	msg.WithCalleeMethod("UpdateUserStatus")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserServerClientProxyImpl) QueryUserInfo(ctx context.Context, req *QueryUserInfoReq, opts ...client.Option) (*QueryUserInfoRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.user.UserServer/QueryUserInfo")
	msg.WithCalleeServiceName(UserServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("UserServer")
	msg.WithCalleeMethod("QueryUserInfo")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryUserInfoRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserServerClientProxyImpl) AddUser(ctx context.Context, req *AddUserReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.user.UserServer/AddUser")
	msg.WithCalleeServiceName(UserServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("UserServer")
	msg.WithCalleeMethod("AddUser")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserServerClientProxyImpl) QueryUserRank(ctx context.Context, req *QueryUserRankReq, opts ...client.Option) (*QueryUserRankRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.user.UserServer/QueryUserRank")
	msg.WithCalleeServiceName(UserServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("UserServer")
	msg.WithCalleeMethod("QueryUserRank")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryUserRankRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserServerClientProxyImpl) QueryAllUser(ctx context.Context, req *QueryUserReq, opts ...client.Option) (*QueryAllUserRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.user.UserServer/QueryAllUser")
	msg.WithCalleeServiceName(UserServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("UserServer")
	msg.WithCalleeMethod("QueryAllUser")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryAllUserRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserServerClientProxyImpl) UpdateUser(ctx context.Context, req *UpdateUserReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.user.UserServer/UpdateUser")
	msg.WithCalleeServiceName(UserServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("UserServer")
	msg.WithCalleeMethod("UpdateUser")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserServerClientProxyImpl) Login(ctx context.Context, req *LoginReq, opts ...client.Option) (*LoginRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.user.UserServer/Login")
	msg.WithCalleeServiceName(UserServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("UserServer")
	msg.WithCalleeMethod("Login")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &LoginRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserServerClientProxyImpl) IsLogin(ctx context.Context, req *IsLoginReq, opts ...client.Option) (*IsLoginRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.user.UserServer/IsLogin")
	msg.WithCalleeServiceName(UserServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("UserServer")
	msg.WithCalleeMethod("IsLogin")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &IsLoginRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserServerClientProxyImpl) UpdateMyInfo(ctx context.Context, req *UpdateMyInfoReq, opts ...client.Option) (*CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.user.UserServer/UpdateMyInfo")
	msg.WithCalleeServiceName(UserServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("UserServer")
	msg.WithCalleeMethod("UpdateMyInfo")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserServerClientProxyImpl) QueryTeacher(ctx context.Context, req *QueryTeacherReq, opts ...client.Option) (*QueryAllUserRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/oj.user.UserServer/QueryTeacher")
	msg.WithCalleeServiceName(UserServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("UserServer")
	msg.WithCalleeMethod("QueryTeacher")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &QueryAllUserRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
