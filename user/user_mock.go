// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/csuJudge/judgeProto/user/user.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/csuJudge/judgeProto/user/user_mock.go -package=user -self_package=github.com/csuJudge/judgeProto/user --source=stub/github.com/csuJudge/judgeProto/user/user.trpc.go
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockUserServerService is a mock of UserServerService interface.
type MockUserServerService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServerServiceMockRecorder
}

// MockUserServerServiceMockRecorder is the mock recorder for MockUserServerService.
type MockUserServerServiceMockRecorder struct {
	mock *MockUserServerService
}

// NewMockUserServerService creates a new mock instance.
func NewMockUserServerService(ctrl *gomock.Controller) *MockUserServerService {
	mock := &MockUserServerService{ctrl: ctrl}
	mock.recorder = &MockUserServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServerService) EXPECT() *MockUserServerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockUserServerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddUser mocks base method.
func (m *MockUserServerService) AddUser(ctx context.Context, req *AddUserReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserServerServiceMockRecorder) AddUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserServerService)(nil).AddUser), ctx, req)
}

// IsLogin mocks base method.
func (m *MockUserServerService) IsLogin(ctx context.Context, req *IsLoginReq) (*IsLoginRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLogin", ctx, req)
	ret0, _ := ret[0].(*IsLoginRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLogin indicates an expected call of IsLogin.
func (mr *MockUserServerServiceMockRecorder) IsLogin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLogin", reflect.TypeOf((*MockUserServerService)(nil).IsLogin), ctx, req)
}

// Login mocks base method.
func (m *MockUserServerService) Login(ctx context.Context, req *LoginReq) (*LoginRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*LoginRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServerServiceMockRecorder) Login(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServerService)(nil).Login), ctx, req)
}

// QueryAllUser mocks base method.
func (m *MockUserServerService) QueryAllUser(ctx context.Context, req *QueryUserReq) (*QueryAllUserRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllUser", ctx, req)
	ret0, _ := ret[0].(*QueryAllUserRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllUser indicates an expected call of QueryAllUser.
func (mr *MockUserServerServiceMockRecorder) QueryAllUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllUser", reflect.TypeOf((*MockUserServerService)(nil).QueryAllUser), ctx, req)
}

// QueryTeacher mocks base method.
func (m *MockUserServerService) QueryTeacher(ctx context.Context, req *QueryTeacherReq) (*QueryAllUserRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTeacher", ctx, req)
	ret0, _ := ret[0].(*QueryAllUserRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTeacher indicates an expected call of QueryTeacher.
func (mr *MockUserServerServiceMockRecorder) QueryTeacher(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTeacher", reflect.TypeOf((*MockUserServerService)(nil).QueryTeacher), ctx, req)
}

// QueryUserInfo mocks base method.
func (m *MockUserServerService) QueryUserInfo(ctx context.Context, req *QueryUserInfoReq) (*QueryUserInfoRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserInfo", ctx, req)
	ret0, _ := ret[0].(*QueryUserInfoRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserInfo indicates an expected call of QueryUserInfo.
func (mr *MockUserServerServiceMockRecorder) QueryUserInfo(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserInfo", reflect.TypeOf((*MockUserServerService)(nil).QueryUserInfo), ctx, req)
}

// QueryUserPrivilege mocks base method.
func (m *MockUserServerService) QueryUserPrivilege(ctx context.Context, req *QueryUserPrivilegeReq) (*QueryUserPrivilegeRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserPrivilege", ctx, req)
	ret0, _ := ret[0].(*QueryUserPrivilegeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserPrivilege indicates an expected call of QueryUserPrivilege.
func (mr *MockUserServerServiceMockRecorder) QueryUserPrivilege(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserPrivilege", reflect.TypeOf((*MockUserServerService)(nil).QueryUserPrivilege), ctx, req)
}

// QueryUserRank mocks base method.
func (m *MockUserServerService) QueryUserRank(ctx context.Context, req *QueryUserReq) (*QueryUserRankRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserRank", ctx, req)
	ret0, _ := ret[0].(*QueryUserRankRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserRank indicates an expected call of QueryUserRank.
func (mr *MockUserServerServiceMockRecorder) QueryUserRank(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserRank", reflect.TypeOf((*MockUserServerService)(nil).QueryUserRank), ctx, req)
}

// UpdateMyInfo mocks base method.
func (m *MockUserServerService) UpdateMyInfo(ctx context.Context, req *UpdateMyInfoReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMyInfo", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMyInfo indicates an expected call of UpdateMyInfo.
func (mr *MockUserServerServiceMockRecorder) UpdateMyInfo(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMyInfo", reflect.TypeOf((*MockUserServerService)(nil).UpdateMyInfo), ctx, req)
}

// UpdateUser mocks base method.
func (m *MockUserServerService) UpdateUser(ctx context.Context, req *UpdateUserReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServerServiceMockRecorder) UpdateUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServerService)(nil).UpdateUser), ctx, req)
}

// UpdateUserPassword mocks base method.
func (m *MockUserServerService) UpdateUserPassword(ctx context.Context, req *UpdateUserPasswordReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserServerServiceMockRecorder) UpdateUserPassword(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserServerService)(nil).UpdateUserPassword), ctx, req)
}

// UpdateUserStatus mocks base method.
func (m *MockUserServerService) UpdateUserStatus(ctx context.Context, req *UpdateUserStatusReq) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserStatus", ctx, req)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserStatus indicates an expected call of UpdateUserStatus.
func (mr *MockUserServerServiceMockRecorder) UpdateUserStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserStatus", reflect.TypeOf((*MockUserServerService)(nil).UpdateUserStatus), ctx, req)
}

// MockUserServerClientProxy is a mock of UserServerClientProxy interface.
type MockUserServerClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockUserServerClientProxyMockRecorder
}

// MockUserServerClientProxyMockRecorder is the mock recorder for MockUserServerClientProxy.
type MockUserServerClientProxyMockRecorder struct {
	mock *MockUserServerClientProxy
}

// NewMockUserServerClientProxy creates a new mock instance.
func NewMockUserServerClientProxy(ctrl *gomock.Controller) *MockUserServerClientProxy {
	mock := &MockUserServerClientProxy{ctrl: ctrl}
	mock.recorder = &MockUserServerClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServerClientProxy) EXPECT() *MockUserServerClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockUserServerClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddUser mocks base method.
func (m *MockUserServerClientProxy) AddUser(ctx context.Context, req *AddUserReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUser", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserServerClientProxyMockRecorder) AddUser(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserServerClientProxy)(nil).AddUser), varargs...)
}

// IsLogin mocks base method.
func (m *MockUserServerClientProxy) IsLogin(ctx context.Context, req *IsLoginReq, opts ...client.Option) (*IsLoginRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsLogin", varargs...)
	ret0, _ := ret[0].(*IsLoginRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLogin indicates an expected call of IsLogin.
func (mr *MockUserServerClientProxyMockRecorder) IsLogin(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLogin", reflect.TypeOf((*MockUserServerClientProxy)(nil).IsLogin), varargs...)
}

// Login mocks base method.
func (m *MockUserServerClientProxy) Login(ctx context.Context, req *LoginReq, opts ...client.Option) (*LoginRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*LoginRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServerClientProxyMockRecorder) Login(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServerClientProxy)(nil).Login), varargs...)
}

// QueryAllUser mocks base method.
func (m *MockUserServerClientProxy) QueryAllUser(ctx context.Context, req *QueryUserReq, opts ...client.Option) (*QueryAllUserRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAllUser", varargs...)
	ret0, _ := ret[0].(*QueryAllUserRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllUser indicates an expected call of QueryAllUser.
func (mr *MockUserServerClientProxyMockRecorder) QueryAllUser(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllUser", reflect.TypeOf((*MockUserServerClientProxy)(nil).QueryAllUser), varargs...)
}

// QueryTeacher mocks base method.
func (m *MockUserServerClientProxy) QueryTeacher(ctx context.Context, req *QueryTeacherReq, opts ...client.Option) (*QueryAllUserRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTeacher", varargs...)
	ret0, _ := ret[0].(*QueryAllUserRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTeacher indicates an expected call of QueryTeacher.
func (mr *MockUserServerClientProxyMockRecorder) QueryTeacher(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTeacher", reflect.TypeOf((*MockUserServerClientProxy)(nil).QueryTeacher), varargs...)
}

// QueryUserInfo mocks base method.
func (m *MockUserServerClientProxy) QueryUserInfo(ctx context.Context, req *QueryUserInfoReq, opts ...client.Option) (*QueryUserInfoRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryUserInfo", varargs...)
	ret0, _ := ret[0].(*QueryUserInfoRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserInfo indicates an expected call of QueryUserInfo.
func (mr *MockUserServerClientProxyMockRecorder) QueryUserInfo(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserInfo", reflect.TypeOf((*MockUserServerClientProxy)(nil).QueryUserInfo), varargs...)
}

// QueryUserPrivilege mocks base method.
func (m *MockUserServerClientProxy) QueryUserPrivilege(ctx context.Context, req *QueryUserPrivilegeReq, opts ...client.Option) (*QueryUserPrivilegeRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryUserPrivilege", varargs...)
	ret0, _ := ret[0].(*QueryUserPrivilegeRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserPrivilege indicates an expected call of QueryUserPrivilege.
func (mr *MockUserServerClientProxyMockRecorder) QueryUserPrivilege(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserPrivilege", reflect.TypeOf((*MockUserServerClientProxy)(nil).QueryUserPrivilege), varargs...)
}

// QueryUserRank mocks base method.
func (m *MockUserServerClientProxy) QueryUserRank(ctx context.Context, req *QueryUserReq, opts ...client.Option) (*QueryUserRankRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryUserRank", varargs...)
	ret0, _ := ret[0].(*QueryUserRankRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserRank indicates an expected call of QueryUserRank.
func (mr *MockUserServerClientProxyMockRecorder) QueryUserRank(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserRank", reflect.TypeOf((*MockUserServerClientProxy)(nil).QueryUserRank), varargs...)
}

// UpdateMyInfo mocks base method.
func (m *MockUserServerClientProxy) UpdateMyInfo(ctx context.Context, req *UpdateMyInfoReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMyInfo", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMyInfo indicates an expected call of UpdateMyInfo.
func (mr *MockUserServerClientProxyMockRecorder) UpdateMyInfo(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMyInfo", reflect.TypeOf((*MockUserServerClientProxy)(nil).UpdateMyInfo), varargs...)
}

// UpdateUser mocks base method.
func (m *MockUserServerClientProxy) UpdateUser(ctx context.Context, req *UpdateUserReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServerClientProxyMockRecorder) UpdateUser(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServerClientProxy)(nil).UpdateUser), varargs...)
}

// UpdateUserPassword mocks base method.
func (m *MockUserServerClientProxy) UpdateUserPassword(ctx context.Context, req *UpdateUserPasswordReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserPassword", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserServerClientProxyMockRecorder) UpdateUserPassword(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserServerClientProxy)(nil).UpdateUserPassword), varargs...)
}

// UpdateUserStatus mocks base method.
func (m *MockUserServerClientProxy) UpdateUserStatus(ctx context.Context, req *UpdateUserStatusReq, opts ...client.Option) (*CommonRsp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserStatus", varargs...)
	ret0, _ := ret[0].(*CommonRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserStatus indicates an expected call of UpdateUserStatus.
func (mr *MockUserServerClientProxyMockRecorder) UpdateUserStatus(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserStatus", reflect.TypeOf((*MockUserServerClientProxy)(nil).UpdateUserStatus), varargs...)
}
